{"version":3,"file":"kontent-delivery.umd.js","mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,wC;;;;;;;;;;;;;;;AChJO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACO;AACP,sC;;;;;;;;;;;;;;;ACtBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,yC;;;;;;;;;;;;;;;;;;;;;;;AClBA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AAC0B;AACkD;AAC7B;AACO;AAC/C;AACP;AACA;AACA,qJAAqJ,8DAAW;AAChK;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAY;AAC5B;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,6BAA6B,wFAA+B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAY;AAC5B;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACA,qJAAqJ,8DAAW;AAChK;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,6BAA6B,wFAA+B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAY;AAC5B;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACA,qJAAqJ,8DAAW;AAChK;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,6BAA6B,wFAA+B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAY;AAC5B;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACA,qJAAqJ,8DAAW;AAChK;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,6BAA6B,wFAA+B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAY;AAC5B;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACA,qJAAqJ,8DAAW;AAChK;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,6BAA6B,wFAA+B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAY;AAC5B;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA,KAAK;AACL;AACA,+CAA+C,8DAAW,+BAA+B,IAAI,mFAAmF;AAChL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8DAAW;AAC3C;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,wDAAY;AAC5B;AACA;AACA;AACA,mDAAmD,sBAAsB,uBAAuB,uBAAuB,2BAA2B,SAAS;AAC3J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,4CAA4C,SAAS,iCAAiC,kBAAkB;AACxG;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0C;;;;;;;;;;;AC7PU;AACV,uC;;;;;;;;;;;;;;;;ACDA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AAC0B;AACwB;AAC3C;AACP;AACA;AACA,6BAA6B,6CAAK;AAClC;AACA;AACA;AACA;AACA,yBAAyB,8DAA+B;AACxD,SAAS;AACT;AACA;AACA;AACA,yBAAyB,+DAAgC;AACzD,SAAS;AACT;AACA;AACA;AACA,yBAAyB,8DAA+B;AACxD,SAAS;AACT;AACA;AACA;AACA,yBAAyB,gEAAiC;AAC1D,SAAS;AACT;AACA;AACA;AACA,yBAAyB,iEAAkC;AAC3D,SAAS;AACT;AACA;AACA,eAAe,8DAA+B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;ACpDU;AACV,yC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDgC;AACD;AACD;AACG;AACD;AACI;AACpC,iC;;;;;;;;;;;;;;ACNO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,6C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA;AAC0B;AACD;AACF;AACvB,iC;;;;;;;;;;;;;;;;;ACJ6B;AACD;AACC;AAC7B,iC;;;;;;;;;;;ACHU;AACV,qC;;;;;;;;;;;;;;ACDO;AACP;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC,sC;;;;;;;;;;;ACzBU;AACV,sC;;;;;;;;;;;;;;;;;;;ACDgC;AACI;AACF;AACI;AACS;;AAE/C;AACA,QAAQ,gDAAW;AACnB,OAAO,+CAAU;AACjB,SAAS,iDAAY;AACrB;;AAEA,i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U;AACxC;AACA,CAAC;;AAED,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;ACxBhB;;AAEE;AACf;AACA;;;;;;;;;;;;;;;;;;;;;;;ACJa;;AAEqB;AACY;AACW;AACN;AACR;AACI;AACC;AACH;;AAE7C,mBAAmB,6DAAS;;AAE5B;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB,8DAAkB;AACrC,oBAAoB,8DAAkB;AACtC;AACA;;AAEA;AACA;AACA;AACA,aAAa,eAAe;AAC5B,aAAa,SAAS;AACtB;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA,aAAa,2DAAW;;AAExB,WAAW,yCAAyC;;AAEpD;AACA,MAAM,6DAAS;AACf;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,UAAU,iDAAK;AACf;AACA;AACA;AACA,QAAQ;AACR,QAAQ,6DAAS;AACjB;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA,IAAI,6DAAS;AACb;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,oCAAoC,iDAAK;AACzC;AACA;AACA;;AAEA,eAAe,iDAAK;AACpB;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,wDAAY;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA,qBAAqB,2DAAe;AACpC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,2DAAe;AAC/B,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa,2DAAW;AACxB,qBAAqB,6DAAa;AAClC,WAAW,gEAAQ;AACnB;AACA;;AAEA;AACA,iDAAK;AACL;AACA;AACA,wBAAwB,2DAAW,aAAa;AAChD;AACA;AACA,yBAAyB;AACzB,KAAK;AACL;AACA,CAAC;;AAED,iDAAK;AACL;;AAEA;AACA;AACA,0BAA0B,2DAAW,aAAa;AAClD;AACA;AACA;AACA,UAAU,IAAI;AACd;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA,CAAC;;AAED,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;;ACjPR;;AAEmB;;AAEhC;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iDAAK;AACnB;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,CAAC;;AAED;AACA,kDAAkD,YAAY;;AAE9D;AACA;AACA;;AAEA,EAAE,iDAAK;AACP;AACA,GAAG;AACH;AACA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;ACtGb;;AAEmB;AACsB;;AAEtD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAAS,iDAAK;AACd;;AAEA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,MAAM,iDAAK;AACX;AACA;;AAEA;AACA;AACA;;AAEA,OAAO,iDAAK;;AAEZ,MAAM,iDAAK;AACX;AACA;;AAEA,MAAM,iDAAK;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,uBAAuB,iDAAK;;AAE5B;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,iDAAK;;AAEvB;AACA;AACA;AACA;;AAEA;AACA,MAAM,iDAAK;;AAEX,QAAQ,iDAAK;AACb;AACA,MAAM,QAAQ,iDAAK;AACnB,iBAAiB,oEAAY;AAC7B,MAAM,SAAS,iDAAK,qBAAqB,iDAAK;AAC9C,kBAAkB;AAClB;AACA,aAAa,iDAAK;AAClB;AACA;;AAEA;AACA,WAAW,iDAAK;AAChB;;AAEA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,kBAAkB,iDAAK;;AAEvB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,YAAY,iDAAK;AACjB;AACA;;AAEA,YAAY,iDAAK;AACjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kBAAkB,iDAAK;;AAEvB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAoB,iDAAK;;AAEzB;AACA;;AAEA;AACA;AACA;AACA;;AAEA,QAAQ,iDAAK;AACb;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,IAAI,iDAAK;AACT,kBAAkB,iDAAK;;AAEvB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,IAAI,iDAAK;AACT,sEAAsE,iDAAK;AAC3E,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAI,iDAAK;;AAET;AACA;AACA;;AAEA;;AAEA;AACA,iDAAK,6CAA6C,MAAM;AACxD,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,iDAAK;;AAEL,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;;ACzTf;;AAEqB;;AAElC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,UAAU;AACvB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA,eAAe;AACf;AACA;AACA,IAAI,iDAAK;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,iEAAe,kBAAkB,EAAC;;;;;;;;;;;;;;;;;ACtErB;;AAE2C;AACJ;;AAEpD;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACe;AACf,uBAAuB,qEAAa;AACpC;AACA,WAAW,mEAAW;AACtB;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACrBa;;AAEkC;AACF;AACD;AACW;AACJ;AACJ;;AAE/C;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,gEAAa;AAC3B;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,SAAS;AACtB;AACe;AACf;;AAEA,mBAAmB,6DAAY;;AAE/B;AACA,gBAAgB,yDAAa;AAC7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,6DAAQ,8BAA8B,0DAAQ;;AAEhE;AACA;;AAEA;AACA,oBAAoB,yDAAa;AACjC;AACA;AACA;AACA;;AAEA,uBAAuB,6DAAY;;AAEnC;AACA,GAAG;AACH,SAAS,+DAAQ;AACjB;;AAEA;AACA;AACA,+BAA+B,yDAAa;AAC5C;AACA;AACA;AACA;AACA,kCAAkC,6DAAY;AAC9C;AACA;;AAEA;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;AChFa;;AAEmB;AACa;;AAE7C,oDAAoD,wDAAY,KAAK,WAAW;;AAEhF;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACe;AACf;AACA;AACA;;AAEA;AACA,QAAQ,iDAAK,0BAA0B,iDAAK;AAC5C,aAAa,iDAAK,aAAa,SAAS;AACxC,MAAM,SAAS,iDAAK;AACpB,aAAa,iDAAK,SAAS;AAC3B,MAAM,SAAS,iDAAK;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS,iDAAK;AACd;AACA,MAAM,UAAU,iDAAK;AACrB;AACA;AACA;;AAEA;AACA;AACA,SAAS,iDAAK;AACd;AACA;AACA;;AAEA;AACA;AACA,SAAS,iDAAK;AACd;AACA,MAAM,UAAU,iDAAK;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,iDAAK,sBAAsB,uBAAuB;AACpD;AACA;AACA,KAAK,iDAAK;AACV,GAAG;;AAEH;AACA;;;;;;;;;;;;;;;;ACzGa;;AAE4B;;AAEzC;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACe;AACf;AACA;AACA;AACA,IAAI;AACJ,eAAe,sDAAU;AACzB;AACA,OAAO,sDAAU,kBAAkB,sDAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1Ba;;AAEqB;AACU;AACO;;AAEnD;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,SAAS;AACpB;AACA,aAAa,GAAG;AAChB;AACe;AACf,yBAAyB,0DAAQ;AACjC;AACA,kBAAkB,6DAAY;AAC9B;;AAEA,EAAE,iDAAK;AACP;AACA,GAAG;;AAEH;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;AC3Ba;;AAEmB;AACe;AACM;AACH;AACY;AAClB;AACc;;AAE1D;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB;AACA,aAAa,QAAQ;AACrB;AACA;AACA,MAAM,iDAAK;AACX;AACA;AACA,aAAa,iDAAK;AAClB,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,gBAAgB,wDAAoB;;AAEpC;;AAEA;AACA;AACA;AACA,4BAA4B,iDAAK;;AAEjC,2BAA2B,iDAAK;AAChC;AACA;;AAEA,uBAAuB,iDAAK;;AAE5B;AACA,iDAAiD,sEAAc;AAC/D;;AAEA,QAAQ,iDAAK;AACb,MAAM,iDAAK;AACX,MAAM,iDAAK;AACX,MAAM,iDAAK;AACX,MAAM,iDAAK;AACX,MAAM,iDAAK;AACX;AACA;AACA;AACA,QAAQ,iDAAK;AACb;AACA;AACA,QAAQ,iDAAK;AACb,gEAAgE;AAChE;AACA;;AAEA;;AAEA;AACA;AACA,eAAe,wEAAgB;AAC/B;;AAEA,wBAAwB,iDAAK;AAC7B;;AAEA,eAAe,kEAAU;AACzB,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA,QAAQ,iDAAK,qBAAqB,iDAAK;AACvC;AACA;;AAEA,gBAAgB,iDAAK;AACrB;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA,kBAAkB,2DAAU,SAAS,2DAAU;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc,0DAAQ;AACtB,UAAU,0DAAQ;AAClB,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAK;AACL;AACA,CAAC;;AAED,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;AChKX;;AAEb,iEAAe;AACf;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;ACNK,yB;;;;;;;;;;;;;;;ACAM;;AAE4B;;AAEzC;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC,WAAW,qBAAqB;AAChC;AACA,aAAa;AACb;AACA;AACA;;AAEA,YAAY,0DAAU;AACtB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA,GAAG;AACH;;AAEA,iEAAe,oBAAoB,EAAC;;;;;;;;;;;;;;;ACzDpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED,iEAAe,cAAc,EAAC;;;;;;;;;;;;;;;ACtEjB;;AAEE;AACf;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACNa;;AAEmB;AACsC;;AAEtE;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,oBAAoB;AAC/B;AACA,aAAa,QAAQ;AACrB;AACe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,iDAAK;AACX;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ,uBAAuB,iDAAK;AAC5B;AACA,UAAU,wEAAoB;AAC9B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;ACpEa;;AAEb;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACe;AACf;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACduD;AACR;AACf;;AAEhC;AACA,SAAS,QAAQ;;AAEjB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAU,aAAa,gEAAa;AAC5E;AACA;;AAEA;AACA;AACA,kBAAkB,2DAAU,YAAY,SAAS,iBAAiB,2DAAU;AAC5E,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA,WAAW,QAAQ;;AAEnB,+BAA+B,iDAAK;;AAEpC;AACA;AACA;;AAEA,iEAAe,cAAc,EAAC;;;;;;;;;;;;;;;;;AC/CI;AACU;;AAE5C,iEAAe,0DAAQ;;AAEvB;AACA;AACA;AACA;;AAEA,MAAM,iDAAK;;AAEX,MAAM,iDAAK;;AAEX,MAAM,iDAAK;;AAEX;;AAEA,uCAAuC;AACvC,KAAK;;AAEL;AACA,0DAA0D,wBAAwB;AAClF;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA,KAAK;AACL;AACA,GAAG,EAAC;;;;;;;;;;;;;;;;;ACxCS;;AAEmB;;AAEhC;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iDAAK;AACd;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,4BAA4B;AACzC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,oBAAoB,iDAAK;;AAEzB;AACA,UAAU,iDAAK;AACf;AACA,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA,0BAA0B,iDAAK;AAC/B;AACA;;AAEA;;AAEA,kBAAkB,iDAAK;AACvB;AACA;;AAEA;AACA;;AAEA,MAAM,iDAAK,yBAAyB,iDAAK;AACzC;;AAEA,IAAI,iDAAK;AACT;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA,iEAAe,cAAc,EAAC;;;;;;;;;;;;;;;AC9FjB;;AAEb;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,SAAS;AACtB;AACe;AACf;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACda;;AAEqB;;AAElC;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACe;AACf,SAAS,iDAAK;AACd;;;;;;;;;;;;;;;;ACb4C;;AAE5C,iEAAe,0DAAQ;AACvB,qBAAqB,0DAAQ;;AAE7B;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,UAAU,0DAAQ;AAClB,EAAE,0DAAQ,qCAAqC,0DAAQ;AACvD,cAAc,EAAC;;;;;;;;;;;;;;;ACbf;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;ACDP;;AAEqB;;AAElC;AACA;AACA,0BAA0B,iDAAK;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACA,iEAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA,CAAC,EAAC;;;;;;;;;;;;;;;ACtDW;;AAEE;AACf,0BAA0B,KAAK;AAC/B;AACA;;;;;;;;;;;;;;;;;;;;ACL2C;AACN;AACL;;AAEzB;AACP;AACA,uBAAuB,2DAAW;;AAElC,SAAS,wDAAQ;AACjB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEO,4CAA4C,iDAAK;;;;;;;;;;;;;;;;;;;;;;;AC3CZ;AACZ;AACmB;AAChB;AACkB;AACJ;AACE;AACd;;AAErC,iEAAe;AACf,oBAAoB,gEAAW,GAAG;;AAElC,OAAO,oEAAoE;;AAE3E,gCAAgC,6DAAY;;AAE5C,kBAAkB,wDAAQ,CAAC,kEAAa;;AAExC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAM,iDAAK;AACX,QAAQ,0DAAQ,0BAA0B,0DAAQ;AAClD,yCAAyC;AACzC,MAAM;AACN;AACA,kEAAkE;AAClE,gFAAgF;AAChF;AACA;;AAEA;AACA;AACA;;AAEA,MAAM,0DAAQ;AACd,qBAAqB,iDAAK;;AAE1B,qDAAqD,+DAAe;AACpE;AACA,4DAA4D,mDAAO;;AAEnE;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;;;;;;;;;;;;;;;ACvDY;;AAEb;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;ACtDd;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,WAAW,UAAU;AACrB;AACA,aAAa;AACb;AACe;AACf;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3BA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;;;;AC3CX;;AAEmB;AACe;AAC/C;AACoE;;AAEpE;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa;AACb;AACA;AACA,SAAS,iDAAK,yBAAyB,iDAAK;AAC5C;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACA;AACA,SAAS,iDAAK;AACd;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA,aAAa;AACb;AACA;AACA,SAAS,iDAAK;AACd;;AAEA,mBAAmB,iDAAK,cAAc,iDAAK,IAAI;AAC/C;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,WAAW,UAAU;AACrB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,WAAW,UAAU;AACrB;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,QAAQ;AACnB,WAAW,qBAAqB;AAChC;AACA;AACA;AACA;AACA,OAAO,iDAAK;AACZ;AACA;;AAEA;AACA,8BAA8B,0EAAgB;;AAE9C;AACA,YAAY,iDAAK;AACjB;AACA;AACA;AACA,GAAG;AACH;AACA,YAAY,iDAAK;AACjB,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iDAAK;;AAEhC,OAAO,iDAAK;AACZ;AACA;;AAEA;AACA;;AAEA,QAAQ,iDAAK;AACb;AACA;;AAEA,QAAQ,iDAAK;AACb;AACA;;AAEA,oBAAoB,iDAAK;AACzB,gBAAgB,2DAAU;AAC1B;;AAEA,QAAQ,iDAAK,yBAAyB,iDAAK;AAC3C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,eAAe;AAC5B,aAAa,sBAAsB;AACnC,YAAY;AACZ;AACA,eAAe,SAAS;AACxB;AACA;AACA;;AAEA;AACA,UAAU,iDAAK,kBAAkB;AACjC;AACA;AACA;AACA;AACA,QAAQ;AACR,SAAS,iDAAK;AACd,UAAU,iDAAK,sBAAsB,iDAAK,gCAAgC,iDAAK;AAC/E;AACA;AACA;;AAEA;AACA,YAAY,iDAAK;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,QAAQ,iDAAK;;AAEb;AACA;AACA;;AAEA;;AAEA,IAAI,iDAAK;AACT,uBAAuB,iDAAK;AAC5B,sBAAsB,iDAAK;AAC3B;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA,OAAO,iDAAK;AACZ;AACA;;AAEA;;AAEA;AACA;;AAEA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;;AC9Nb;;AAEmB;AACS;AACG;;AAE7B;AACf,SAAS,0DAAU,WAAW,0DAAQ;AACtC;AACA,UAAU,0DAAQ,WAAW,iDAAK;AAClC;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;;ACjBO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;;AAE5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;ACtFa;;AAE0B;AACQ;;AAE/C;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB;AACA,aAAa;AACb;AACA;AACA;AACA,wBAAwB,iDAAO;AAC/B;;AAEA;AACA;AACA;AACA,gBAAgB,2DAAU;AAC1B;AACA,QAAQ,2DAAU;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,KAAK,6BAA6B,gBAAgB;AACtE;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB;AACA,aAAa;AACb;;AAEA;AACA;AACA,cAAc,2DAAU,8BAA8B,2DAAU;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2DAAU,yCAAyC,2DAAU;AAC/E;AACA;AACA;AACA;AACA,gBAAgB,2DAAU,0BAA0B,2DAAU;AAC9D;AACA;AACA;;AAEA,iEAAe;AACf;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;AClGU;;AAEZ,iEAAe,yCAAyC;;;;;;;;;;;;;;;ACF3C;;AAEb,iEAAe,iDAAiD,EAAC;;;;;;;;;;;;;;;;ACFpD;;AAE+D;AAC5E,iEAAe,2DAA2D,wEAAoB,EAAC;;;;;;;;;;;;;;;;;;ACHrC;AACd;AACR;;AAEpC,iEAAe;AACf;AACA;AACA,mBAAmB;AACnB,YAAY;AACZ,QAAQ;AACR,GAAG;AACH;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;ACZF;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAQC;;;;;;;;;;;;;;;;;AClDsC;AACI;;AAE3C,iEAAe;AACf,KAAK,6CAAK;AACV,KAAK,sDAAQ;AACb,CAAC;;;;;;;;;;;;;;;;ACNY;;AAEwB;;AAErC;;AAEA,OAAO,UAAU;AACjB,OAAO,gBAAgB;AACvB,OAAO,uBAAuB;;AAE9B;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,SAAS;AACtB;AACA,OAAO,SAAS;;AAEhB;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;;AAGA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,UAAU;AACrB;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA,2BAA2B,oBAAoB,IAAI;AACnD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS,GAAG,SAAS;AAC5C,4BAA4B;AAC5B;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACA;AACA,SAAS,UAAU;AACnB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,kCAAkC;AAClC,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,WAAW,SAAS;AACpB,aAAa,QAAQ;AACrB;AACA,gCAAgC,WAAW,IAAI;AAC/C;AACA;AACA,eAAe,4DAAI;AACnB,MAAM;AACN;AACA;AACA,GAAG,GAAG,WAAW;AACjB;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,kBAAkB;AAC7B,WAAW,UAAU;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,UAAU;AACrB;AACA,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,eAAe;;AAEzC;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,GAAG,WAAW,cAAc;AAC5B,CAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;;;AAGA,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;UC3wBF;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D,E;;;;;UENA;UACA;UACA;UACA","sources":["webpack://kontentDelivery/webpack/universalModuleDefinition","webpack://kontentDelivery/./lib/client/delivery-client.factory.ts","webpack://kontentDelivery/./lib/client/delivery-client.ts","webpack://kontentDelivery/./lib/client/idelivery-client.interface.ts","webpack://kontentDelivery/./lib/client/index.ts","webpack://kontentDelivery/./lib/config/delivery-configs.ts","webpack://kontentDelivery/./lib/config/index.ts","webpack://kontentDelivery/./lib/contracts/contracts.ts","webpack://kontentDelivery/./lib/contracts/index.ts","webpack://kontentDelivery/./lib/elements/element-models.ts","webpack://kontentDelivery/./lib/elements/element-resolver.ts","webpack://kontentDelivery/./lib/elements/element-type.ts","webpack://kontentDelivery/./lib/elements/elements.ts","webpack://kontentDelivery/./lib/elements/index.ts","webpack://kontentDelivery/./lib/images/image-url-transformation-builder.factory.ts","webpack://kontentDelivery/./lib/images/image-url-transformation-builder.ts","webpack://kontentDelivery/./lib/images/image.models.ts","webpack://kontentDelivery/./lib/images/index.ts","webpack://kontentDelivery/./lib/index.ts","webpack://kontentDelivery/./lib/mappers/element.mapper.ts","webpack://kontentDelivery/./lib/mappers/generic-element.mapper.ts","webpack://kontentDelivery/./lib/mappers/index.ts","webpack://kontentDelivery/./lib/mappers/item.mapper.ts","webpack://kontentDelivery/./lib/mappers/language.mapper.ts","webpack://kontentDelivery/./lib/mappers/sync.mapper.ts","webpack://kontentDelivery/./lib/mappers/taxonomy.mapper.ts","webpack://kontentDelivery/./lib/mappers/type.mapper.ts","webpack://kontentDelivery/./lib/mappers/used-in.mapper.ts","webpack://kontentDelivery/./lib/models/common/base-responses.ts","webpack://kontentDelivery/./lib/models/common/common-models.ts","webpack://kontentDelivery/./lib/models/common/filters.ts","webpack://kontentDelivery/./lib/models/common/headers.ts","webpack://kontentDelivery/./lib/models/common/index.ts","webpack://kontentDelivery/./lib/models/common/pagination.class.ts","webpack://kontentDelivery/./lib/models/common/parameters.ts","webpack://kontentDelivery/./lib/models/common/sort-order.ts","webpack://kontentDelivery/./lib/models/content-type-models.ts","webpack://kontentDelivery/./lib/models/element-models.ts","webpack://kontentDelivery/./lib/models/index.ts","webpack://kontentDelivery/./lib/models/item-models.ts","webpack://kontentDelivery/./lib/models/language-models.ts","webpack://kontentDelivery/./lib/models/responses.ts","webpack://kontentDelivery/./lib/models/sync-models.ts","webpack://kontentDelivery/./lib/models/taxonomy-models.ts","webpack://kontentDelivery/./lib/query/common/base-item-listing-query.class.ts","webpack://kontentDelivery/./lib/query/common/base-listing-query.class.ts","webpack://kontentDelivery/./lib/query/common/base-query.class.ts","webpack://kontentDelivery/./lib/query/element/element-query.class.ts","webpack://kontentDelivery/./lib/query/index.ts","webpack://kontentDelivery/./lib/query/item/multiple-items-query.class.ts","webpack://kontentDelivery/./lib/query/item/single-item-query.class.ts","webpack://kontentDelivery/./lib/query/items-feed/items-feed-query.class.ts","webpack://kontentDelivery/./lib/query/language/languages-query.class.ts","webpack://kontentDelivery/./lib/query/sync/initialize-sync-query.class.ts","webpack://kontentDelivery/./lib/query/sync/sync-changes-query.class.ts","webpack://kontentDelivery/./lib/query/taxonomy/taxonomies-query.class.ts","webpack://kontentDelivery/./lib/query/taxonomy/taxonomy-query.class.ts","webpack://kontentDelivery/./lib/query/type/multiple-type-query.class.ts","webpack://kontentDelivery/./lib/query/type/single-type-query.class.ts","webpack://kontentDelivery/./lib/query/used-in/used-in-query.class.ts","webpack://kontentDelivery/./lib/sdk-info.generated.ts","webpack://kontentDelivery/./lib/services/base-delivery-query.service.ts","webpack://kontentDelivery/./lib/services/delivery-query.service.ts","webpack://kontentDelivery/./lib/services/index.ts","webpack://kontentDelivery/./lib/services/mapping.service.ts","webpack://kontentDelivery/./lib/utilities/codename.helper.ts","webpack://kontentDelivery/./lib/utilities/delivery-url.helper.ts","webpack://kontentDelivery/./lib/utilities/enum.helper.ts","webpack://kontentDelivery/./lib/utilities/index.ts","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/helpers/header.helper.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/helpers/headers-helper.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/helpers/index.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/helpers/retry-helper.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/helpers/url.helper.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/http/http.debugger.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/http/http.functions.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/http/http.models.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/http/http.service.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/http/ihttp.service.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/http/index.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/http/test-http.service.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/index.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/models/index.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/models/isdk-info.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/models/parameters.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/models/url.models.js","webpack://kontentDelivery/./node_modules/axios/lib/adapters/adapters.js","webpack://kontentDelivery/./node_modules/axios/lib/adapters/fetch.js","webpack://kontentDelivery/./node_modules/axios/lib/adapters/xhr.js","webpack://kontentDelivery/./node_modules/axios/lib/axios.js","webpack://kontentDelivery/./node_modules/axios/lib/cancel/CancelToken.js","webpack://kontentDelivery/./node_modules/axios/lib/cancel/CanceledError.js","webpack://kontentDelivery/./node_modules/axios/lib/cancel/isCancel.js","webpack://kontentDelivery/./node_modules/axios/lib/core/Axios.js","webpack://kontentDelivery/./node_modules/axios/lib/core/AxiosError.js","webpack://kontentDelivery/./node_modules/axios/lib/core/AxiosHeaders.js","webpack://kontentDelivery/./node_modules/axios/lib/core/InterceptorManager.js","webpack://kontentDelivery/./node_modules/axios/lib/core/buildFullPath.js","webpack://kontentDelivery/./node_modules/axios/lib/core/dispatchRequest.js","webpack://kontentDelivery/./node_modules/axios/lib/core/mergeConfig.js","webpack://kontentDelivery/./node_modules/axios/lib/core/settle.js","webpack://kontentDelivery/./node_modules/axios/lib/core/transformData.js","webpack://kontentDelivery/./node_modules/axios/lib/defaults/index.js","webpack://kontentDelivery/./node_modules/axios/lib/defaults/transitional.js","webpack://kontentDelivery/./node_modules/axios/lib/env/data.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/AxiosURLSearchParams.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/HttpStatusCode.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/bind.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/buildURL.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/combineURLs.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/composeSignals.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/cookies.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/formDataToJSON.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/isAbsoluteURL.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/isAxiosError.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/isURLSameOrigin.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/null.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/parseHeaders.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/parseProtocol.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/progressEventReducer.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/resolveConfig.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/speedometer.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/spread.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/throttle.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/toFormData.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/toURLEncodedForm.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/trackStream.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/validator.js","webpack://kontentDelivery/./node_modules/axios/lib/platform/browser/classes/Blob.js","webpack://kontentDelivery/./node_modules/axios/lib/platform/browser/classes/FormData.js","webpack://kontentDelivery/./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js","webpack://kontentDelivery/./node_modules/axios/lib/platform/browser/index.js","webpack://kontentDelivery/./node_modules/axios/lib/platform/common/utils.js","webpack://kontentDelivery/./node_modules/axios/lib/platform/index.js","webpack://kontentDelivery/./node_modules/axios/lib/utils.js","webpack://kontentDelivery/webpack/bootstrap","webpack://kontentDelivery/webpack/runtime/define property getters","webpack://kontentDelivery/webpack/runtime/hasOwnProperty shorthand","webpack://kontentDelivery/webpack/runtime/make namespace object","webpack://kontentDelivery/webpack/before-startup","webpack://kontentDelivery/webpack/startup","webpack://kontentDelivery/webpack/after-startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"kontentDelivery\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"kontentDelivery\"] = factory();\n\telse\n\t\troot[\"kontentDelivery\"] = factory();\n})(self, () => {\nreturn ","import { ClientTypes } from '../models';\r\nimport { IDeliveryClientConfig } from '../config/delivery-configs';\r\nimport { DeliveryClient } from './delivery-client';\r\n\r\nexport function createDeliveryClient<TClientTypes extends ClientTypes = ClientTypes>(\r\n    config: IDeliveryClientConfig\r\n): DeliveryClient<TClientTypes> {\r\n    return new DeliveryClient(config);\r\n}\r\n","import { HttpService } from '@kontent-ai/core-sdk';\r\nimport { IDeliveryClientConfig } from '../config';\r\nimport { ClientTypes, IContentItem } from '../models';\r\nimport {\r\n    ElementQuery,\r\n    ItemsFeedQuery,\r\n    MultipleItemsQuery,\r\n    MultipleTypeQuery,\r\n    SingleItemQuery,\r\n    SingleTypeQuery,\r\n    TaxonomiesQuery,\r\n    TaxonomyQuery,\r\n    LanguagesQuery,\r\n    InitializeSyncQuery,\r\n    SyncChangesQuery,\r\n    UsedInQuery\r\n} from '../query';\r\nimport { sdkInfo } from '../sdk-info.generated';\r\nimport { IMappingService, MappingService, QueryService } from '../services';\r\nimport { IDeliveryClient } from './idelivery-client.interface';\r\n\r\nexport class DeliveryClient<TClientTypes extends ClientTypes = ClientTypes> implements IDeliveryClient {\r\n    private queryService: QueryService<TClientTypes>;\r\n    public mappingService: IMappingService<TClientTypes>;\r\n\r\n    /**\r\n     * Delivery client used to fetch data from Kontent.ai\r\n     * @constructor\r\n     * @param {IDeliveryClientConfig} config - The client configuration\r\n     */\r\n    constructor(protected config: IDeliveryClientConfig) {\r\n        if (!config) {\r\n            throw Error(`Delivery client configuration is not set`);\r\n        }\r\n\r\n        this.mappingService = new MappingService(config);\r\n        this.queryService = new QueryService(\r\n            config,\r\n            config.httpService ? config.httpService : new HttpService(),\r\n            {\r\n                host: sdkInfo.host,\r\n                name: sdkInfo.name,\r\n                version: sdkInfo.version\r\n            },\r\n            this.mappingService\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets query for multiple languages\r\n     */\r\n    languages(): LanguagesQuery<TClientTypes> {\r\n        return new LanguagesQuery(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets query for multiple types\r\n     */\r\n    types(): MultipleTypeQuery<TClientTypes> {\r\n        return new MultipleTypeQuery(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets query for single type\r\n     * @param {string} typeCodename - Codename of the type to fetch\r\n     */\r\n    type(typeCodename: TClientTypes['contentTypeCodenames']): SingleTypeQuery<TClientTypes> {\r\n        return new SingleTypeQuery(this.config, this.queryService, typeCodename);\r\n    }\r\n\r\n    /**\r\n     * Gets query for multiple items\r\n     */\r\n    items<TContentItem extends IContentItem = TClientTypes['contentItemType']>(): MultipleItemsQuery<\r\n        TClientTypes,\r\n        TContentItem\r\n    > {\r\n        return new MultipleItemsQuery<TClientTypes, TContentItem>(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets query for single item\r\n     * @param {string} codename - Codename of item to fetch\r\n     */\r\n    item<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        codename: string\r\n    ): SingleItemQuery<TClientTypes, TContentItem> {\r\n        return new SingleItemQuery<TClientTypes, TContentItem>(this.config, this.queryService, codename);\r\n    }\r\n\r\n    /**\r\n     * Gets query for items feed. Executes single HTTP request only\r\n     */\r\n    itemsFeed<TContentItem extends IContentItem = TClientTypes['contentItemType']>(): ItemsFeedQuery<\r\n        TClientTypes,\r\n        TContentItem\r\n    > {\r\n        return new ItemsFeedQuery<TClientTypes, TContentItem>(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets query for single taxonomy\r\n     * @param {string} codename - Codename of taxonomy to fetch\r\n     */\r\n    taxonomy(codename: TClientTypes['taxonomyCodenames']): TaxonomyQuery<TClientTypes> {\r\n        return new TaxonomyQuery(this.config, this.queryService, codename);\r\n    }\r\n\r\n    /**\r\n     * Gets query for multiple taxonomies\r\n     */\r\n    taxonomies(): TaxonomiesQuery<TClientTypes> {\r\n        return new TaxonomiesQuery<TClientTypes>(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets query for an element within a type\r\n     * @param {string} typeCodename - Codename of the type\r\n     * @param {string} elementCodename - Codename of the element\r\n     */\r\n    element(\r\n        typeCodename: TClientTypes['contentTypeCodenames'],\r\n        elementCodename: TClientTypes['elementCodenames']\r\n    ): ElementQuery<TClientTypes> {\r\n        return new ElementQuery(this.config, this.queryService, typeCodename, elementCodename);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Sync API v1 is deprecated and will be shut down by the end of this year.\r\n     * Please migrate to Sync API v2 using the `@kontent-ai/sync-sdk` package.\r\n     *\r\n     * For migration guidance and full documentation, visit:\r\n     * https://kontent.ai/learn/docs/apis/openapi/sync-api-v2/\r\n     */\r\n    initializeSync(): InitializeSyncQuery<TClientTypes> {\r\n        return new InitializeSyncQuery(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Sync API v1 is deprecated and will be shut down by the end of this year.\r\n     * Please migrate to Sync API v2 using the `@kontent-ai/sync-sdk` package.\r\n     *\r\n     * For migration guidance and full documentation, visit:\r\n     * https://kontent.ai/learn/docs/apis/openapi/sync-api-v2/\r\n     */\r\n    syncChanges(): SyncChangesQuery<TClientTypes> {\r\n        return new SyncChangesQuery(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Item listing of where an asset is used\r\n     */\r\n    assetUsedIn(assetCodename: string): UsedInQuery<TClientTypes> {\r\n        return new UsedInQuery(this.config, this.queryService, { entity: 'asset', codename: assetCodename });\r\n    }\r\n\r\n    /**\r\n     * Item listing of where a content item is used\r\n     */\r\n    itemUsedIn(itemCodename: string): UsedInQuery<TClientTypes> {\r\n        return new UsedInQuery(this.config, this.queryService, { entity: 'contentItem', codename: itemCodename });\r\n    }\r\n}\r\n","import { ClientTypes, IContentItem } from '../models';\r\nimport {\r\n    ElementQuery,\r\n    ItemsFeedQuery,\r\n    MultipleItemsQuery,\r\n    MultipleTypeQuery,\r\n    SingleItemQuery,\r\n    SingleTypeQuery,\r\n    TaxonomiesQuery,\r\n    TaxonomyQuery,\r\n    LanguagesQuery,\r\n    InitializeSyncQuery,\r\n    SyncChangesQuery,\r\n    UsedInQuery\r\n} from '../query';\r\nimport { IMappingService } from '../services';\r\n\r\nexport interface IDeliveryClient<TClientTypes extends ClientTypes = ClientTypes> {\r\n    /**\r\n     * Mapping service - can be used to get strongly typed responses from json result\r\n     */\r\n    mappingService: IMappingService<TClientTypes>;\r\n\r\n    /**\r\n     * Gets query for languages\r\n     */\r\n    languages(): LanguagesQuery<TClientTypes>;\r\n\r\n    /**\r\n     * Gets query for multiple types\r\n     */\r\n    types(): MultipleTypeQuery<TClientTypes>;\r\n\r\n    /**\r\n     * Gets query for single type\r\n     * @param {string} typeCodename - Codename of the type to retrieve\r\n     */\r\n    type(typeCodename: TClientTypes['contentTypeCodenames']): SingleTypeQuery<TClientTypes>;\r\n\r\n    /**\r\n     * Gets query for multiple items\r\n     */\r\n    items<TContentItem extends IContentItem = TClientTypes['contentItemType']>(): MultipleItemsQuery<\r\n        TClientTypes,\r\n        TContentItem\r\n    >;\r\n\r\n    /**\r\n     * Gets query for items feed. Executes single HTTP request only\r\n     */\r\n    itemsFeed<TContentItem extends IContentItem = TClientTypes['contentItemType']>(): ItemsFeedQuery<\r\n        TClientTypes,\r\n        TContentItem\r\n    >;\r\n\r\n    /**\r\n     * Gets query for single item\r\n     * @param {string} codename - Codename of item to retrieve\r\n     */\r\n    item<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        codename: string\r\n    ): SingleItemQuery<TClientTypes, TContentItem>;\r\n\r\n    /**\r\n     * Gets query for multiple taxonomies\r\n     */\r\n    taxonomies(): TaxonomiesQuery<TClientTypes>;\r\n\r\n    /**\r\n     * Gets query for single item\r\n     * @param {string} codename - Codename of taxonomy to retrieve\r\n     */\r\n    taxonomy(codename: TClientTypes['taxonomyCodenames']): TaxonomyQuery<TClientTypes>;\r\n\r\n    /**\r\n     * Gets query for an element within a type\r\n     */\r\n    element(\r\n        typeCodename: TClientTypes['contentTypeCodenames'],\r\n        elementCodename: TClientTypes['elementCodenames']\r\n    ): ElementQuery<TClientTypes>;\r\n\r\n    /**\r\n     * @deprecated Sync API v1 is deprecated and will be shut down by the end of this year.\r\n     * Please migrate to Sync API v2 using the `@kontent-ai/sync-sdk` package.\r\n     *\r\n     * For migration guidance and full documentation, visit:\r\n     * https://kontent.ai/learn/docs/apis/openapi/sync-api-v2/\r\n     */\r\n    initializeSync(): InitializeSyncQuery<TClientTypes>;\r\n\r\n    /**\r\n     * @deprecated Sync API v1 is deprecated and will be shut down by the end of this year.\r\n     * Please migrate to Sync API v2 using the `@kontent-ai/sync-sdk` package.\r\n     *\r\n     * For migration guidance and full documentation, visit:\r\n     * https://kontent.ai/learn/docs/apis/openapi/sync-api-v2/\r\n     */\r\n    syncChanges(): SyncChangesQuery<TClientTypes>;\r\n\r\n    /**\r\n     * Item listing of where an asset is used\r\n     */\r\n    assetUsedIn(assetCodename: string): UsedInQuery<TClientTypes>;\r\n\r\n    /**\r\n     * Item listing of where a content item is used\r\n     */\r\n    itemUsedIn(itemCodename: string): UsedInQuery<TClientTypes>;\r\n}\r\n","export * from './delivery-client';\r\nexport * from './idelivery-client.interface';\r\nexport * from './delivery-client.factory';\r\n","import { IHeader, IHttpService, IRetryStrategyOptions } from '@kontent-ai/core-sdk';\r\n\r\nimport { ElementResolver } from '../elements';\r\nimport { IProxyUrlData, IQueryConfig, LinkedItemsReferenceHandler } from '../models';\r\n\r\nexport interface IDeliveryClientProxyConfig {\r\n    /**\r\n     * Base url used for preview reqeusts. Defaults to 'preview-deliver.kontent.ai'\r\n     */\r\n    basePreviewUrl?: string;\r\n\r\n    /**\r\n     * Can be used to generate custom request urls.\r\n     * Useful when you have a proxy server and need to transform url to a specific format\r\n     * and setting 'baseUrl' is not sufficient.\r\n     */\r\n    advancedProxyUrlResolver?: (data: IProxyUrlData) => string;\r\n\r\n    /**\r\n     * Base url used for all requests. Defaults to 'deliver.kontent.ai'\r\n     */\r\n    baseUrl?: string;\r\n}\r\n\r\nexport interface IDeliveryClientConfig {\r\n    /**\r\n     * EnvironmentId\r\n     */\r\n    environmentId: string;\r\n\r\n    /**\r\n     * Preview API key\r\n     */\r\n    previewApiKey?: string;\r\n\r\n    /**\r\n     * Secure API key\r\n     * Important: Use secured API only when running on Node.JS server, otherwise\r\n     * your key would be exposed in browsers\r\n     */\r\n    secureApiKey?: string;\r\n\r\n    /**\r\n     * Resolver used for using custom models for custom elements.\r\n     */\r\n    elementResolver?: ElementResolver;\r\n\r\n    /**\r\n     * Proxy configuration\r\n     */\r\n    proxy?: IDeliveryClientProxyConfig;\r\n\r\n    /**\r\n     * Default language of content items\r\n     */\r\n    defaultLanguage?: string;\r\n\r\n    /**\r\n     * Retry policy configuration\r\n     */\r\n    retryStrategy?: IRetryStrategyOptions;\r\n\r\n    /**\r\n     * Can be used to inject custom Http service to perform requests\r\n     */\r\n    httpService?: IHttpService<any>;\r\n\r\n    /**\r\n     * Extra headers added to each http request\r\n     */\r\n    globalHeaders?: (queryConfig: IQueryConfig) => IHeader[];\r\n\r\n    /**\r\n     * Default query configuration. Can be overriden by individual queries.\r\n     */\r\n    defaultQueryConfig?: IQueryConfig;\r\n\r\n    /**\r\n     * Indicates how linked item references are handled (can be used to disable refence mapping when you encounter an issue\r\n     * with circular refences)\r\n     */\r\n    linkedItemsReferenceHandler?: LinkedItemsReferenceHandler;\r\n\r\n    /**\r\n     * Sets custom domain for assets\r\n     */\r\n    assetsDomain?: string;\r\n\r\n    /**\r\n     * Codename of rendition preset to be applied by default to the base asset URL path.\r\n     */\r\n    defaultRenditionPreset?: string;\r\n\r\n    /**\r\n     * Can be used to exclude archived items from all queries by default. Only applicable when preview API is used\r\n     */\r\n    excludeArchivedItems?: boolean;\r\n}\r\n","export * from './delivery-configs';\r\n","export namespace Contracts {\r\n    export interface IPaginationContract {\r\n        skip: number;\r\n        limit: number;\r\n        count: number;\r\n        next_page: string;\r\n        total_count?: number;\r\n    }\r\n\r\n    export interface IContentTypeElementContract {\r\n        codename?: string;\r\n        type: string;\r\n        name: string;\r\n        taxonomy_group?: string;\r\n        options?: IElementOptionContract[];\r\n    }\r\n\r\n    export interface IContentTypeElementsContainer {\r\n        [key: string]: IContentTypeElementContract;\r\n    }\r\n\r\n    export interface IElementOptionContract {\r\n        name: string;\r\n        codename: string;\r\n    }\r\n\r\n    export interface IListLanguagesContract {\r\n        languages: ILanguageContract[];\r\n        pagination: IPaginationContract;\r\n    }\r\n\r\n    export interface IContentItemDeltaContract {\r\n        data: {\r\n            system: IContentItemSystemAttributesContract;\r\n            elements: IContentItemElementsContracts | undefined;\r\n        };\r\n        change_type: 'changed_item' | 'deleted_item';\r\n        timestamp: string;\r\n    }\r\n\r\n    export interface IInitializeSyncContract {\r\n        items: IContentItemDeltaContract[];\r\n    }\r\n\r\n    export interface ISyncChangesContract {\r\n        items: IContentItemDeltaContract[];\r\n    }\r\n\r\n    export interface ILanguageContract {\r\n        system: {\r\n            id: string;\r\n            name: string;\r\n            codename: string;\r\n        };\r\n    }\r\n\r\n    export interface IViewContentTypeElementContract {\r\n        codename?: string;\r\n        type: string;\r\n        name: string;\r\n        taxonomy_group?: string;\r\n        options?: IElementOptionContract[];\r\n    }\r\n\r\n    export interface IElementContract {\r\n        codename?: string;\r\n        name: string;\r\n        type: string;\r\n        value: any;\r\n        taxonomy_group?: string;\r\n    }\r\n\r\n    export interface IDateTimeElementContract extends IElementContract {\r\n        /**\r\n         * Display time zone\r\n         */\r\n        display_timezone: string;\r\n    }\r\n\r\n    export interface IAsssetRenditionContract {\r\n        rendition_id: string;\r\n        preset_id: string;\r\n        width: number;\r\n        height: number;\r\n        query: string;\r\n    }\r\n\r\n    export interface IAssetContract {\r\n        name: string;\r\n        type: string;\r\n        size: number;\r\n        description: string;\r\n        url: string;\r\n        width: number | null;\r\n        height: number | null;\r\n        renditions?: { [renditionPresetCodename: string]: IAsssetRenditionContract };\r\n    }\r\n\r\n    export interface IMultipleChoiceOptionContract {\r\n        name: string;\r\n        codename: string;\r\n    }\r\n\r\n    export interface ITaxonomyTerm {\r\n        name: string;\r\n        codename: string;\r\n    }\r\n\r\n    export interface IRichTextElementLinkWrapperContract {\r\n        [key: string]: IRichTextElementLinkContract;\r\n    }\r\n\r\n    export interface IRichTextElementLinkContract {\r\n        type: string;\r\n        codename: string;\r\n        url_slug: string;\r\n    }\r\n\r\n    export interface IRichTextElementImageWrapperContract {\r\n        [key: string]: IRichTextElementImageContract;\r\n    }\r\n\r\n    export interface IRichTextElementImageContract {\r\n        image_id: string;\r\n        url: string;\r\n        description: string | null;\r\n        height: number | null;\r\n        width: number | null;\r\n    }\r\n\r\n    export interface IRichTextElementContract extends IElementContract {\r\n        /**\r\n         * Modular content items\r\n         */\r\n        modular_content: string[];\r\n\r\n        /**\r\n         * Json with links\r\n         */\r\n        links: IRichTextElementLinkWrapperContract;\r\n\r\n        /**\r\n         * Json with images\r\n         */\r\n        images: IRichTextElementImageWrapperContract;\r\n    }\r\n\r\n    export interface IContentItemElementsContracts {\r\n        [key: string]: IElementContract;\r\n    }\r\n\r\n    export interface ILinkContract {\r\n        codename: string;\r\n        type: string;\r\n        url_slug: string;\r\n    }\r\n\r\n    export interface IModularContentContract {\r\n        [key: string]: IModularContentContentItemContract;\r\n    }\r\n\r\n    export interface IModularContentContentItemContract {\r\n        system: IContentItemSystemAttributesContract;\r\n        elements: IContentItemElementsContracts;\r\n    }\r\n\r\n    export interface IContentItemContract {\r\n        system: IContentItemSystemAttributesContract;\r\n        elements: IContentItemElementsContracts;\r\n    }\r\n\r\n    export interface IContentItemSystemAttributesContract {\r\n        id: string;\r\n        name: string;\r\n        codename: string;\r\n        type: string;\r\n        last_modified: string;\r\n        language: string;\r\n        sitemap_locations: string[];\r\n        collection: string;\r\n        workflow_step: string | null;\r\n        workflow: string | null;\r\n    }\r\n\r\n    export interface IItemsWithModularContentContract {\r\n        items: IContentItemContract[];\r\n        modular_content: IModularContentContract;\r\n    }\r\n\r\n    export interface IItemsFeedContract extends IItemsWithModularContentContract {}\r\n\r\n    export interface IUsedInItemsContract {\r\n        items: IUsedInItemContract[];\r\n    }\r\n\r\n    export interface IUsedInItemContract {\r\n        system: {\r\n            id: string;\r\n            name: string;\r\n            codename: string;\r\n            language: string;\r\n            type: string;\r\n            collection: string;\r\n            workflow: string;\r\n            workflow_step: string;\r\n            last_modified: string;\r\n        };\r\n    }\r\n\r\n    export interface IListContentItemsContract extends IItemsWithModularContentContract {\r\n        pagination: IPaginationContract;\r\n    }\r\n\r\n    export interface IViewContentItemContract {\r\n        item: IContentItemContract;\r\n        modular_content: IModularContentContract;\r\n    }\r\n\r\n    export interface ITaxonomyTermsContract {\r\n        name: string;\r\n        codename: string;\r\n        terms: ITaxonomyTermsContract[];\r\n    }\r\n\r\n    export interface ITaxonomySystemAttributesContract {\r\n        id: string;\r\n        name: string;\r\n        codename: string;\r\n        last_modified: Date;\r\n    }\r\n\r\n    export interface ITaxonomyGroupContract {\r\n        system: ITaxonomySystemAttributesContract;\r\n        terms: ITaxonomyTermsContract[];\r\n    }\r\n\r\n    export interface IViewTaxonomyGroupContract {\r\n        system: ITaxonomySystemAttributesContract;\r\n        terms: ITaxonomyTermsContract[];\r\n    }\r\n\r\n    export interface IListTaxonomyGroupsContract {\r\n        taxonomies: ITaxonomyGroupContract[];\r\n        pagination: IPaginationContract;\r\n    }\r\n\r\n    export interface IContentTypeSystemAttributesContract {\r\n        id: string;\r\n        name: string;\r\n        codename: string;\r\n        last_modified: Date;\r\n    }\r\n\r\n    export interface IContentTypeContract {\r\n        system: IContentTypeSystemAttributesContract;\r\n        elements: IContentTypeElementsContainer;\r\n    }\r\n\r\n    export interface IListContentTypeContract {\r\n        types: IContentTypeContract[];\r\n        pagination: IPaginationContract;\r\n    }\r\n\r\n    export interface IViewContentTypeContract extends IContentTypeContract {}\r\n}\r\n","export * from './contracts';\r\n","import { Contracts } from '../contracts';\r\nimport { IContentItemSystemAttributes } from '../models/item-models';\r\nimport { ElementType } from './element-type';\r\n\r\nexport namespace ElementModels {\r\n    export interface IElementWrapper {\r\n        element: string;\r\n        system: IContentItemSystemAttributes;\r\n        rawElement: Contracts.IElementContract;\r\n    }\r\n\r\n    export interface IElement<TValue> {\r\n        /**\r\n         * Name of the element\r\n         */\r\n        name: string;\r\n\r\n        /**\r\n         * Element type\r\n         */\r\n        type: ElementType;\r\n\r\n        /**\r\n         * Element value\r\n         */\r\n        value: TValue;\r\n    }\r\n\r\n    export interface AssetModel {\r\n        /**\r\n         * Name of the asset\r\n         */\r\n        name: string;\r\n\r\n        /**\r\n         * Type of the asset\r\n         */\r\n        type: string;\r\n\r\n        /**\r\n         * Size of the asset\r\n         */\r\n        size: number;\r\n\r\n        /**\r\n         * Description of the asset\r\n         */\r\n        description: string | null;\r\n\r\n        /**\r\n         * Url of the asset\r\n         */\r\n        url: string;\r\n\r\n        /**\r\n         * Width in pixels for image assets\r\n         */\r\n        width: number | null;\r\n\r\n        /**\r\n         * Height in pixels for image assets\r\n         */\r\n        height: number | null;\r\n\r\n        /**\r\n         * Dictionary with rendition preset codenames as keys and respective renditions as values.\r\n         */\r\n        renditions: { [renditionPresetCodename: string]: Rendition } | null;\r\n    }\r\n\r\n    export interface Rendition {\r\n        rendition_id: string;\r\n        preset_id: string;\r\n        width: number;\r\n        height: number;\r\n        query: string;\r\n        url: string;\r\n    }\r\n\r\n    export interface MultipleChoiceOption<TOptionCodename extends string = string> {\r\n        name: string;\r\n        codename: TOptionCodename;\r\n    }\r\n\r\n    export interface TaxonomyTerm<TTaxonomyCodename extends string = string> {\r\n        name: string;\r\n        codename: TTaxonomyCodename;\r\n    }\r\n}\r\n","import { ElementModels } from './element-models';\r\n\r\nexport type ElementResolver = (element: ElementModels.IElementWrapper) => any;\r\n","/**\r\n* Represents codename of Kontent.ai element types\r\n*/\r\nexport enum ElementType {\r\n    Text = 'text',\r\n    Number = 'number',\r\n    ModularContent = 'modular_content',\r\n    Asset = 'asset',\r\n    DateTime = 'date_time',\r\n    RichText = 'rich_text',\r\n    MultipleChoice = 'multiple_choice',\r\n    UrlSlug = 'url_slug',\r\n    Taxonomy = 'taxonomy',\r\n    Custom = 'custom',\r\n    Unknown = 'unknown'\r\n}\r\n","import { IContentItem, ILink, IRichTextImage } from '../models';\r\nimport { ElementModels } from './element-models';\r\n\r\nexport namespace Elements {\r\n    export type TextElement = ElementModels.IElement<string>;\r\n\r\n    export type LinkedItemsElement<TContentItem extends IContentItem = IContentItem> = ElementModels.IElement<\r\n        string[]\r\n    > & {\r\n        /**\r\n         * Linked items\r\n         */\r\n        linkedItems: TContentItem[];\r\n    };\r\n\r\n    export type MultipleChoiceElement<TOptionCodenames extends string = string> = ElementModels.IElement<\r\n        ElementModels.MultipleChoiceOption<TOptionCodenames>[]\r\n    >;\r\n\r\n    export type DateTimeElement = ElementModels.IElement<string | null> & {\r\n        /**\r\n         * Display time zone\r\n         */\r\n        displayTimeZone: string | null;\r\n    };\r\n\r\n    export type RichTextElement<TContentItem extends IContentItem = IContentItem> = ElementModels.IElement<string> & {\r\n        /**\r\n         * Links\r\n         */\r\n        links: ILink[];\r\n\r\n        /**\r\n         * Images included within rich text element\r\n         */\r\n        images: IRichTextImage[];\r\n\r\n        /**\r\n         * Array of linked item codenames\r\n         */\r\n        linkedItemCodenames: string[];\r\n\r\n        /**\r\n         * Array of linked items retrieved from `modular_content` part of the response. Not all items might be here\r\n         * as it depends on the `depth` parameter of query.\r\n         * The `linkedItemsReferenceHandler` configuration can be used to disable mapping of linked items\r\n         */\r\n        linkedItems: TContentItem[];\r\n    };\r\n\r\n    export type NumberElement = ElementModels.IElement<number | null>;\r\n\r\n    export type AssetsElement = ElementModels.IElement<ElementModels.AssetModel[]>;\r\n\r\n    export type UrlSlugElement = ElementModels.IElement<string>;\r\n\r\n    export type TaxonomyElement<\r\n        TaxonomyCodenames extends string = string,\r\n        TaxonomyGroupCodename extends string = string\r\n    > = ElementModels.IElement<ElementModels.TaxonomyTerm<TaxonomyCodenames>[]> & {\r\n        /**\r\n         * Taxonomy group\r\n         */\r\n        taxonomyGroup: TaxonomyGroupCodename;\r\n    };\r\n\r\n    export type UnknownElement = ElementModels.IElement<any>;\r\n\r\n    export type CustomElement<TValue = string> = ElementModels.IElement<TValue>;\r\n}\r\n","export * from './element-models';\r\nexport * from './element-type';\r\nexport * from './elements';\r\nexport * from './element-resolver';\r\n","import { ImageUrlTransformationBuilder } from './image-url-transformation-builder';\r\n\r\nexport function transformImageUrl(url: string): ImageUrlTransformationBuilder {\r\n    return new ImageUrlTransformationBuilder(url);\r\n}\r\n","import { IQueryParameter } from '@kontent-ai/core-sdk';\r\n\r\nimport { Parameters } from '../models';\r\nimport { ImageCompression, ImageFitMode, ImageFormat } from './image.models';\r\n\r\nexport class ImageUrlTransformationBuilder {\r\n  private queryParams: IQueryParameter[] = [];\r\n  private readonly automaticFormatValue: string = 'format';\r\n\r\n  constructor(\r\n    /** Image url */\r\n    public imageUrl: string\r\n  ) { }\r\n\r\n  /**\r\n   * Used to add custom parameters to existing query string\r\n   * @param param Parameter (may or may not include value)\r\n   */\r\n  withCustomParam(param: string): this {\r\n    this.queryParams.push(\r\n      new Parameters.CustomParameter(param)\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The dpr transformation is used to serve correctly sized images for devices that expose a device pixel ratio.\r\n   * @param dpr A required DPR value.\r\n   */\r\n  withDpr(dpr: number): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('dpr', dpr.toString())\r\n    );\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Applies the crop transformation that removes pixels from an image outside the specified rectangle.\r\n   * @param x Rectangle offset on the X-axis.\r\n   * @param y Rectangle offset on the Y-axis.\r\n   * @param width Rectangle width.\r\n   * @param height Rectangle height.\r\n   */\r\n  withRectangleCrop(x: number, y: number, width: number, height: number): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('rect', [x, y, width, height].join(','))\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Applies the crop transformation centered on the specified point.\r\n   * @param x Focal point X coordinate.\r\n   * @param y Focal point Y coordinate.\r\n   * @param z Zoom of the transformation.\r\n   */\r\n  withFocalPointCrop(x: number, y: number, z: number): this {\r\n    this.withFitMode('crop');\r\n\r\n    this.queryParams.push(new Parameters.QueryParameter('crop', 'focalpoint'));\r\n    this.queryParams.push(new Parameters.QueryParameter('fp-x', x.toString()));\r\n    this.queryParams.push(new Parameters.QueryParameter('fp-y', y.toString()));\r\n    this.queryParams.push(new Parameters.QueryParameter('fp-z', z.toString()));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables WebP image support.\r\n   * @param compression Specifies the lossy or lossless compression.\r\n   */\r\n  withAutomaticFormat(backupFormat?: ImageFormat): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('auto', this.automaticFormatValue)\r\n    );\r\n\r\n    if (backupFormat) {\r\n      this.withFormat(backupFormat);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The fit transformation controls how the output image is fit to its target dimensions after resizing.\r\n   * @param fitMode Specifies the mode for the transformation.\r\n   */\r\n  withFitMode(fitMode: ImageFitMode): this {\r\n    this.queryParams.push(new Parameters.QueryParameter('fit', fitMode));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Specifies the compression mode for the WebP image transformations.\r\n   * @param compression Specifies the lossy or lossless compression.\r\n   */\r\n  withCompression(compression: ImageCompression): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter(\r\n        'lossless',\r\n        compression === 'lossless' ? 'true' : 'false'\r\n      )\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Applies the quality parameter that enables control over the compression level for lossy file-formatted images.\r\n   * @param quality The required quality of the image.\r\n   */\r\n  withQuality(quality: number): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('q', quality.toString())\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The format transformation enables the source image to be converted (a.k.a., \"transcoded\") from\r\n   * one encoded format to another. This is very useful when the source image has been saved in a sub-optimal\r\n   * file format that hinders performance.\r\n   * @param format Target image file type.\r\n   */\r\n  withFormat(format: ImageFormat): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('fm', format)\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The height transformation enables dynamic height resizing based on pixels and percent values.\r\n   * @param height A required image height.\r\n   */\r\n  withHeight(height: number): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('h', height.toString())\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The width transformation enables dynamic width resizing based on pixels and percent values.\r\n   * @param width A required image width.\r\n   */\r\n  withWidth(width: number): this {\r\n    this.queryParams.push(new Parameters.QueryParameter('w', width.toString()));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets params applied to image\r\n   */\r\n  getParams(): IQueryParameter[] {\r\n    return this.queryParams;\r\n  }\r\n\r\n  /**\r\n   * Gets query string part of the image URL\r\n   */\r\n  getQueryString(): string {\r\n    let query: string = '';\r\n    this.queryParams.forEach(filter => {\r\n      if (query.indexOf('?') > -1) {\r\n        query = query + '&' + filter.getParam();\r\n      } else {\r\n        query = query + '?' + filter.getParam();\r\n      }\r\n    });\r\n\r\n    return query;\r\n  }\r\n\r\n  /**\r\n   * Gets full transformed url to image with parameters\r\n   */\r\n  getUrl(): string {\r\n    return this.imageUrl + this.getQueryString();\r\n  }\r\n}\r\n","export type ImageFitMode = 'clip' | 'scale' | 'crop';\r\nexport type ImageFormat = 'gif' | 'png' |'png8' | 'jpg' | 'pjpg' |'webp'| 'mp4';\r\nexport type ImageCompression = 'lossless' | 'lossy';\r\n\r\n","export * from './image-url-transformation-builder';\r\nexport * from './image.models';\r\nexport * from './image-url-transformation-builder.factory';\r\n","// Public API\r\nexport * from './client';\r\nexport * from './config';\r\nexport * from './contracts';\r\nexport * from './elements';\r\nexport * from './images';\r\nexport * from './mappers';\r\nexport * from './models';\r\nexport * from './query';\r\nexport * from './sdk-info.generated';\r\nexport * from './services';\r\nexport * from './utilities';\r\n","import { codenameHelper, deliveryUrlHelper, enumHelper } from '../utilities';\r\n\r\nimport { IDeliveryClientConfig } from '../config';\r\nimport { Contracts } from '../contracts';\r\nimport { ElementModels, Elements, ElementType } from '../elements';\r\nimport {\r\n    IContentItem,\r\n    IContentItemsContainer,\r\n    IContentItemWithRawDataContainer,\r\n    IContentItemWithRawElements,\r\n    ILink,\r\n    IMapElementsResult,\r\n    IRichTextImage\r\n} from '../models';\r\n\r\ninterface IRichTextImageUrlRecord {\r\n    originalUrl: string;\r\n    newUrl: string;\r\n}\r\n\r\nexport class ElementMapper<TContentItemType extends IContentItem> {\r\n    constructor(private readonly config: IDeliveryClientConfig) {}\r\n\r\n    mapElements<TContentItem extends TContentItemType = TContentItemType>(data: {\r\n        dataToMap: IContentItemWithRawElements;\r\n        processedItems: IContentItemsContainer<TContentItem>;\r\n        processingStartedForCodenames: string[];\r\n        preparedItems: IContentItemWithRawDataContainer;\r\n    }): IMapElementsResult<TContentItem, TContentItemType> | undefined {\r\n        // return processed item to avoid infinite recursion\r\n        const processedItem =\r\n            data.processedItems[codenameHelper.escapeCodenameInCodenameIndexer(data.dataToMap.item.system.codename)];\r\n        if (processedItem) {\r\n            // item was already resolved\r\n            return {\r\n                item: processedItem,\r\n                processedItems: data.processedItems,\r\n                preparedItems: data.preparedItems,\r\n                processingStartedForCodenames: data.processingStartedForCodenames\r\n            };\r\n        }\r\n\r\n        const preparedItem =\r\n            data.preparedItems[codenameHelper.escapeCodenameInCodenameIndexer(data.dataToMap.item.system.codename)];\r\n\r\n        const itemInstance = preparedItem?.item;\r\n\r\n        if (!itemInstance) {\r\n            // item is not present in response\r\n            return undefined;\r\n        }\r\n\r\n        // mapp elements\r\n        const elementCodenames = Object.getOwnPropertyNames(data.dataToMap.rawItem.elements);\r\n\r\n        for (const elementCodename of elementCodenames) {\r\n            const elementWrapper: ElementModels.IElementWrapper = {\r\n                system: data.dataToMap.item.system,\r\n                rawElement: data.dataToMap.rawItem.elements[elementCodename],\r\n                element: elementCodename\r\n            };\r\n\r\n            const mappedElement = this.mapElement({\r\n                elementWrapper: elementWrapper,\r\n                item: itemInstance,\r\n                preparedItems: data.preparedItems,\r\n                processingStartedForCodenames: data.processingStartedForCodenames,\r\n                processedItems: data.processedItems\r\n            });\r\n\r\n            // set mapped elements\r\n            itemInstance.elements[elementCodename] = mappedElement;\r\n        }\r\n\r\n        return {\r\n            item: itemInstance as TContentItem,\r\n            processedItems: data.processedItems,\r\n            preparedItems: data.preparedItems,\r\n            processingStartedForCodenames: data.processingStartedForCodenames\r\n        };\r\n    }\r\n\r\n    private mapElement(data: {\r\n        elementWrapper: ElementModels.IElementWrapper;\r\n        item: IContentItem;\r\n        processedItems: IContentItemsContainer<TContentItemType>;\r\n        processingStartedForCodenames: string[];\r\n        preparedItems: IContentItemWithRawDataContainer;\r\n    }): ElementModels.IElement<any> {\r\n        const elementType = enumHelper.getEnumFromValue<ElementType>(ElementType, data.elementWrapper.rawElement.type);\r\n        if (elementType) {\r\n            if (elementType === ElementType.ModularContent) {\r\n                return this.mapLinkedItemsElement({\r\n                    elementWrapper: data.elementWrapper,\r\n                    preparedItems: data.preparedItems,\r\n                    processingStartedForCodenames: data.processingStartedForCodenames,\r\n                    processedItems: data.processedItems\r\n                });\r\n            }\r\n\r\n            if (elementType === ElementType.Text) {\r\n                return this.mapTextElement(data.elementWrapper);\r\n            }\r\n            if (elementType === ElementType.Asset) {\r\n                return this.mapAssetsElement(data.elementWrapper);\r\n            }\r\n\r\n            if (elementType === ElementType.Number) {\r\n                return this.mapNumberElement(data.elementWrapper);\r\n            }\r\n            if (elementType === ElementType.MultipleChoice) {\r\n                return this.mapMultipleChoiceElement(data.elementWrapper);\r\n            }\r\n\r\n            if (elementType === ElementType.DateTime) {\r\n                return this.mapDateTimeElement(data.elementWrapper);\r\n            }\r\n\r\n            if (elementType === ElementType.RichText) {\r\n                // add to parent items\r\n                return this.mapRichTextElement(\r\n                    data.elementWrapper,\r\n                    data.processedItems,\r\n                    data.processingStartedForCodenames,\r\n                    data.preparedItems\r\n                );\r\n            }\r\n\r\n            if (elementType === ElementType.UrlSlug) {\r\n                return this.mapUrlSlugElement(data.elementWrapper);\r\n            }\r\n\r\n            if (elementType === ElementType.Taxonomy) {\r\n                return this.mapTaxonomyElement(data.elementWrapper);\r\n            }\r\n\r\n            if (elementType === ElementType.Custom) {\r\n                return this.mapCustomElement(data.elementWrapper);\r\n            }\r\n        }\r\n        console.warn(\r\n            `Could not map element '${data.elementWrapper.rawElement.name}' of type '${data.elementWrapper.rawElement.type}'. Returning unknown element instead.`\r\n        );\r\n        return this.mapUnknowElement(data.elementWrapper);\r\n    }\r\n\r\n    private mapRichTextElement(\r\n        elementWrapper: ElementModels.IElementWrapper,\r\n        processedItems: IContentItemsContainer<TContentItemType>,\r\n        processingStartedForCodenames: string[],\r\n        preparedItems: IContentItemWithRawDataContainer\r\n    ): Elements.RichTextElement {\r\n        const rawElement = elementWrapper.rawElement as Contracts.IRichTextElementContract;\r\n\r\n        // get all linked items and linked items codenames nested in rich text\r\n        const richTextLinkedItems: IContentItem[] = [];\r\n        const richTextLinkedItemsCodenames: string[] = [];\r\n\r\n        // The Kontent Delivery API is not guaranteed to return rich-text modular_content array items in the same order in which they appear inside the `value` property.\r\n        // We extract the modular_content codenames in the rich-text value and sort the raw modular_content based on that order instead.\r\n        const rawModularContentCodenamesMatches = (rawElement.value as string).matchAll(\r\n            /<object[^>]+data-codename=\"(?<codename>[a-z0-9_]*)\".*?>/g\r\n        );\r\n        const rawModularContentCodenamesSorted = Array.from(rawModularContentCodenamesMatches).reduce<string[]>(\r\n            (acc, match) => {\r\n                if (match.groups && match.groups.codename) {\r\n                    acc.push(match.groups.codename);\r\n                }\r\n                return acc;\r\n            },\r\n            [] as string[]\r\n        );\r\n        const rawModularContentCodenames = [...rawElement.modular_content].sort(function (a, b) {\r\n            return rawModularContentCodenamesSorted.indexOf(a) - rawModularContentCodenamesSorted.indexOf(b);\r\n        });\r\n\r\n        for (const codename of rawModularContentCodenames) {\r\n            richTextLinkedItemsCodenames.push(codename);\r\n            // get linked item and check if it exists (it might not be included in response due to 'Depth' parameter)\r\n            const preparedData = preparedItems[codename];\r\n\r\n            // first try to get existing item\r\n            if (this.canMapLinkedItems()) {\r\n                const existingLinkedItem = this.getOrSaveLinkedItemForElement(\r\n                    codename,\r\n                    rawElement,\r\n                    processedItems,\r\n                    processingStartedForCodenames,\r\n                    preparedItems\r\n                );\r\n\r\n                if (existingLinkedItem) {\r\n                    // item was found, add it to linked items\r\n                    richTextLinkedItems.push(existingLinkedItem);\r\n                } else {\r\n                    // item was not found or not yet resolved\r\n                    if (preparedData) {\r\n                        const mappedLinkedItemResult = this.mapElements({\r\n                            dataToMap: preparedData,\r\n                            preparedItems: preparedItems,\r\n                            processingStartedForCodenames: processingStartedForCodenames,\r\n                            processedItems: processedItems\r\n                        });\r\n\r\n                        // add mapped linked item to result\r\n                        if (mappedLinkedItemResult) {\r\n                            richTextLinkedItems.push(mappedLinkedItemResult.item);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // get rich text images\r\n        const richTextImagesResult = this.getRichTextImages(rawElement.images);\r\n\r\n        // extract and map links & images\r\n        const links: ILink[] = this.mapRichTextLinks(rawElement.links);\r\n        const images: IRichTextImage[] = richTextImagesResult.richTextImages;\r\n\r\n        // replace asset urls in html\r\n        const richTextHtml: string = this.getRichTextHtml(rawElement.value, richTextImagesResult.imageUrlRecords);\r\n\r\n        return {\r\n            images: images,\r\n            linkedItemCodenames: richTextLinkedItemsCodenames,\r\n            linkedItems: richTextLinkedItems,\r\n            links: links,\r\n            name: rawElement.name,\r\n            type: ElementType.RichText,\r\n            value: richTextHtml\r\n        };\r\n    }\r\n\r\n    private mapDateTimeElement(elementWrapper: ElementModels.IElementWrapper): Elements.DateTimeElement {\r\n        const rawElement = elementWrapper.rawElement as Contracts.IDateTimeElementContract;\r\n        return {\r\n            ...this.buildElement(elementWrapper, ElementType.DateTime, () => rawElement.value),\r\n            displayTimeZone: rawElement.display_timezone ?? null\r\n        };\r\n    }\r\n\r\n    private mapMultipleChoiceElement(elementWrapper: ElementModels.IElementWrapper): Elements.MultipleChoiceElement {\r\n        return this.buildElement(elementWrapper, ElementType.MultipleChoice, () => elementWrapper.rawElement.value);\r\n    }\r\n\r\n    private mapNumberElement(elementWrapper: ElementModels.IElementWrapper): Elements.NumberElement {\r\n        return this.buildElement(elementWrapper, ElementType.Number, () => {\r\n            if (elementWrapper.rawElement.value === 0) {\r\n                return 0;\r\n            } else if (elementWrapper.rawElement.value) {\r\n                return +elementWrapper.rawElement.value;\r\n            }\r\n            return null;\r\n        });\r\n    }\r\n\r\n    private mapTextElement(elementWrapper: ElementModels.IElementWrapper): Elements.TextElement {\r\n        return this.buildElement(elementWrapper, ElementType.Text, () => elementWrapper.rawElement.value);\r\n    }\r\n\r\n    private mapAssetsElement(elementWrapper: ElementModels.IElementWrapper): Elements.AssetsElement {\r\n        return this.buildElement(elementWrapper, ElementType.Asset, () => {\r\n            const assetContracts = elementWrapper.rawElement.value as Contracts.IAssetContract[];\r\n\r\n            const assets: ElementModels.AssetModel[] = [];\r\n\r\n            for (const assetContract of assetContracts) {\r\n                let renditions: { [renditionPresetCodename: string]: ElementModels.Rendition } | null = null;\r\n\r\n                // get asset url (custom domain may be configured)\r\n                const assetUrl: string = this.config.assetsDomain\r\n                    ? deliveryUrlHelper.replaceAssetDomain(assetContract.url, this.config.assetsDomain)\r\n                    : assetContract.url;\r\n\r\n                if (assetContract.renditions) {\r\n                    renditions = {};\r\n\r\n                    for (const renditionPresetKey of Object.keys(assetContract.renditions)) {\r\n                        const rendition = assetContract.renditions[renditionPresetKey];\r\n\r\n                        renditions[renditionPresetKey] = {\r\n                            ...rendition,\r\n                            url: `${assetUrl}?${rendition.query}` // enhance rendition with absolute url\r\n                        };\r\n                    }\r\n                }\r\n\r\n                const renditionToBeApplied: ElementModels.Rendition | null =\r\n                    (this.config.defaultRenditionPreset && renditions?.[this.config.defaultRenditionPreset]) || null;\r\n\r\n                const finalUrl = renditionToBeApplied?.url ?? assetUrl;\r\n\r\n                const asset: ElementModels.AssetModel = {\r\n                    ...assetContract,\r\n                    url: finalUrl, // use custom url of asset which may contain custom domain and applied rendition\r\n                    renditions\r\n                };\r\n\r\n                assets.push(asset);\r\n            }\r\n\r\n            return assets;\r\n        });\r\n    }\r\n\r\n    private mapTaxonomyElement(elementWrapper: ElementModels.IElementWrapper): Elements.TaxonomyElement {\r\n        return {\r\n            ...this.buildElement(elementWrapper, ElementType.Taxonomy, () => elementWrapper.rawElement.value),\r\n            taxonomyGroup: elementWrapper.rawElement.taxonomy_group ?? ''\r\n        };\r\n    }\r\n\r\n    private mapUnknowElement(elementWrapper: ElementModels.IElementWrapper): Elements.UnknownElement {\r\n        return this.buildElement(elementWrapper, ElementType.Unknown, () => elementWrapper.rawElement.value);\r\n    }\r\n\r\n    private mapCustomElement(\r\n        elementWrapper: ElementModels.IElementWrapper\r\n    ): Elements.CustomElement | ElementModels.IElement<string> {\r\n        // try to find element resolver\r\n        if (this.config.elementResolver) {\r\n            const elementResolverValue = this.config.elementResolver(elementWrapper);\r\n\r\n            if (elementResolverValue) {\r\n                return this.buildElement(elementWrapper, ElementType.Custom, () => elementResolverValue);\r\n            }\r\n        }\r\n\r\n        return this.buildElement(elementWrapper, ElementType.Custom, () => elementWrapper.rawElement.value);\r\n    }\r\n\r\n    private mapUrlSlugElement(elementWrapper: ElementModels.IElementWrapper): Elements.UrlSlugElement {\r\n        return this.buildElement(elementWrapper, ElementType.UrlSlug, () => elementWrapper.rawElement.value);\r\n    }\r\n\r\n    private mapLinkedItemsElement(data: {\r\n        elementWrapper: ElementModels.IElementWrapper;\r\n        processedItems: IContentItemsContainer<TContentItemType>;\r\n        processingStartedForCodenames: string[];\r\n        preparedItems: IContentItemWithRawDataContainer;\r\n    }): Elements.LinkedItemsElement<any> {\r\n        // prepare linked items\r\n        const linkedItems: IContentItem[] = [];\r\n\r\n        // value = array of item codenames\r\n        const linkedItemCodenames = data.elementWrapper.rawElement.value as string[];\r\n\r\n        for (const codename of linkedItemCodenames) {\r\n            if (this.canMapLinkedItems()) {\r\n                const linkedItem = this.getOrSaveLinkedItemForElement(\r\n                    codename,\r\n                    data.elementWrapper.rawElement,\r\n                    data.processedItems,\r\n                    data.processingStartedForCodenames,\r\n                    data.preparedItems\r\n                );\r\n                if (linkedItem) {\r\n                    // add item to result\r\n                    linkedItems.push(linkedItem);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            ...this.buildElement(data.elementWrapper, ElementType.ModularContent, () => linkedItemCodenames),\r\n            linkedItems: linkedItems\r\n        };\r\n    }\r\n\r\n    private getOrSaveLinkedItemForElement(\r\n        codename: string,\r\n        element: Contracts.IElementContract,\r\n        processedItems: IContentItemsContainer<TContentItemType>,\r\n        mappingStartedForCodenames: string[],\r\n        preparedItems: IContentItemWithRawDataContainer\r\n    ): IContentItem | undefined {\r\n        const escapedCodename = codenameHelper.escapeCodenameInCodenameIndexer(codename);\r\n\r\n        // first check if item was already resolved and return it if it was\r\n        const processedItem = processedItems[escapedCodename];\r\n\r\n        if (processedItem) {\r\n            // item was already resolved\r\n            return processedItem;\r\n        }\r\n\r\n        const preparedItem = preparedItems[escapedCodename];\r\n\r\n        if (mappingStartedForCodenames.includes(codename)) {\r\n            return preparedItem?.item;\r\n        }\r\n\r\n        mappingStartedForCodenames.push(codename);\r\n\r\n        // throw error if item is not in response and errors are not skipped\r\n        if (!preparedItem) {\r\n            return undefined;\r\n        }\r\n\r\n        let mappedLinkedItem: TContentItemType | undefined;\r\n\r\n        // original resolving if item is still undefined\r\n        const mappedLinkedItemResult = this.mapElements({\r\n            dataToMap: preparedItem,\r\n            preparedItems: preparedItems,\r\n            processingStartedForCodenames: mappingStartedForCodenames,\r\n            processedItems: processedItems\r\n        });\r\n\r\n        if (mappedLinkedItemResult) {\r\n            mappedLinkedItem = mappedLinkedItemResult.item;\r\n\r\n            // add to processed items\r\n            processedItems[escapedCodename] = mappedLinkedItem;\r\n        }\r\n\r\n        return mappedLinkedItem;\r\n    }\r\n\r\n    private mapRichTextLinks(linksJson: Contracts.IRichTextElementLinkWrapperContract): ILink[] {\r\n        const links: ILink[] = [];\r\n\r\n        for (const linkId of Object.keys(linksJson)) {\r\n            const linkRaw = linksJson[linkId];\r\n            links.push({\r\n                codename: linkRaw.codename,\r\n                linkId: linkId,\r\n                urlSlug: linkRaw.url_slug,\r\n                type: linkRaw.type\r\n            });\r\n        }\r\n\r\n        return links;\r\n    }\r\n\r\n    private getRichTextHtml(richTextHtml: string, richTextImageRecords: IRichTextImageUrlRecord[]): string {\r\n        for (const richTextImageRecord of richTextImageRecords) {\r\n            // replace rich text image url if it differs\r\n            if (richTextImageRecord.newUrl !== richTextImageRecord.originalUrl) {\r\n                richTextHtml = richTextHtml.replace(\r\n                    new RegExp(richTextImageRecord.originalUrl, 'g'),\r\n                    richTextImageRecord.newUrl\r\n                );\r\n            }\r\n        }\r\n\r\n        return richTextHtml;\r\n    }\r\n\r\n    private getRichTextImages(imagesJson: Contracts.IRichTextElementImageWrapperContract): {\r\n        richTextImages: IRichTextImage[];\r\n        imageUrlRecords: IRichTextImageUrlRecord[];\r\n    } {\r\n        const images: IRichTextImage[] = [];\r\n        const imageUrlRecords: IRichTextImageUrlRecord[] = [];\r\n\r\n        for (const imageId of Object.keys(imagesJson)) {\r\n            const imageRaw = imagesJson[imageId];\r\n\r\n            // image may contain custom asset domain\r\n            const imageUrl: string = this.config.assetsDomain\r\n                ? deliveryUrlHelper.replaceAssetDomain(imageRaw.url, this.config.assetsDomain)\r\n                : imageRaw.url;\r\n\r\n            images.push({\r\n                description: imageRaw.description ?? null,\r\n                imageId: imageRaw.image_id,\r\n                url: imageUrl,\r\n                height: imageRaw.height ?? null,\r\n                width: imageRaw.width ?? null\r\n            });\r\n\r\n            imageUrlRecords.push({\r\n                originalUrl: imageRaw.url,\r\n                newUrl: imageUrl\r\n            });\r\n        }\r\n\r\n        return {\r\n            imageUrlRecords: imageUrlRecords,\r\n            richTextImages: images\r\n        };\r\n    }\r\n\r\n    private buildElement<TValue>(\r\n        elementWrapper: ElementModels.IElementWrapper,\r\n        type: ElementType,\r\n        valueFactory: () => TValue\r\n    ): ElementModels.IElement<TValue> {\r\n        return {\r\n            name: elementWrapper.rawElement.name,\r\n            type: type,\r\n            value: valueFactory()\r\n        };\r\n    }\r\n\r\n    private canMapLinkedItems(): boolean {\r\n        if (!this.config.linkedItemsReferenceHandler) {\r\n            return true;\r\n        }\r\n        return this.config.linkedItemsReferenceHandler === 'map';\r\n    }\r\n}\r\n","import { Contracts } from '../contracts';\r\nimport { IGenericElement } from '../models';\r\n\r\nexport class GenericElementMapper {\r\n    mapElement(response: Contracts.IViewContentTypeElementContract): IGenericElement {\r\n        if (!response) {\r\n            throw Error(`Invalid response for mapping element`);\r\n        }\r\n\r\n        const element = response;\r\n\r\n        return {\r\n            codename: element.codename,\r\n            name: element.name,\r\n            type: element.type,\r\n            options: element.options ? element.options : [],\r\n            taxonomyGroup: element.taxonomy_group\r\n        };\r\n    }\r\n}\r\n","export * from './element.mapper';\r\nexport * from './item.mapper';\r\nexport * from './taxonomy.mapper';\r\nexport * from './type.mapper';\r\nexport * from './generic-element.mapper';\r\nexport * from './language.mapper';\r\nexport * from './used-in.mapper';\r\nexport * from './sync.mapper';\r\n","import { codenameHelper } from '../utilities';\r\nimport { IDeliveryClientConfig } from '../config';\r\nimport { Contracts } from '../contracts';\r\nimport {\r\n    IContentItem,\r\n    IContentItemsContainer,\r\n    IContentItemWithRawDataContainer,\r\n    IContentItemWithRawElements\r\n} from '../models';\r\nimport { ElementMapper } from './element.mapper';\r\n\r\nexport interface IMapItemResult<\r\n    TContentItem extends IContentItem = IContentItem,\r\n    TLinkedItemType extends IContentItem = IContentItem\r\n> {\r\n    item: TContentItem;\r\n    processedItems: IContentItemsContainer<TLinkedItemType>;\r\n    preparedItems: IContentItemWithRawDataContainer;\r\n    processingStartedForCodenames: string[];\r\n}\r\n\r\nexport interface IMultipleItemsMapResult<\r\n    TContentItem extends IContentItem = IContentItem,\r\n    TLinkedItemType extends IContentItem = IContentItem\r\n> {\r\n    items: TContentItem[];\r\n    linkedItems: IContentItemsContainer<TLinkedItemType>;\r\n}\r\n\r\nexport interface ISingleItemMapResult<\r\n    TContentItem extends IContentItem = IContentItem,\r\n    TLinkedItemType extends IContentItem = IContentItem\r\n> {\r\n    item: TContentItem;\r\n    linkedItems: IContentItemsContainer<TLinkedItemType>;\r\n}\r\n\r\nexport class ItemMapper<TContentItemType extends IContentItem> {\r\n    private readonly elementMapper: ElementMapper<TContentItemType>;\r\n\r\n    constructor(readonly config: IDeliveryClientConfig) {\r\n        this.elementMapper = new ElementMapper(config);\r\n    }\r\n\r\n    /**\r\n     * Maps single item to its proper strongly typed model from the given response\r\n     * @param response Response used to map the item\r\n     * @param queryConfig Query configuration\r\n     */\r\n    mapSingleItemFromResponse<TContentItem extends TContentItemType = TContentItemType>(\r\n        response: Contracts.IViewContentItemContract\r\n    ): ISingleItemMapResult<TContentItem, TContentItemType> {\r\n        const mapResult = this.mapItems<TContentItem>({\r\n            mainItems: [response.item],\r\n            linkedItems: Object.values(response.modular_content)\r\n        });\r\n\r\n        return {\r\n            item: mapResult.items[0],\r\n            linkedItems: mapResult.linkedItems\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Maps multiple items to their strongly typed model from the given  response\r\n     * @param response Response used to map the item\r\n     * @param queryConfig Query configuration\r\n     */\r\n    mapMultipleItemsFromResponse<TContentItem extends TContentItemType = TContentItemType>(\r\n        response: Contracts.IItemsWithModularContentContract\r\n    ): IMultipleItemsMapResult<TContentItem, TContentItemType> {\r\n        const mapResult = this.mapItems<TContentItem>({\r\n            mainItems: response.items,\r\n            linkedItems: Object.values(response.modular_content)\r\n        });\r\n\r\n        return mapResult;\r\n    }\r\n\r\n    /**\r\n     * Maps item contracts to full models\r\n     */\r\n    mapItems<TContentItem extends TContentItemType = TContentItemType>(data: {\r\n        mainItems: Contracts.IContentItemContract[];\r\n        linkedItems: Contracts.IContentItemContract[];\r\n    }): IMultipleItemsMapResult<TContentItem, TContentItemType> {\r\n        const processedItems: IContentItemsContainer<TContentItem> = {};\r\n        const preparedItems: IContentItemWithRawDataContainer = {};\r\n        const processingStartedForCodenames: string[] = [];\r\n        const mappedMainItems: TContentItem[] = [];\r\n        const mappedLinkedItems: IContentItemsContainer<TContentItem> = {};\r\n        const itemsToResolve: Contracts.IContentItemContract[] = [...data.mainItems, ...data.linkedItems];\r\n\r\n        // first prepare reference for all items\r\n        for (const item of itemsToResolve) {\r\n            preparedItems[codenameHelper.escapeCodenameInCodenameIndexer(item.system.codename)] = {\r\n                item: this.createContentItem(item),\r\n                rawItem: item\r\n            };\r\n        }\r\n\r\n        // then resolve main items\r\n        for (const item of data.mainItems) {\r\n            const itemResult = this.mapItem<TContentItem>({\r\n                item: preparedItems[codenameHelper.escapeCodenameInCodenameIndexer(item.system.codename)],\r\n                processedItems: processedItems,\r\n                preparedItems: preparedItems,\r\n                processingStartedForCodenames: processingStartedForCodenames\r\n            });\r\n            mappedMainItems.push(itemResult.item);\r\n        }\r\n\r\n        // and linked items\r\n        for (const item of data.linkedItems) {\r\n            const itemResult = this.mapItem<TContentItem>({\r\n                item: preparedItems[codenameHelper.escapeCodenameInCodenameIndexer(item.system.codename)],\r\n                processedItems: processedItems,\r\n                preparedItems: preparedItems,\r\n                processingStartedForCodenames: processingStartedForCodenames\r\n            });\r\n\r\n            mappedLinkedItems[item.system.codename] = itemResult.item;\r\n        }\r\n\r\n        return {\r\n            items: mappedMainItems,\r\n            linkedItems: mappedLinkedItems\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Maps item contract to full model\r\n     */\r\n    private mapItem<TContentItem extends TContentItemType = TContentItemType>(data: {\r\n        item: IContentItemWithRawElements;\r\n        processedItems: IContentItemsContainer<TContentItem>;\r\n        processingStartedForCodenames: string[];\r\n        preparedItems: IContentItemWithRawDataContainer;\r\n    }): IMapItemResult<TContentItem, TContentItemType> {\r\n        if (!data.item) {\r\n            throw Error(`Could not map item because its undefined`);\r\n        }\r\n\r\n        const result = this.elementMapper.mapElements<TContentItem>({\r\n            dataToMap: data.item,\r\n            preparedItems: data.preparedItems,\r\n            processingStartedForCodenames: [],\r\n            processedItems: data.processedItems\r\n        });\r\n\r\n        if (!result) {\r\n            throw Error(`Mapping of content item '${data.item.item.system.codename}' failed`);\r\n        }\r\n        return {\r\n            item: result.item,\r\n            processedItems: result.processedItems,\r\n            preparedItems: result.preparedItems,\r\n            processingStartedForCodenames: result.processingStartedForCodenames\r\n        };\r\n    }\r\n\r\n    private createContentItem(item: Contracts.IContentItemContract): IContentItem {\r\n        const contentItem: IContentItem = {\r\n            elements: {},\r\n            system: {\r\n                codename: item.system.codename,\r\n                collection: item.system.collection,\r\n                id: item.system.id,\r\n                language: item.system.language,\r\n                lastModified: item.system.last_modified,\r\n                name: item.system.name,\r\n                sitemapLocations: item.system.sitemap_locations,\r\n                type: item.system.type,\r\n                workflowStep: item.system.workflow_step ?? null,\r\n                workflow: item.system.workflow ?? null\r\n            }\r\n        };\r\n\r\n        return contentItem;\r\n    }\r\n}\r\n","import { Contracts } from '../contracts';\r\nimport { ILanguage } from '../models';\r\n\r\nexport class LanguageMapper<TLanguageCodenames extends string> {\r\n    mapMultipleLanguages(response: Contracts.IListLanguagesContract): ILanguage<TLanguageCodenames>[] {\r\n        return response.languages.map((language) => {\r\n            return this.mapLanguage(language);\r\n        });\r\n    }\r\n\r\n    private mapLanguage(language: Contracts.ILanguageContract): ILanguage<TLanguageCodenames> {\r\n        if (!language) {\r\n            throw Error(`Cannot map language`);\r\n        }\r\n\r\n        return {\r\n            system: {\r\n                codename: language.system.codename as TLanguageCodenames,\r\n                id: language.system.id,\r\n                name: language.system.name\r\n            }\r\n        };\r\n    }\r\n}\r\n","import { Contracts } from '../contracts';\r\nimport { IContentItemDelta } from '../models';\r\n\r\nexport class SyncMapper {\r\n    mapContentItemDelta(itemDeltaContract: Contracts.IContentItemDeltaContract): IContentItemDelta {\r\n        const systemContract = itemDeltaContract.data.system;\r\n\r\n        const elements: Contracts.IContentItemElementsContracts = itemDeltaContract.data.elements\r\n            ? itemDeltaContract.data.elements\r\n            : {};\r\n\r\n        return {\r\n            changeType: itemDeltaContract.change_type,\r\n            timestamp: itemDeltaContract.timestamp,\r\n            data: {\r\n                elements: elements,\r\n                system: {\r\n                    codename: systemContract.codename,\r\n                    collection: systemContract.collection,\r\n                    id: systemContract.id,\r\n                    language: systemContract.language,\r\n                    lastModified: systemContract.last_modified,\r\n                    name: systemContract.name,\r\n                    sitemapLocations: systemContract.sitemap_locations,\r\n                    type: systemContract.type,\r\n                    workflowStep: systemContract.workflow_step ?? null,\r\n                    workflow: systemContract.workflow ?? null\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n","import { Contracts } from '../contracts';\r\nimport { ITaxonomyGroup, ITaxonomySystemAttributes, ITaxonomyTerms } from '../models';\r\n\r\nexport class TaxonomyMapper<TaxonomyCodenames extends string> {\r\n    mapTaxonomy(\r\n        taxonomySystem: Contracts.ITaxonomySystemAttributesContract,\r\n        taxonomyTerms: Contracts.ITaxonomyTermsContract[]\r\n    ): ITaxonomyGroup<TaxonomyCodenames> {\r\n        if (!taxonomySystem) {\r\n            throw Error(`Cannot map taxonomy due to missing 'system' property`);\r\n        }\r\n\r\n        if (!taxonomyTerms) {\r\n            throw Error(`Cannot map taxonomy due to missing 'terms' property`);\r\n        }\r\n\r\n        if (!Array.isArray(taxonomyTerms)) {\r\n            throw Error(`Cannot map terms because no terms array was provided`);\r\n        }\r\n\r\n        const mappedSystemAttributes: ITaxonomySystemAttributes<TaxonomyCodenames> = {\r\n            name: taxonomySystem.name,\r\n            codename: taxonomySystem.codename as TaxonomyCodenames,\r\n            id: taxonomySystem.id,\r\n            lastModified: taxonomySystem.last_modified\r\n        };\r\n\r\n        const mappedTerms: ITaxonomyTerms[] = this.mapTaxonomyTerms(taxonomyTerms);\r\n\r\n        return {\r\n            system: mappedSystemAttributes,\r\n            terms: mappedTerms\r\n        };\r\n    }\r\n\r\n    mapTaxonomies(taxonomies: Contracts.ITaxonomyGroupContract[]): ITaxonomyGroup<TaxonomyCodenames>[] {\r\n        if (!taxonomies) {\r\n            throw Error(`Cannot map taxonomy due to missing 'taxonomies' property`);\r\n        }\r\n\r\n        if (!Array.isArray(taxonomies)) {\r\n            throw Error(`Cannot map taxonomies because the 'taxonomies' property is not an array `);\r\n        }\r\n\r\n        const mappedTaxonomies: ITaxonomyGroup<TaxonomyCodenames>[] = [];\r\n\r\n        taxonomies.forEach((taxonomy) => {\r\n            mappedTaxonomies.push(this.mapTaxonomy(taxonomy.system, taxonomy.terms));\r\n        });\r\n\r\n        return mappedTaxonomies;\r\n    }\r\n\r\n    /**\r\n     * Recursively map array of taxonomy terms\r\n     * @param termsArray Terms array to map\r\n     */\r\n    private mapTaxonomyTerms(termsArray: Contracts.ITaxonomyTermsContract[]): ITaxonomyTerms[] {\r\n        if (termsArray.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const mappedTermsArray: ITaxonomyTerms[] = [];\r\n\r\n        termsArray.forEach((terms) => {\r\n            const mappedTerms: ITaxonomyTerms = {\r\n                codename: terms.codename,\r\n                name: terms.name,\r\n                terms: this.mapTaxonomyTerms(terms.terms)\r\n            };\r\n\r\n            mappedTermsArray.push(mappedTerms);\r\n        });\r\n\r\n        return mappedTermsArray;\r\n    }\r\n}\r\n","import { Contracts } from '../contracts';\r\nimport { IContentType, IContentTypeSystemAttributes, IGenericElement } from '../models';\r\n\r\nexport class TypeMapper<TContentTypeCodenames extends string> {\r\n    mapSingleType(response: Contracts.IViewContentTypeContract): IContentType<TContentTypeCodenames> {\r\n        return this.mapType(response);\r\n    }\r\n\r\n    mapMultipleTypes(response: Contracts.IListContentTypeContract): IContentType<TContentTypeCodenames>[] {\r\n        return response.types.map((type) => {\r\n            return this.mapType(type);\r\n        });\r\n    }\r\n\r\n    private mapType(type: Contracts.IContentTypeContract): IContentType<TContentTypeCodenames> {\r\n        if (!type) {\r\n            throw Error(`Cannot map type`);\r\n        }\r\n\r\n        if (!type.elements) {\r\n            throw Error(`Cannot map type elements`);\r\n        }\r\n\r\n        const system: IContentTypeSystemAttributes<TContentTypeCodenames> = {\r\n            codename: type.system.codename as TContentTypeCodenames,\r\n            id: type.system.id,\r\n            name: type.system.name,\r\n            lastModified: type.system.last_modified\r\n        };\r\n\r\n        const elements: IGenericElement[] = [];\r\n\r\n        const elementNames = Object.getOwnPropertyNames(type.elements);\r\n        elementNames.forEach((elementName: string) => {\r\n            const typeElement = type.elements[elementName];\r\n\r\n            if (!typeElement) {\r\n                throw Error(`Cannot find element '${elementName}' on type '${type.system.codename}'`);\r\n            }\r\n\r\n            // use json property as a codename of the type element\r\n            const elementCodename = elementName;\r\n\r\n            // extra properties for certain element types\r\n            const options: Contracts.IElementOptionContract[] = [];\r\n\r\n            // some elements can contain options\r\n            const rawOptions = typeElement.options;\r\n            if (rawOptions) {\r\n                if (!Array.isArray(rawOptions)) {\r\n                    throw Error(`Content type 'options' property has to be an array`);\r\n                }\r\n\r\n                rawOptions.forEach((rawOption) => {\r\n                    options.push({\r\n                        codename: rawOption.codename,\r\n                        name: rawOption.name\r\n                    });\r\n                });\r\n            }\r\n\r\n            elements.push({\r\n                codename: elementCodename,\r\n                taxonomyGroup: typeElement.taxonomy_group,\r\n                options: options,\r\n                name: typeElement.name,\r\n                type: typeElement.type\r\n            });\r\n        });\r\n\r\n        return {\r\n            elements: elements,\r\n            system: system\r\n        };\r\n    }\r\n}\r\n","import { Contracts } from '../contracts';\r\nimport { ClientTypes, IUsedInItemRecord } from '../models';\r\n\r\nexport class UsedInMapper<TClientTypes extends ClientTypes> {\r\n    mapUsedInItem(response: Contracts.IUsedInItemContract): IUsedInItemRecord<TClientTypes> {\r\n        return {\r\n            system: {\r\n                id: response.system.id,\r\n                name: response.system.name,\r\n                codename: response.system.codename,\r\n                language: response.system.language,\r\n                type: response.system.type,\r\n                collection: response.system.collection,\r\n                workflow: response.system.workflow,\r\n                workflowStep: response.system.workflow_step,\r\n                lastModified: response.system.last_modified\r\n            }\r\n        };\r\n    }\r\n}\r\n","import { IResponse } from '@kontent-ai/core-sdk';\r\n\r\nexport interface IDeliveryNetworkResponse<TData, TContract> {\r\n    data: TData;\r\n    response: IResponse<TContract>;\r\n    xContinuationToken?: string;\r\n    hasStaleContent: boolean;\r\n}\r\n\r\nexport interface IGroupedNetworkResponse<TData> {\r\n    data: TData;\r\n    responses: IDeliveryNetworkResponse<any, any>[];\r\n}\r\n","import { IHeader, IHttpCancelRequestToken, IQueryParameter } from '@kontent-ai/core-sdk';\r\nimport { IDeliveryNetworkResponse } from './base-responses';\r\nimport { IPagination } from './pagination.class';\r\n\r\nexport type LinkedItemsReferenceHandler = 'map' | 'ignore';\r\n\r\nexport interface IProxyUrlData {\r\n    action: string;\r\n    domain: string;\r\n    queryParameters: IQueryParameter[];\r\n    queryString: string;\r\n    queryConfig: IQueryConfig;\r\n    environmentId: string;\r\n}\r\n\r\nexport interface ISDKInfo {\r\n    /**\r\n     * Name of SDK\r\n     */\r\n    name: string;\r\n    /**\r\n     * Version SDK\r\n     */\r\n    version: string;\r\n    /**\r\n     * Host of SDK\r\n     */\r\n    host: string;\r\n}\r\n\r\nexport interface IKontentResponse {}\r\n\r\nexport interface IKontentListWithHeaderResponse extends IKontentResponse {\r\n    items: any[];\r\n}\r\n\r\nexport interface IKontentListResponse extends IKontentResponse {\r\n    pagination?: IPagination;\r\n    items: any[];\r\n}\r\n\r\nexport interface IKontentListAllResponse extends IKontentResponse {\r\n    responses: any[];\r\n    items: any[];\r\n}\r\n\r\nexport interface IListAllQueryConfig<TResponse extends IKontentListResponse, TContract> {\r\n    /**\r\n     * Number of pages to get. If not set, all available pages are fetched.\r\n     */\r\n    pages?: number;\r\n\r\n    /**\r\n     * Delay between each HTTP requests\r\n     */\r\n    delayBetweenRequests?: number;\r\n\r\n    /**\r\n     * Executed when a list response is loaded\r\n     */\r\n    responseFetched?: (\r\n        response: IDeliveryNetworkResponse<TResponse, TContract>,\r\n        nextPageUrl?: string,\r\n        continuationToken?: string\r\n    ) => void;\r\n}\r\n\r\nexport interface IQueryConfig {\r\n    /**\r\n     * Indicates if query should use preview mode. Overrides default configuration\r\n     */\r\n    usePreviewMode?: boolean;\r\n\r\n    /**\r\n     * Indicates if query should use secured delivery API mode.  Overrides default configuration\r\n     */\r\n    useSecuredMode?: boolean;\r\n\r\n    /**\r\n     * If the requested content has changed since the last request, the header determines whether\r\n     * to wait while fetching content. This can be useful when retrieving changed content\r\n     * in reaction to a webhook call. By default, when the header is not set, the API\r\n     * serves old content (if cached by the CDN) while it's fetching the new content\r\n     * to minimize wait time.\r\n     */\r\n    waitForLoadingNewContent?: boolean;\r\n\r\n    /**\r\n     * Extra headers added to request\r\n     */\r\n    customHeaders?: IHeader[];\r\n\r\n    /**\r\n     * Cancel token\r\n     */\r\n    cancelToken?: IHttpCancelRequestToken<any>;\r\n}\r\n\r\nexport interface IDeliveryErrorRaw {\r\n    message: string;\r\n    request_id: string | null;\r\n    error_code: number;\r\n    specific_code: number;\r\n}\r\n\r\nexport class DeliveryError {\r\n    public message: string;\r\n    public requestId: string | null;\r\n    public errorCode: number;\r\n    public specificCode: number;\r\n\r\n    constructor(data: { message: string; requestId: string | null; errorCode: number; specificCode: number }) {\r\n        this.message = data.message;\r\n        this.requestId = data.requestId;\r\n        this.errorCode = data.errorCode;\r\n        this.specificCode = data.specificCode;\r\n    }\r\n}\r\n","import { IQueryParameter } from '@kontent-ai/core-sdk';\r\n\r\nexport namespace Filters {\r\n    const valueSeparator: string = ',';\r\n    const defaultValue: string = '';\r\n\r\n    const getParamValueForSystemFilter = (param: string | string[]): string | undefined => {\r\n        if (!param) {\r\n            return defaultValue;\r\n        }\r\n\r\n        if (Array.isArray(param)) {\r\n            let value = '';\r\n            // use [in] filter\r\n            for (let i = 0; i < param.length; i++) {\r\n                value = value + param[i].toString();\r\n\r\n                if (i !== param.length - 1) {\r\n                    // append separator if its not last item\r\n                    value = value + valueSeparator;\r\n                }\r\n            }\r\n\r\n            return value;\r\n        }\r\n\r\n        // single param was given\r\n        return param.toString();\r\n    };\r\n\r\n    export class TypeFilter implements IQueryParameter {\r\n        constructor(public type: string | string[]) {}\r\n\r\n        getParam(): string {\r\n            if (Array.isArray(this.type)) {\r\n                // multiple types\r\n                return `system.type[in]=${getParamValueForSystemFilter(this.type)}`;\r\n            }\r\n\r\n            // single type\r\n            return `system.type=${getParamValueForSystemFilter(this.type)}`;\r\n        }\r\n    }\r\n\r\n    export class CollectionFilter implements IQueryParameter {\r\n        constructor(public collection: string | string[]) {}\r\n\r\n        getParam(): string {\r\n            if (Array.isArray(this.collection)) {\r\n                // multiple collections\r\n                return `system.collection[in]=${getParamValueForSystemFilter(this.collection)}`;\r\n            }\r\n\r\n            // single collection\r\n            return `system.collection=${getParamValueForSystemFilter(this.collection)}`;\r\n        }\r\n    }\r\n\r\n    export class EmptyFilter implements IQueryParameter {\r\n        constructor(public element: string) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[empty]`;\r\n        }\r\n    }\r\n\r\n    export class NotEmptyFilter implements IQueryParameter {\r\n        constructor(public element: string) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[nempty]`;\r\n        }\r\n    }\r\n\r\n    export class EqualsFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[eq]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class NotEqualsFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[neq]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class AllFilter implements IQueryParameter {\r\n        constructor(public element: string, public values: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[all]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.values || !Array.isArray(this.values)) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.values.map((m) => m.trim()).join(',');\r\n        }\r\n    }\r\n\r\n    export class AnyFilter implements IQueryParameter {\r\n        constructor(public element: string, public values: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[any]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.values || !Array.isArray(this.values)) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.values.map((m) => m.trim()).join(',');\r\n        }\r\n    }\r\n\r\n    export class ContainsFilter implements IQueryParameter {\r\n        constructor(public element: string, public values: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[contains]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.values || !Array.isArray(this.values)) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.values.map((m) => m.trim()).join(',');\r\n        }\r\n    }\r\n\r\n    export class GreaterThanFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string | number) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[gt]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | number | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class GreaterThanOrEqualFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string | number) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[gte]=${this.getParamValue()}`;\r\n        }\r\n\r\n        getParamValue(): string | number | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class InFilter implements IQueryParameter {\r\n        constructor(public element: string, public values: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[in]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.values || !Array.isArray(this.values)) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.values\r\n                .map((m) => {\r\n                    return m.trim();\r\n                })\r\n                .join(',');\r\n        }\r\n    }\r\n\r\n    export class NotInFilter implements IQueryParameter {\r\n        constructor(public element: string, public values: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[nin]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.values || !Array.isArray(this.values)) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.values\r\n                .map((m) => {\r\n                    return m.trim();\r\n                })\r\n                .join(',');\r\n        }\r\n    }\r\n\r\n    export class LessThanFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string | number) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[lt]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | number | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class LessThanOrEqualFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string | number) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[lte]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | number | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class RangeFilter implements IQueryParameter {\r\n        constructor(public element: string, public lowerValue: number | string, public higherValue: number | string) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[range]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | number | undefined {\r\n            let lowerVal = defaultValue;\r\n            let higherVal = defaultValue;\r\n\r\n            if (this.lowerValue) {\r\n                lowerVal = this.lowerValue.toString();\r\n            }\r\n\r\n            if (this.higherValue) {\r\n                higherVal = this.higherValue.toString();\r\n            }\r\n\r\n            return `${lowerVal},${higherVal}`;\r\n        }\r\n    }\r\n}\r\n","export const continuationTokenHeaderName: string = 'X-Continuation';\r\nexport const waitForLoadingNewContentHeader: string = 'X-KC-Wait-For-Loading-New-Content';\r\nexport const sdkVersionHeader: string = 'X-KC-SDKID';\r\nexport const staleContentHeaderName: string = 'X-Stale-Content';\r\n\r\n","export * from './filters';\r\nexport * from './pagination.class';\r\nexport * from './parameters';\r\nexport * from './sort-order';\r\nexport * from './common-models';\r\nexport * from './base-responses';\r\nexport * from './headers';\r\n","export interface IPagination {\r\n    skip: number;\r\n    limit: number;\r\n    count: number;\r\n    nextPage: string;\r\n    totalCount: number | null;\r\n}\r\n","import { IQueryParameter } from '@kontent-ai/core-sdk';\r\n\r\nimport { SortOrder } from './sort-order';\r\n\r\nexport namespace Parameters {\r\n    const defaultValue: string = '';\r\n\r\n    export class QueryParameter implements IQueryParameter {\r\n        /**\r\n         * Parameter\r\n         * @constructor\r\n         * @param {string} name - Name of the parameter\r\n         * @param {string} value - Value of the parameter\r\n         */\r\n        constructor(public name: string, public value: string) {\r\n            if (!name) {\r\n                throw Error(`Name of the parameter is not specified`);\r\n            }\r\n        }\r\n\r\n        getParam(): string {\r\n            return `${this.name}=${this.value}`;\r\n        }\r\n    }\r\n\r\n    export class ElementsParameter implements IQueryParameter {\r\n        /**\r\n         * Sets elements (projection) so that only certain elements from a content item are returned\r\n         * @constructor\r\n         * @param {string[]} elementCodenames - Array of element codenames to include in response.\r\n         */\r\n        constructor(public elementCodenames: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `elements=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.elementCodenames) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.elementCodenames\r\n                .map((m) => {\r\n                    if (!m) {\r\n                        throw Error(`Codename of 'ElementsParameter' cannot be null or empty`);\r\n                    }\r\n                    return m.trim();\r\n                })\r\n                .join(',');\r\n        }\r\n    }\r\n\r\n    export class ExcludeElementsParameter implements IQueryParameter {\r\n        /**\r\n         * Sets elements (projection) so that only certain elements are excluded from API response\r\n         * @constructor\r\n         * @param {string[]} elementCodenames - Array of element codenames to exclude from API response.\r\n         */\r\n        constructor(public elementCodenames: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `excludeElements=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.elementCodenames) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.elementCodenames\r\n                .map((m) => {\r\n                    if (!m) {\r\n                        throw Error(`Codename of 'ExcludeElementsParameter' cannot be null or empty`);\r\n                    }\r\n                    return m.trim();\r\n                })\r\n                .join(',');\r\n        }\r\n    }\r\n\r\n    export class LimitParameter implements IQueryParameter {\r\n        /**\r\n         * Limits the number of items that are returned from response\r\n         * @constructor\r\n         * @param {number} limit - Number of elements that will be returned\r\n         */\r\n        constructor(public limit: number) {\r\n            if (limit <= 0) {\r\n                throw Error(`'LimitParameter' must specify a positive integer`);\r\n            }\r\n        }\r\n\r\n        getParam(): string {\r\n            return `limit=${this.limit}`;\r\n        }\r\n    }\r\n\r\n    export class IncludeTotalCountParameter implements IQueryParameter {\r\n        /**\r\n         * Adds 'includeTotalCount' query parameter to query\r\n         * @constructor\r\n         */\r\n        constructor() {}\r\n\r\n        getParam(): string {\r\n            return `includeTotalCount=true`;\r\n        }\r\n    }\r\n\r\n    export class SkipParameter implements IQueryParameter {\r\n        /**\r\n         * Configures response to skip certain number of items\r\n         * @constructor\r\n         * @param {number} skip - Number of content items that will be skipped\r\n         */\r\n        constructor(public skip: number) {\r\n            if (skip < 0) {\r\n                throw Error(`'SkipParameter' must specify a positive integer number or zero.\"`);\r\n            }\r\n        }\r\n\r\n        getParam(): string {\r\n            return `skip=${this.skip}`;\r\n        }\r\n    }\r\n\r\n    export class OrderParameter implements IQueryParameter {\r\n        /**\r\n         * Sorts the response based on given element.\r\n         * @constructor\r\n         * @param {string} element - Element that will be used for sorting (can be both elements.<elementname> or system.<elementname>)\r\n         * @param {SortOrder} sortOrder - Order type (desc/asc). Defaults to 'asc' if SortOrder is null or invalid.\r\n         */\r\n        constructor(public element: string, public sortOrder: SortOrder) {\r\n            if (!element) {\r\n                throw Error(`Element specified in 'OrderParameter' is null or empty`);\r\n            }\r\n        }\r\n\r\n        getParam(): string {\r\n            return `order=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            return `${this.element.trim()}[${this.sortOrder}]`;\r\n        }\r\n    }\r\n\r\n    export class CustomParameter implements IQueryParameter {\r\n        constructor(public param: string) {}\r\n\r\n        getParam(): string {\r\n            return this.param;\r\n        }\r\n    }\r\n\r\n    export class DepthParameter implements IQueryParameter {\r\n        /**\r\n         * Configures the depth of the response. Content items might reference another 'linked items' using the Linked items element.\r\n         * Recursively, these linked items can reference another linked items.\r\n         * By default, only one level of linked content is returned.\r\n         * @constructor\r\n         * @param {number} depth - Depth fo the response\r\n         */\r\n        constructor(public depth: number) {\r\n            if (depth < 0) {\r\n                throw Error(`'DepthParameter' must specify a positive integer or zero`);\r\n            }\r\n        }\r\n\r\n        getParam(): string {\r\n            return `depth=${this.depth}`;\r\n        }\r\n    }\r\n\r\n    export class LanguageParameter implements IQueryParameter {\r\n        /**\r\n         * Specifies language version to fetch\r\n         * @constructor\r\n         * @param {string} languageCodename - Codename of the language\r\n         */\r\n        constructor(public languageCodename: string) {}\r\n\r\n        getParam(): string {\r\n            return `language=${this.languageCodename}`;\r\n        }\r\n    }\r\n}\r\n","export type SortOrder = 'asc' | 'desc';\r\n","import { IQueryConfig } from './common/common-models';\r\nimport { IGenericElement } from './element-models';\r\n\r\nexport interface IContentTypeSystemAttributes<TContentTypeCodename extends string> {\r\n    /**\r\n     * Id of the type\r\n     */\r\n    id: string;\r\n\r\n    /**\r\n     * Name of the type\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Codename of the type\r\n     */\r\n    codename: TContentTypeCodename;\r\n\r\n    /**\r\n     * Date of last modification\r\n     */\r\n    lastModified: Date;\r\n}\r\n\r\nexport interface IContentType<TContentTypeCodename extends string> {\r\n    /**\r\n     * Content type system attributes\r\n     */\r\n    system: IContentTypeSystemAttributes<TContentTypeCodename>;\r\n\r\n    /**\r\n     * Elements (elements) assigned to content type\r\n     */\r\n    elements: IGenericElement[];\r\n}\r\n\r\nexport interface IContentTypeQueryConfig extends IQueryConfig {\r\n    /**\r\n     * No dedicated properties required at this moment\r\n     */\r\n}\r\n","import { IQueryConfig } from './common/common-models';\r\n\r\nexport interface IElementQueryConfig extends IQueryConfig {\r\n    /**\r\n     * No dedicated properties required at this moment\r\n     */\r\n}\r\n\r\nexport interface IGenericElementOption {\r\n    /**\r\n     * Name of the option\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Value of the option\r\n     */\r\n    codename: string;\r\n}\r\n\r\nexport interface IGenericElement {\r\n    /**\r\n     * Indexer\r\n     */\r\n    [key: string]: any;\r\n\r\n    /**\r\n     * Codename of the element\r\n     */\r\n    codename?: string;\r\n\r\n    /**\r\n     * Type of the element\r\n     */\r\n    type: string;\r\n\r\n    /**\r\n     * Name of the element\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Taxonomy group in case the element is a taxonomy\r\n     */\r\n    taxonomyGroup?: string;\r\n\r\n    /**\r\n     * Array of options if the element has some\r\n     */\r\n    options: IGenericElementOption[];\r\n}\r\n","export * from './common';\r\nexport * from './element-models';\r\nexport * from './item-models';\r\nexport * from './taxonomy-models';\r\nexport * from './content-type-models';\r\nexport * from './language-models';\r\nexport * from './responses';\r\nexport * from './sync-models';\r\n\r\n","import { Contracts } from '../contracts';\r\nimport { ElementModels } from '../elements/element-models';\r\nimport { IQueryConfig } from './common/common-models';\r\n\r\nexport interface IMapElementsResult<\r\n    TContentItem extends IContentItem = IContentItem,\r\n    TLinkedItemType extends IContentItem = IContentItem\r\n> {\r\n    item: TContentItem;\r\n    processedItems: IContentItemsContainer<TLinkedItemType>;\r\n    preparedItems: IContentItemWithRawDataContainer;\r\n    processingStartedForCodenames: string[];\r\n}\r\n\r\nexport interface IContentItemSystemAttributes<\r\n    TTypeCodename extends string = string,\r\n    TLanguageCodenames extends string = string,\r\n    TCollectionCodenames extends string = string,\r\n    TWorkflowCodenames extends string = string,\r\n    TWorkflowStepCodenames extends string = string\r\n> {\r\n    /**\r\n     * Id of the item\r\n     */\r\n    id: string;\r\n\r\n    /**\r\n     * Name of the item\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Codename of the item\r\n     */\r\n    codename: string;\r\n\r\n    /**\r\n     * Codename of the type this item is using\r\n     */\r\n    type: TTypeCodename;\r\n\r\n    /**\r\n     * Date when the item was last modified\r\n     */\r\n    lastModified: string;\r\n\r\n    /**\r\n     * Codename of the language\r\n     */\r\n    language: TLanguageCodenames;\r\n\r\n    /**\r\n     * Array of sitemap locations (obsolete)\r\n     */\r\n    sitemapLocations: string[];\r\n\r\n    /**\r\n     * Codename of the collection this item belongs to\r\n     */\r\n    collection: TCollectionCodenames;\r\n\r\n    /**\r\n     * Workflow step of the item\r\n     */\r\n    workflowStep: TWorkflowStepCodenames | null;\r\n\r\n    /**\r\n     * Workflow of the item\r\n     */\r\n    workflow: TWorkflowCodenames | null;\r\n}\r\n\r\n/**\r\n * Indexer for elements within content item\r\n */\r\nexport type ContentItemElementsIndexer<TElement extends ElementModels.IElement<any> = ElementModels.IElement<any>> =\r\n    TElement;\r\n\r\nexport type ContentItemType = 'component' | 'linkedItem';\r\n\r\n/**\r\n * Prefix with I to keep the name consistent and prevent releasing major version\r\n */\r\nexport type IContentItemElements<TElementCodenames extends string = string> = Record<\r\n    TElementCodenames,\r\n    ContentItemElementsIndexer\r\n>;\r\n\r\nexport type Snippet<\r\n    TElementCodenames extends string,\r\n    TElements extends IContentItemElements<TElementCodenames>\r\n> = TElements;\r\n\r\nexport interface IContentItem<\r\n    TElements extends IContentItemElements<TTypeElementCodenames> = IContentItemElements,\r\n    TTypeCodename extends string = string,\r\n    TLanguageCodenames extends string = string,\r\n    TCollectionCodenames extends string = string,\r\n    TWorkflowCodenames extends string = string,\r\n    TWorkflowStepCodenames extends string = string,\r\n    TTypeElementCodenames extends string = string\r\n> {\r\n    /**\r\n     * Elements of the content item\r\n     */\r\n    elements: TElements;\r\n\r\n    /**\r\n     * System data of the content item\r\n     */\r\n    system: IContentItemSystemAttributes<\r\n        TTypeCodename,\r\n        TLanguageCodenames,\r\n        TCollectionCodenames,\r\n        TWorkflowCodenames,\r\n        TWorkflowStepCodenames\r\n    >;\r\n}\r\n\r\nexport interface ILink {\r\n    /**\r\n     * Id of the link\r\n     */\r\n    linkId: string;\r\n\r\n    /**\r\n     * Codename of the content item\r\n     */\r\n    codename: string;\r\n\r\n    /**\r\n     * Type codename of the content item\r\n     */\r\n    type: string;\r\n\r\n    /**\r\n     * Url slug defined for the content item\r\n     */\r\n    urlSlug: string;\r\n}\r\n\r\nexport interface IContentItemWithRawElements {\r\n    item: IContentItem;\r\n    rawItem: Contracts.IContentItemContract;\r\n}\r\n\r\nexport interface IContentItemWithRawDataContainer {\r\n    [key: string]: IContentItemWithRawElements;\r\n}\r\n\r\nexport interface IContentItemsContainer<TContentItem extends IContentItem> {\r\n    [key: string]: TContentItem | undefined;\r\n}\r\n\r\nexport interface IRichTextImage {\r\n    imageId: string;\r\n    url: string;\r\n    description: string | null;\r\n    width: number | null;\r\n    height: number | null;\r\n}\r\n\r\nexport interface IItemQueryConfig extends IQueryConfig {}\r\n\r\nexport interface IItemFeedQueryConfig extends IQueryConfig {\r\n    disableItemLinking?: boolean;\r\n}\r\n\r\nexport interface IUsedInItemRecord<TClientTypes extends ClientTypes> {\r\n    readonly system: {\r\n        readonly id: string;\r\n        readonly name: string;\r\n        readonly codename: string;\r\n        readonly language: TClientTypes['languageCodenames'];\r\n        readonly type: TClientTypes['contentTypeCodenames'];\r\n        readonly collection: TClientTypes['collectionCodenames'];\r\n        readonly workflow: TClientTypes['workflowCodenames'];\r\n        readonly workflowStep: TClientTypes['workflowStepCodenames'];\r\n        readonly lastModified: string;\r\n    };\r\n}\r\n\r\nexport type ClientTypes = {\r\n    readonly contentItemType: IContentItem;\r\n    readonly contentTypeCodenames: string;\r\n    readonly workflowCodenames: string;\r\n    readonly workflowStepCodenames: string;\r\n    readonly collectionCodenames: string;\r\n    readonly taxonomyCodenames: string;\r\n    readonly languageCodenames: string;\r\n    readonly elementCodenames: string;\r\n};\r\n","import { IQueryConfig } from './common';\r\n\r\nexport interface ILanguageSystem<TLanguageCodenames extends string> {\r\n    id: string;\r\n    name: string;\r\n    codename: TLanguageCodenames;\r\n}\r\n\r\nexport interface ILanguage<TLanguageCodenames extends string> {\r\n    system: ILanguageSystem<TLanguageCodenames>;\r\n}\r\n\r\nexport interface ILanguagesQueryConfig extends IQueryConfig {\r\n    /**\r\n     * No dedicated properties required at this moment\r\n     */\r\n}\r\n","import { Contracts } from '../contracts';\r\nimport { IDeliveryNetworkResponse } from './common/base-responses';\r\nimport { IKontentListAllResponse, IKontentListResponse, IKontentResponse } from './common/common-models';\r\nimport { IPagination } from './common/pagination.class';\r\nimport { IContentType } from './content-type-models';\r\nimport { IGenericElementOption } from './element-models';\r\nimport { IContentItem, IContentItemsContainer, IUsedInItemRecord } from './item-models';\r\nimport { ILanguage } from './language-models';\r\nimport { IContentItemDelta } from './sync-models';\r\nimport { ITaxonomyGroup } from './taxonomy-models';\r\nimport { ClientTypes } from './item-models';\r\n\r\nexport namespace Responses {\r\n    export interface IListContentTypesResponse<TContentTypeCodename extends string> extends IKontentListResponse {\r\n        items: IContentType<TContentTypeCodename>[];\r\n        pagination: IPagination;\r\n    }\r\n\r\n    export interface IListContentTypesAllResponse<TContentTypeCodename extends string> extends IKontentListAllResponse {\r\n        items: IContentType<TContentTypeCodename>[];\r\n        responses: IDeliveryNetworkResponse<\r\n            IListContentTypesResponse<TContentTypeCodename>,\r\n            Contracts.IListContentTypeContract\r\n        >[];\r\n    }\r\n\r\n    export interface IViewContentTypeResponse<TContentTypeCodename extends string> extends IKontentResponse {\r\n        type: IContentType<TContentTypeCodename>;\r\n    }\r\n\r\n    export interface IViewContentTypeElementResponse extends IKontentResponse {\r\n        codename?: string;\r\n        type: string;\r\n        name: string;\r\n        taxonomyGroup?: string;\r\n        options: IGenericElementOption[];\r\n    }\r\n\r\n    export interface IUsedInResponse<TClientTypes extends ClientTypes> extends IKontentListResponse {\r\n        items: IUsedInItemRecord<TClientTypes>[];\r\n    }\r\n\r\n    export interface IUsedInAllResponse<TClientTypes extends ClientTypes> extends IKontentListAllResponse {\r\n        items: IUsedInItemRecord<TClientTypes>[];\r\n        responses: IDeliveryNetworkResponse<IUsedInResponse<TClientTypes>, Contracts.IUsedInItemsContract>[];\r\n    }\r\n\r\n    export interface IListItemsFeedResponse<\r\n        TContentItem extends IContentItem = IContentItem,\r\n        TLinkedItemType extends IContentItem = IContentItem\r\n    > extends IKontentListResponse {\r\n        items: TContentItem[];\r\n        linkedItems: IContentItemsContainer<TLinkedItemType>;\r\n    }\r\n\r\n    export interface IListItemsFeedAllResponse<\r\n        TContentItem extends IContentItem = IContentItem,\r\n        TLinkedItemType extends IContentItem = IContentItem\r\n    > extends IKontentListAllResponse {\r\n        items: TContentItem[];\r\n        responses: IDeliveryNetworkResponse<\r\n            IListItemsFeedResponse<TContentItem, TLinkedItemType>,\r\n            Contracts.IItemsFeedContract\r\n        >[];\r\n    }\r\n\r\n    export interface IListContentItemsResponse<\r\n        TContentItem extends IContentItem = IContentItem,\r\n        TLinkedItemType extends IContentItem = IContentItem\r\n    > extends IKontentListResponse {\r\n        items: TContentItem[];\r\n        pagination: IPagination;\r\n        linkedItems: IContentItemsContainer<TLinkedItemType>;\r\n    }\r\n\r\n    export interface IListContentItemsAllResponse<\r\n        TContentItem extends IContentItem = IContentItem,\r\n        TLinkedItemType extends IContentItem = IContentItem\r\n    > extends IKontentListAllResponse {\r\n        items: TContentItem[];\r\n        responses: IDeliveryNetworkResponse<\r\n            IListContentItemsResponse<TContentItem, TLinkedItemType>,\r\n            Contracts.IListContentItemsContract\r\n        >[];\r\n    }\r\n\r\n    export interface IViewContentItemResponse<\r\n        TContentItem extends IContentItem = IContentItem,\r\n        TLinkedItemType extends IContentItem = IContentItem\r\n    > extends IKontentResponse {\r\n        item: TContentItem;\r\n        linkedItems: IContentItemsContainer<TLinkedItemType>;\r\n    }\r\n\r\n    export interface IInitializeSyncResponse extends IKontentResponse {\r\n        items: IContentItemDelta[];\r\n    }\r\n\r\n    export interface ISyncChangesResponse extends IKontentResponse {\r\n        items: IContentItemDelta[];\r\n    }\r\n\r\n    export interface ISyncChangesAllResponse extends IKontentListAllResponse {\r\n        items: IContentItemDelta[];\r\n        responses: IDeliveryNetworkResponse<ISyncChangesResponse, Contracts.ISyncChangesContract>[];\r\n    }\r\n\r\n    export interface IListLanguagesResponse<TLanguageCodenames extends string> extends IKontentListResponse {\r\n        items: ILanguage<TLanguageCodenames>[];\r\n        pagination: IPagination;\r\n    }\r\n\r\n    export interface IListLanguagesAllResponse<TLanguageCodenames extends string> extends IKontentListAllResponse {\r\n        items: ILanguage<TLanguageCodenames>[];\r\n        responses: IDeliveryNetworkResponse<\r\n            IListLanguagesResponse<TLanguageCodenames>,\r\n            Contracts.IListLanguagesContract\r\n        >[];\r\n    }\r\n\r\n    export interface IViewTaxonomyResponse<TaxonomyCodename extends string> extends IKontentResponse {\r\n        taxonomy: ITaxonomyGroup<TaxonomyCodename>;\r\n    }\r\n\r\n    export interface IListTaxonomiesResponse<TaxonomyCodename extends string> extends IKontentListResponse {\r\n        items: ITaxonomyGroup<TaxonomyCodename>[];\r\n        pagination: IPagination;\r\n    }\r\n\r\n    export interface IListTaxonomiesAllResponse<TaxonomyCodename extends string> extends IKontentListAllResponse {\r\n        items: ITaxonomyGroup<TaxonomyCodename>[];\r\n        responses: IDeliveryNetworkResponse<\r\n            IListTaxonomiesResponse<TaxonomyCodename>,\r\n            Contracts.IListTaxonomyGroupsContract\r\n        >[];\r\n    }\r\n}\r\n","import { Contracts } from '../contracts';\r\nimport { IQueryConfig } from './common/common-models';\r\nimport { IContentItemSystemAttributes } from './item-models';\r\n\r\nexport interface ISyncInitQueryConfig extends IQueryConfig {\r\n    /**\r\n     * No dedicated properties required at this moment\r\n     */\r\n}\r\n\r\nexport interface IContentItemDelta {\r\n    data: {\r\n        system: IContentItemSystemAttributes;\r\n        elements: Contracts.IContentItemElementsContracts;\r\n    };\r\n    changeType: 'deleted_item' | 'changed_item';\r\n    timestamp: string;\r\n}\r\n","import { IQueryConfig } from './common/common-models';\r\n\r\nexport interface ITaxonomyGroup<TaxonomyCodename extends string> {\r\n    system: ITaxonomySystemAttributes<TaxonomyCodename>;\r\n    terms: ITaxonomyTerms[];\r\n}\r\n\r\nexport interface ITaxonomySystemAttributes<TaxonomyCodename extends string> {\r\n    id: string;\r\n    name: string;\r\n    codename: TaxonomyCodename;\r\n    lastModified: Date;\r\n}\r\n\r\nexport interface ITaxonomyTerms {\r\n    name: string;\r\n    codename: string;\r\n    terms: ITaxonomyTerms[];\r\n}\r\n\r\nexport interface ITaxonomyQueryConfig extends IQueryConfig {\r\n    /**\r\n     * No dedicated properties required at this moment\r\n     */\r\n}\r\n","import { ElementType, Elements } from '../../elements';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    ClientTypes,\r\n    Filters,\r\n    IContentItem,\r\n    IKontentListAllResponse,\r\n    IKontentListResponse,\r\n    IQueryConfig,\r\n    Parameters,\r\n    SortOrder\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseListingQuery } from './base-listing-query.class';\r\n\r\nexport abstract class BaseItemListingQuery<\r\n    TClientTypes extends ClientTypes,\r\n    TResponse extends IKontentListResponse,\r\n    TAllResponse extends IKontentListAllResponse,\r\n    TQueryConfig extends IQueryConfig,\r\n    TContract\r\n> extends BaseListingQuery<TClientTypes, IContentItem, TResponse, TAllResponse, TQueryConfig, TContract> {\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Empty filter condition\r\n     * @param element Element with empty value\r\n     */\r\n    emptyFilter(element: string): this {\r\n        this.parameters.push(new Filters.EmptyFilter(element));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not empty filter condition\r\n     * @param element Element with non-empty value\r\n     */\r\n    notEmptyFilter(element: string): this {\r\n        this.parameters.push(new Filters.NotEmptyFilter(element));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Equals filter condition\r\n     * @param element Element to filter. Example: 'elements.movie'\r\n     * @param value Value to match. Example: 'Kingsman'\r\n     */\r\n    equalsFilter(element: string, value: string): this {\r\n        this.parameters.push(new Filters.EqualsFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not equals filter condition\r\n     * @param element Element to filter. Example: 'elements.movie'\r\n     * @param value Value to match. Example: 'Kingsman'\r\n     */\r\n    notEqualsFilter(element: string, value: string): this {\r\n        this.parameters.push(new Filters.NotEqualsFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * All filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    allFilter(element: string, values: string[]): this {\r\n        this.parameters.push(new Filters.AllFilter(element, values));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Any filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    anyFilter(element: string, values: string[]): this {\r\n        this.parameters.push(new Filters.AnyFilter(element, values));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Contains filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    containsFilter(element: string, values: string[]): this {\r\n        this.parameters.push(new Filters.ContainsFilter(element, values));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Greater then filter\r\n     * @param element Element to filter.\r\n     * @param value Value\r\n     */\r\n    greaterThanFilter(element: string, value: string | number): this {\r\n        this.parameters.push(new Filters.GreaterThanFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Greater then or equals filter\r\n     * @param element Element to filter.\r\n     * @param value Value\r\n     */\r\n    greaterThanOrEqualFilter(element: string, value: string | number): this {\r\n        this.parameters.push(new Filters.GreaterThanOrEqualFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * In filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    inFilter(element: string, values: string[]): this {\r\n        this.parameters.push(new Filters.InFilter(element, values));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not in filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    notInFilter(element: string, values: string[]): this {\r\n        this.parameters.push(new Filters.NotInFilter(element, values));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Less then filter\r\n     * @param element Element to filter.\r\n     * @param value Value\r\n     */\r\n    lessThanFilter(element: string, value: string | number): this {\r\n        this.parameters.push(new Filters.LessThanFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param element Element to filter.\r\n     * @param value Value\r\n     */\r\n    lessThanOrEqualFilter(element: string, value: string | number): this {\r\n        this.parameters.push(new Filters.LessThanOrEqualFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param element Element to filter.\r\n     * @param lowerValue Lower value of range (e.g. 2)\r\n     * @param higherValue Higher value of range (e.g. 10)\r\n     */\r\n    rangeFilter(element: string, lowerValue: number | string, higherValue: number | string): this {\r\n        this.parameters.push(new Filters.RangeFilter(element, lowerValue, higherValue));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Limits the number of items returned by query\r\n     * @param limit Number of items to load\r\n     */\r\n    limitParameter(limit: number): this {\r\n        this.parameters.push(new Parameters.LimitParameter(limit));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Orders query based on given element and sort order\r\n     * @param element Element by which to order\r\n     * @param sortOrder Asc/Desc order type\r\n     */\r\n    orderParameter(element: string, sortOrder: SortOrder): this {\r\n        this.parameters.push(new Parameters.OrderParameter(element, sortOrder));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets descending order on given element\r\n     * @param element Element by which to order\r\n     */\r\n    orderByDescending(element: string): this {\r\n        this.parameters.push(new Parameters.OrderParameter(element, 'desc'));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets Ascending order on given element\r\n     * @param element Element by which to order\r\n     */\r\n    orderByAscending(element: string): this {\r\n        this.parameters.push(new Parameters.OrderParameter(element, 'asc'));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Skips the selected number of items\r\n     * @param skip Number of items to skip\r\n     */\r\n    skipParameter(skip: number): this {\r\n        this.parameters.push(new Parameters.SkipParameter(skip));\r\n        return this;\r\n    }\r\n\r\n    protected linkItemsInRte(allContentItems: IContentItem[]): void {\r\n        for (const item of allContentItems) {\r\n            for (const elementKey of Object.keys(item.elements)) {\r\n                const element = item.elements[elementKey];\r\n\r\n                if (element.type === ElementType.ModularContent) {\r\n                    const linkedItemElement = element as Elements.LinkedItemsElement;\r\n\r\n                    // We create separate array for ordered items because the 'linkedItems' from response might be incomplete\r\n                    // e.g. If 4 items are linked, only 2 might be available in the response. Rest needs to be mapped from all available items\r\n                    const orderedLinkedItems: IContentItem[] = [];\r\n\r\n                    for (const linkedItemCodename of linkedItemElement.value) {\r\n                        let linkedItem: IContentItem | undefined;\r\n\r\n                        const linkedItemInElement = linkedItemElement.linkedItems.find(\r\n                            (m) => m.system.codename.toLowerCase() === linkedItemCodename.toLowerCase()\r\n                        );\r\n                        if (linkedItemInElement) {\r\n                            linkedItem = linkedItemInElement;\r\n                        } else {\r\n                            linkedItem = allContentItems.find(\r\n                                (m) => m.system.codename.toLowerCase() === linkedItemCodename.toLowerCase()\r\n                            );\r\n                        }\r\n\r\n                        if (linkedItem) {\r\n                            orderedLinkedItems.push(linkedItem);\r\n                        }\r\n                    }\r\n\r\n                    // Replace linked items with the ordered one\r\n                    linkedItemElement.linkedItems = orderedLinkedItems;\r\n                }\r\n\r\n                if (element.type === ElementType.RichText) {\r\n                    const orderedLinkedItems: IContentItem[] = [];\r\n\r\n                    const richTextElement = element as Elements.RichTextElement;\r\n\r\n                    for (const linkedItemCodename of richTextElement.linkedItemCodenames) {\r\n                        let linkedItem: IContentItem | undefined;\r\n\r\n                        const linkedItemInElement = richTextElement.linkedItems.find(\r\n                            (m) => m.system.codename.toLowerCase() === linkedItemCodename.toLowerCase()\r\n                        );\r\n                        if (linkedItemInElement) {\r\n                            linkedItem = linkedItemInElement;\r\n                        } else {\r\n                            linkedItem = allContentItems.find(\r\n                                (m) => m.system.codename.toLowerCase() === linkedItemCodename.toLowerCase()\r\n                            );\r\n                        }\r\n\r\n                        if (linkedItem) {\r\n                            orderedLinkedItems.push(linkedItem);\r\n                        }\r\n                    }\r\n\r\n                    richTextElement.linkedItems = orderedLinkedItems;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    continuationTokenHeaderName,\r\n    IGroupedNetworkResponse,\r\n    IKontentListAllResponse,\r\n    IKontentListResponse,\r\n    IDeliveryNetworkResponse,\r\n    IListAllQueryConfig,\r\n    IQueryConfig,\r\n    IContentItem,\r\n    ClientTypes,\r\n    IUsedInItemRecord,\r\n    IContentType,\r\n    ITaxonomyGroup,\r\n    IContentItemDelta,\r\n    ILanguage\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from './base-query.class';\r\n\r\ntype ListingRecord<TClientTypes extends ClientTypes> =\r\n    | IContentItem\r\n    | IContentItemDelta\r\n    | IUsedInItemRecord<TClientTypes>\r\n    | IContentType<TClientTypes['contentTypeCodenames']>\r\n    | ILanguage<TClientTypes['languageCodenames']>\r\n    | ITaxonomyGroup<TClientTypes['taxonomyCodenames']>;\r\n\r\nexport abstract class BaseListingQuery<\r\n    TClientTypes extends ClientTypes,\r\n    TRecord extends ListingRecord<TClientTypes>,\r\n    TResponse extends IKontentListResponse,\r\n    TAllResponse extends IKontentListAllResponse,\r\n    TQueryConfig extends IQueryConfig,\r\n    TContract\r\n> extends BaseQuery<TClientTypes, TResponse, TQueryConfig, TContract> {\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Sets continuation token header\r\n     */\r\n    withContinuationToken(token: string): this {\r\n        // remove previous continuation token if there is any\r\n        let queryHeaders = this._queryConfig.customHeaders ?? [];\r\n        queryHeaders = queryHeaders.filter((m) => m.header !== continuationTokenHeaderName);\r\n\r\n        this._queryConfig.customHeaders = queryHeaders;\r\n\r\n        this.withHeaders([\r\n            {\r\n                header: continuationTokenHeaderName,\r\n                value: token\r\n            }\r\n        ]);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Query to get all items. Uses paging data and may execute multiple HTTP requests depending on number of items\r\n     */\r\n    toAllPromise(\r\n        queryAllConfig?: IListAllQueryConfig<TResponse, TContract>\r\n    ): Promise<IGroupedNetworkResponse<TAllResponse>> {\r\n        return this.queryService.getListAllResponse<TResponse, TAllResponse, TContract>({\r\n            page: 1,\r\n            listQueryConfig: queryAllConfig,\r\n            allResponseFactory: (items, responses) => {\r\n                const response = this.allResponseFactory(items, responses);\r\n\r\n                return {\r\n                    data: response,\r\n                    responses: responses\r\n                };\r\n            },\r\n            getResponse: (nextPageUrl, continuationToken) => {\r\n                if (nextPageUrl) {\r\n                    this.withCustomUrl(nextPageUrl);\r\n                }\r\n                if (continuationToken) {\r\n                    this.withContinuationToken(continuationToken);\r\n                }\r\n\r\n                return this.toPromise();\r\n            }\r\n        });\r\n    }\r\n\r\n    protected abstract allResponseFactory(\r\n        items: TRecord[],\r\n        responses: IDeliveryNetworkResponse<TResponse, TContract>[]\r\n    ): TAllResponse;\r\n}\r\n","import { IHeader, IQueryParameter } from '@kontent-ai/core-sdk';\r\n\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    ClientTypes,\r\n    Filters,\r\n    IDeliveryNetworkResponse,\r\n    IKontentResponse,\r\n    IQueryConfig,\r\n    Parameters\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\n\r\nexport abstract class BaseQuery<\r\n    TClientTypes extends ClientTypes,\r\n    TResponse extends IKontentResponse,\r\n    TQueryConfig extends IQueryConfig,\r\n    TContract\r\n> {\r\n    protected parameters: IQueryParameter[] = [];\r\n    protected customUrl?: string;\r\n    protected abstract _queryConfig: TQueryConfig;\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {}\r\n\r\n    /**\r\n     * Gets URL of the query\r\n     */\r\n    abstract getUrl(): string;\r\n\r\n    /**\r\n     * Gets promise for query execution\r\n     */\r\n    abstract toPromise(): Promise<IDeliveryNetworkResponse<TResponse, TContract>>;\r\n\r\n    /**\r\n     * Maps json data to response\r\n     */\r\n    abstract map(json: any): TResponse;\r\n\r\n    /**\r\n     * Adds custom parameter to query\r\n     * @param name Name of parameter\r\n     * @param value Value of parameter\r\n     */\r\n    withCustomParameter(name: string, value: string): this {\r\n        this.parameters.push(new Parameters.QueryParameter(name, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds parameter to query\r\n     * @param name Name of parameter\r\n     * @param value Value of parameter\r\n     */\r\n    withParameter(parameter: IQueryParameter): this {\r\n        this.parameters.push(parameter);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds parameters to query\r\n     * @param parameters Array of parameters\r\n     */\r\n    withParameters(parameters: IQueryParameter[]): this {\r\n        this.parameters.push(...parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets headers used by this query\r\n     */\r\n    getHeaders(): IHeader[] {\r\n        return this.queryService.getHeaders(this._queryConfig, []);\r\n    }\r\n\r\n    /**\r\n     * Sets request headers\r\n     */\r\n    withHeaders(headers: IHeader[]): this {\r\n        const queryHeaders = this._queryConfig.customHeaders ?? [];\r\n        queryHeaders.push(...headers);\r\n        this._queryConfig.customHeaders = queryHeaders;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets request header\r\n     */\r\n    withHeader(header: IHeader): this {\r\n        const queryHeaders = this._queryConfig.customHeaders ?? [];\r\n        queryHeaders.push(header);\r\n        this._queryConfig.customHeaders = queryHeaders;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets custom URL of request (overrides default URL of the query)\r\n     */\r\n    withCustomUrl(url: string): this {\r\n        this.customUrl = url;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets all query parameter currently applied to query\r\n     */\r\n    getParameters(): IQueryParameter[] {\r\n        return this.parameters;\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: TQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    protected resolveUrlInternal(action: string): string {\r\n        // use custom URL if user specified it\r\n        if (this.customUrl) {\r\n            return this.customUrl;\r\n        }\r\n\r\n        // use original url\r\n        return this.queryService.getUrl(action, this._queryConfig ?? {}, this.getParameters());\r\n    }\r\n\r\n    protected processDefaultLanguageParameter(): void {\r\n        // add default language if none is specified && default language is specified globally\r\n        if (this.config.defaultLanguage) {\r\n            const languageParameter = this.getParameters().find((m) =>\r\n                m.getParam()?.toLowerCase().includes('language='.toLowerCase())\r\n            );\r\n            if (!languageParameter) {\r\n                // language parameter was not specified in query, use globally defined language\r\n                this.parameters.push(new Parameters.LanguageParameter(this.config.defaultLanguage));\r\n            }\r\n        }\r\n    }\r\n\r\n    protected processExcludeArchivedItemsParameter(): void {\r\n        if (this.config.excludeArchivedItems) {\r\n            this.parameters.push(new Filters.NotEqualsFilter('system.workflow_step', 'archived'));\r\n        }\r\n    }\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport { Responses, IElementQueryConfig, IDeliveryNetworkResponse, ClientTypes } from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from '../common/base-query.class';\r\n\r\nexport class ElementQuery<TClientTypes extends ClientTypes> extends BaseQuery<\r\n    TClientTypes,\r\n    Responses.IViewContentTypeElementResponse,\r\n    IElementQueryConfig,\r\n    Contracts.IViewContentTypeElementContract\r\n> {\r\n    protected _queryConfig: IElementQueryConfig = {};\r\n\r\n    constructor(\r\n        protected config: IDeliveryClientConfig,\r\n        protected queryService: QueryService<TClientTypes>,\r\n        private typeCodename: string,\r\n        private elementCodename: string\r\n    ) {\r\n        super(config, queryService);\r\n\r\n        if (!typeCodename) {\r\n            throw Error(`Codename of the type has to be provided`);\r\n        }\r\n\r\n        if (!elementCodename) {\r\n            throw Error(`Codename of the element has to be provided`);\r\n        }\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<Responses.IViewContentTypeElementResponse, Contracts.IViewContentTypeElementContract>\r\n    > {\r\n        return this.queryService.getElementAsync(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        return super.resolveUrlInternal(`/types/${this.typeCodename}/elements/${this.elementCodename}`);\r\n    }\r\n\r\n    map(json: any): Responses.IViewContentTypeElementResponse {\r\n        return this.queryService.mappingService.viewContentTypeElementResponse(json);\r\n    }\r\n}\r\n","export * from './common/base-query.class';\r\nexport * from './element/element-query.class';\r\nexport * from './item/multiple-items-query.class';\r\nexport * from './item/single-item-query.class';\r\nexport * from './taxonomy/taxonomies-query.class';\r\nexport * from './taxonomy/taxonomy-query.class';\r\nexport * from './type/multiple-type-query.class';\r\nexport * from './type/single-type-query.class';\r\nexport * from './items-feed/items-feed-query.class';\r\nexport * from './language/languages-query.class';\r\nexport * from './sync/initialize-sync-query.class';\r\nexport * from './sync/sync-changes-query.class';\r\nexport * from './used-in/used-in-query.class';\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    Filters,\r\n    IContentItem,\r\n    IItemQueryConfig,\r\n    IDeliveryNetworkResponse,\r\n    Responses,\r\n    Parameters,\r\n    ClientTypes\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseItemListingQuery } from '../common/base-item-listing-query.class';\r\n\r\nexport class MultipleItemsQuery<\r\n    TClientTypes extends ClientTypes,\r\n    TContentItem extends IContentItem = IContentItem\r\n> extends BaseItemListingQuery<\r\n    TClientTypes,\r\n    Responses.IListContentItemsResponse<TContentItem, TClientTypes['contentItemType']>,\r\n    Responses.IListContentItemsAllResponse<TContentItem, TClientTypes['contentItemType']>,\r\n    IItemQueryConfig,\r\n    Contracts.IListContentItemsContract\r\n> {\r\n    protected _queryConfig: IItemQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Adds information about the total number of content items matching your query.\r\n     * When set to true, the pagination object returned in the API response contains\r\n     * an additional total_count property.\r\n     */\r\n    includeTotalCountParameter(): this {\r\n        this.parameters.push(new Parameters.IncludeTotalCountParameter());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets only item of given type\r\n     * @param type Codename of type to get\r\n     */\r\n    type(type: TClientTypes['contentTypeCodenames']): this {\r\n        this.parameters.push(new Filters.TypeFilter(type));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets items of given types (logical or)\r\n     * I.e. get items of either 'Actor' or 'Movie' type\r\n     * @param types Types to get\r\n     */\r\n    types(types: TClientTypes['contentTypeCodenames'][]): this {\r\n        this.parameters.push(new Filters.TypeFilter(types));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets only item from given collection\r\n     * @param collection Codename of collection to get\r\n     */\r\n    collection(collection: TClientTypes['collectionCodenames']): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collection));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets items from given collections (logical or)\r\n     * I.e. get items of either 'default' or 'christmas-campaign' collection\r\n     * @param collections Collections to get\r\n     */\r\n    collections(collections: TClientTypes['collectionCodenames'][]): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collections));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Indicates depth of query that affects loading of nested linked items.\r\n     * @param depth Depth of the query (> 0)\r\n     */\r\n    depthParameter(depth: number): this {\r\n        this.parameters.push(new Parameters.DepthParameter(depth));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Language codename\r\n     * @param languageCodename Codename of the language\r\n     */\r\n    languageParameter(languageCodename: TClientTypes['languageCodenames']): this {\r\n        this.parameters.push(new Parameters.LanguageParameter(languageCodename));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to limit the number of elements returned by query.\r\n     * @param elementCodenames Array of element codenames to fetch\r\n     */\r\n    elementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this {\r\n        this.parameters.push(new Parameters.ElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to exclude elements returned by query.\r\n     * @param elementCodenames Array of element codenames to exclude\r\n     */\r\n    excludeElementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this {\r\n        this.parameters.push(new Parameters.ExcludeElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListContentItemsResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IListContentItemsContract\r\n        >\r\n    > {\r\n        return this.queryService.getMultipleItems(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/items';\r\n\r\n        // handle default language\r\n        this.processDefaultLanguageParameter();\r\n\r\n        // handle archived items\r\n        this.processExcludeArchivedItemsParameter();\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IListContentItemsResponse<TContentItem, TClientTypes['contentItemType']> {\r\n        return this.queryService.mappingService.listContentItemsResponse(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: any[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListContentItemsResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IListContentItemsContract\r\n        >[]\r\n    ): Responses.IListContentItemsAllResponse<TContentItem, TClientTypes['contentItemType']> {\r\n        this.linkItems(items, responses);\r\n\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n\r\n    private linkItems(\r\n        items: IContentItem[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListContentItemsResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IListContentItemsContract\r\n        >[]\r\n    ): void {\r\n        // prepare all available items (including components) for linking\r\n        const allContentItems: IContentItem[] = [];\r\n\r\n        // process linked items (modular_content part of the response)\r\n        for (const response of responses) {\r\n            allContentItems.push(\r\n                ...Object.values(response.data.linkedItems)\r\n                    .filter((m) => m !== undefined)\r\n                    .map((m) => m as TClientTypes['contentItemType'])\r\n            );\r\n        }\r\n\r\n        // add standard items\r\n        for (const item of items) {\r\n            if (!allContentItems.find((m) => m.system.codename.toLowerCase() === item.system.codename.toLowerCase())) {\r\n                allContentItems.push(item);\r\n            }\r\n        }\r\n        // process main items\r\n        this.linkItemsInRte(allContentItems);\r\n    }\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    IContentItem,\r\n    IItemQueryConfig,\r\n    IDeliveryNetworkResponse,\r\n    Responses,\r\n    Parameters,\r\n    ClientTypes\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from '../common/base-query.class';\r\n\r\nexport class SingleItemQuery<\r\n    TClientTypes extends ClientTypes,\r\n    TContentItem extends IContentItem = IContentItem\r\n> extends BaseQuery<\r\n    TClientTypes,\r\n    Responses.IViewContentItemResponse<TContentItem, TClientTypes['contentItemType']>,\r\n    IItemQueryConfig,\r\n    Contracts.IViewContentItemContract\r\n> {\r\n    protected _queryConfig: IItemQueryConfig = {};\r\n\r\n    constructor(\r\n        protected config: IDeliveryClientConfig,\r\n        protected queryService: QueryService<TClientTypes>,\r\n        private codename: string\r\n    ) {\r\n        super(config, queryService);\r\n\r\n        if (!codename) {\r\n            throw Error(`'codename' has to be configured for 'SingleItemQuery' query`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates depth of query that affects loading of nested linked items.\r\n     * @param depth Depth of the query (> 0)\r\n     */\r\n    depthParameter(depth: number): this {\r\n        this.parameters.push(new Parameters.DepthParameter(depth));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: IItemQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Language codename\r\n     * @param languageCodename Codename of the language\r\n     */\r\n    languageParameter(languageCodename: TClientTypes['languageCodenames']): this {\r\n        this.parameters.push(new Parameters.LanguageParameter(languageCodename));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to limit the number of elements returned by query.\r\n     * @param elementCodenames Array of element codenames to fetch\r\n     */\r\n    elementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this {\r\n        this.parameters.push(new Parameters.ElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to exclude elements returned by query.\r\n     * @param elementCodenames Array of element codenames to exclude\r\n     */\r\n    excludeElementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this {\r\n        this.parameters.push(new Parameters.ExcludeElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IViewContentItemResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IViewContentItemContract\r\n        >\r\n    > {\r\n        return this.queryService.getSingleItemAsync(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/items/' + this.codename;\r\n\r\n        // add default language is necessry\r\n        this.processDefaultLanguageParameter();\r\n\r\n        //process client level archived item exclusion\r\n        this.processExcludeArchivedItemsParameter();\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IViewContentItemResponse<TContentItem, TClientTypes['contentItemType']> {\r\n        return this.queryService.mappingService.viewContentItemResponse(json);\r\n    }\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    Filters,\r\n    IContentItem,\r\n    IDeliveryNetworkResponse,\r\n    Parameters,\r\n    Responses,\r\n    IItemFeedQueryConfig,\r\n    ClientTypes\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseItemListingQuery } from '../common/base-item-listing-query.class';\r\n\r\nexport class ItemsFeedQuery<\r\n    TClientTypes extends ClientTypes,\r\n    TContentItem extends IContentItem = IContentItem\r\n> extends BaseItemListingQuery<\r\n    TClientTypes,\r\n    Responses.IListItemsFeedResponse<TContentItem, TClientTypes['contentItemType']>,\r\n    Responses.IListItemsFeedAllResponse<TContentItem, TClientTypes['contentItemType']>,\r\n    IItemFeedQueryConfig,\r\n    Contracts.IItemsFeedContract\r\n> {\r\n    protected _queryConfig: IItemFeedQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets only item of given type\r\n     * @param type Codename of type to get\r\n     */\r\n    type(type: TClientTypes['contentTypeCodenames']): this {\r\n        this.parameters.push(new Filters.TypeFilter(type));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets items of given types (logical or)\r\n     * I.e. get items of either 'Actor' or 'Movie' type\r\n     * @param types Types to get\r\n     */\r\n    types(types: TClientTypes['contentTypeCodenames'][]): this {\r\n        this.parameters.push(new Filters.TypeFilter(types));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets only item from given collection\r\n     * @param collection Codename of collection to get\r\n     */\r\n    collection(collection: TClientTypes['collectionCodenames']): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collection));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets items from given collections (logical or)\r\n     * I.e. get items of either 'default' or 'christmas-campaign' collection\r\n     * @param collections Collections to get\r\n     */\r\n    collections(collections: TClientTypes['collectionCodenames'][]): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collections));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Language codename\r\n     * @param languageCodename Codename of the language\r\n     */\r\n    languageParameter(languageCodename: TClientTypes['languageCodenames']): this {\r\n        this.parameters.push(new Parameters.LanguageParameter(languageCodename));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to limit the number of elements returned by query.\r\n     * @param elementCodenames Array of element codenames to fetch\r\n     */\r\n    elementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this {\r\n        this.parameters.push(new Parameters.ElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to exclude elements returned by query.\r\n     * @param elementCodenames Array of element codenames to exclude\r\n     */\r\n    excludeElementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this {\r\n        this.parameters.push(new Parameters.ExcludeElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListItemsFeedResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IItemsFeedContract\r\n        >\r\n    > {\r\n        return this.queryService.getItemsFeed(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/items-feed';\r\n\r\n        // add default language is necessary\r\n        this.processDefaultLanguageParameter();\r\n\r\n        //process client level archived item exclusion\r\n        this.processExcludeArchivedItemsParameter();\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: IItemFeedQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    map(json: any): Responses.IListItemsFeedResponse<TContentItem, TClientTypes['contentItemType']> {\r\n        return this.queryService.mappingService.itemsFeedResponse(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: TContentItem[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListItemsFeedResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IItemsFeedContract\r\n        >[]\r\n    ): Responses.IListItemsFeedAllResponse<TContentItem, TClientTypes['contentItemType']> {\r\n        if (this.canLinkItems()) {\r\n            this.linkFeedItems(items, responses);\r\n        }\r\n\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n\r\n    private linkFeedItems(\r\n        items: TContentItem[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListItemsFeedResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IItemsFeedContract\r\n        >[]\r\n    ): void {\r\n        // prepare all available items (including components) for linking\r\n        const allAvailableContentItems: IContentItem[] = [];\r\n\r\n        // process linked items (modular_content part of the response)\r\n        for (const response of responses) {\r\n            allAvailableContentItems.push(\r\n                ...Object.values(response.data.linkedItems)\r\n                    .filter((m) => m !== undefined)\r\n                    .map((m) => m as TClientTypes['contentItemType'])\r\n            );\r\n        }\r\n\r\n        // add standard items\r\n        for (const item of items) {\r\n            if (\r\n                !allAvailableContentItems.find(\r\n                    (m) => m.system.codename.toLowerCase() === item.system.codename.toLowerCase()\r\n                )\r\n            ) {\r\n                allAvailableContentItems.push(item);\r\n            }\r\n        }\r\n        // process main items\r\n        this.linkItemsInRte(allAvailableContentItems);\r\n    }\r\n\r\n    private canLinkItems(): boolean {\r\n        if (this.config.linkedItemsReferenceHandler === 'ignore') {\r\n            return false;\r\n        }\r\n\r\n        if (this._queryConfig.disableItemLinking === true) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    ClientTypes,\r\n    IDeliveryNetworkResponse,\r\n    ILanguage,\r\n    ILanguagesQueryConfig,\r\n    Parameters,\r\n    Responses\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseListingQuery } from '../common/base-listing-query.class';\r\n\r\nexport class LanguagesQuery<TClientTypes extends ClientTypes> extends BaseListingQuery<\r\n    TClientTypes,\r\n    ILanguage<TClientTypes['languageCodenames']>,\r\n    Responses.IListLanguagesResponse<TClientTypes['languageCodenames']>,\r\n    Responses.IListLanguagesAllResponse<TClientTypes['languageCodenames']>,\r\n    ILanguagesQueryConfig,\r\n    Contracts.IListLanguagesContract\r\n> {\r\n    /**\r\n     * Endpoint\r\n     */\r\n    protected readonly endpoint: string = 'languages';\r\n\r\n    protected _queryConfig: ILanguagesQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Limits the number of taxonomies returned by query\r\n     * @param limit Number of taxonomies to load\r\n     */\r\n    limitParameter(limit: number): this {\r\n        this.parameters.push(new Parameters.LimitParameter(limit));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Skips the selected number of taxonomies\r\n     * @param skip Number of taxonomies to skip\r\n     */\r\n    skipParameter(skip: number): this {\r\n        this.parameters.push(new Parameters.SkipParameter(skip));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListLanguagesResponse<TClientTypes['languageCodenames']>,\r\n            Contracts.IListLanguagesContract\r\n        >\r\n    > {\r\n        return this.queryService.getLanguages(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/' + this.endpoint;\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: ILanguagesQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    map(json: any): Responses.IListLanguagesResponse<TClientTypes['languageCodenames']> {\r\n        return this.queryService.mappingService.listLanguagesResponse(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: ILanguage<TClientTypes['languageCodenames']>[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListLanguagesResponse<TClientTypes['languageCodenames']>,\r\n            Contracts.IListLanguagesContract\r\n        >[]\r\n    ): Responses.IListLanguagesAllResponse<TClientTypes['languageCodenames']> {\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    ClientTypes,\r\n    Filters,\r\n    IDeliveryNetworkResponse,\r\n    ILanguagesQueryConfig,\r\n    ISyncInitQueryConfig,\r\n    Parameters,\r\n    Responses\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from '../common/base-query.class';\r\n\r\nexport class InitializeSyncQuery<TClientTypes extends ClientTypes> extends BaseQuery<\r\n    TClientTypes,\r\n    Responses.IInitializeSyncResponse,\r\n    ISyncInitQueryConfig,\r\n    Contracts.IInitializeSyncContract\r\n> {\r\n    protected readonly endpoint: string = 'sync/init';\r\n\r\n    protected _queryConfig: ILanguagesQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets only item of given type\r\n     * @param type Codename of type to get\r\n     */\r\n    type(type: string): this {\r\n        this.parameters.push(new Filters.TypeFilter(type));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets only item from given collection\r\n     * @param collection Codename of collection to get\r\n     */\r\n    collection(collection: string): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collection));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Language codename\r\n     * @param languageCodename Codename of the language\r\n     */\r\n    languageParameter(languageCodename: string): this {\r\n        this.parameters.push(new Parameters.LanguageParameter(languageCodename));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<Responses.IInitializeSyncResponse, Contracts.IInitializeSyncContract>\r\n    > {\r\n        console.warn(\r\n            `Sync Api v1 is deprecated. Please use the new Sync Api v2. https://kontent.ai/learn/docs/apis/openapi/sync-api-v2/`\r\n        );\r\n        return this.queryService.initializeSync(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/' + this.endpoint;\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: ISyncInitQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    map(json: any): Responses.IInitializeSyncResponse {\r\n        return this.queryService.mappingService.initializeContentSync(json);\r\n    }\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport { IItemQueryConfig, IDeliveryNetworkResponse, Responses, ClientTypes, IContentItemDelta } from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseListingQuery } from '../common/base-listing-query.class';\r\n\r\nexport class SyncChangesQuery<TClientTypes extends ClientTypes> extends BaseListingQuery<\r\n    TClientTypes,\r\n    IContentItemDelta,\r\n    Responses.ISyncChangesResponse,\r\n    Responses.ISyncChangesAllResponse,\r\n    IItemQueryConfig,\r\n    Contracts.ISyncChangesContract\r\n> {\r\n    protected _queryConfig: IItemQueryConfig = {};\r\n\r\n    private readonly action: string = '/sync';\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    toPromise(): Promise<IDeliveryNetworkResponse<Responses.ISyncChangesResponse, Contracts.ISyncChangesContract>> {\r\n        console.warn(\r\n            `Sync Api v1 is deprecated. Please use the new Sync Api v2. https://kontent.ai/learn/docs/apis/openapi/sync-api-v2/`\r\n        );\r\n        return this.queryService.syncChanges(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        return super.resolveUrlInternal(this.action);\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: IItemQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    map(json: any): Responses.ISyncChangesResponse {\r\n        return this.queryService.mappingService.syncChanges(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: IContentItemDelta[],\r\n        responses: IDeliveryNetworkResponse<Responses.ISyncChangesResponse, Contracts.ISyncChangesContract>[]\r\n    ): Responses.ISyncChangesAllResponse {\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    ClientTypes,\r\n    IDeliveryNetworkResponse,\r\n    ITaxonomyGroup,\r\n    ITaxonomyQueryConfig,\r\n    Parameters,\r\n    Responses\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseListingQuery } from '../common/base-listing-query.class';\r\n\r\nexport class TaxonomiesQuery<TClientTypes extends ClientTypes> extends BaseListingQuery<\r\n    TClientTypes,\r\n    ITaxonomyGroup<TClientTypes['taxonomyCodenames']>,\r\n    Responses.IListTaxonomiesResponse<TClientTypes['taxonomyCodenames']>,\r\n    Responses.IListTaxonomiesAllResponse<TClientTypes['taxonomyCodenames']>,\r\n    ITaxonomyQueryConfig,\r\n    Contracts.IListTaxonomyGroupsContract\r\n> {\r\n    /**\r\n     * Taxonomies endpoint URL action\r\n     */\r\n    protected readonly taxonomiesEndpoint: string = 'taxonomies';\r\n\r\n    protected _queryConfig: ITaxonomyQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Limits the number of taxonomies returned by query\r\n     * @param limit Number of taxonomies to load\r\n     */\r\n    limitParameter(limit: number): this {\r\n        this.parameters.push(new Parameters.LimitParameter(limit));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Skips the selected number of taxonomies\r\n     * @param skip Number of taxonomies to skip\r\n     */\r\n    skipParameter(skip: number): this {\r\n        this.parameters.push(new Parameters.SkipParameter(skip));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListTaxonomiesResponse<TClientTypes['taxonomyCodenames']>,\r\n            Contracts.IListTaxonomyGroupsContract\r\n        >\r\n    > {\r\n        return this.queryService.getTaxonomies(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/' + this.taxonomiesEndpoint;\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IListTaxonomiesResponse<TClientTypes['taxonomyCodenames']> {\r\n        return this.queryService.mappingService.listTaxonomiesResponse(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: ITaxonomyGroup<TClientTypes['taxonomyCodenames']>[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListTaxonomiesResponse<TClientTypes['taxonomyCodenames']>,\r\n            Contracts.IListTaxonomyGroupsContract\r\n        >[]\r\n    ): Responses.IListTaxonomiesAllResponse<TClientTypes['taxonomyCodenames']> {\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport { ClientTypes, IDeliveryNetworkResponse, ITaxonomyQueryConfig, Responses } from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from '../common/base-query.class';\r\n\r\nexport class TaxonomyQuery<TClientTypes extends ClientTypes> extends BaseQuery<\r\n    TClientTypes,\r\n    Responses.IViewTaxonomyResponse<TClientTypes['taxonomyCodenames']>,\r\n    ITaxonomyQueryConfig,\r\n    Contracts.IViewTaxonomyGroupContract\r\n> {\r\n    /**\r\n     * Taxonomies endpoint URL action\r\n     */\r\n    protected readonly taxonomiesEndpoint: string = 'taxonomies';\r\n\r\n    protected _queryConfig: ITaxonomyQueryConfig = {};\r\n\r\n    constructor(\r\n        protected config: IDeliveryClientConfig,\r\n        protected queryService: QueryService<TClientTypes>,\r\n        private taxonomyCodename: string\r\n    ) {\r\n        super(config, queryService);\r\n\r\n        if (!taxonomyCodename) {\r\n            throw Error(`Cannot create taxonomy query without codename of the taxonomy`);\r\n        }\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IViewTaxonomyResponse<TClientTypes['taxonomyCodenames']>,\r\n            Contracts.IViewTaxonomyGroupContract\r\n        >\r\n    > {\r\n        return this.queryService.getTaxonomy(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/' + this.taxonomiesEndpoint + '/' + this.taxonomyCodename;\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IViewTaxonomyResponse<TClientTypes['taxonomyCodenames']> {\r\n        return this.queryService.mappingService.viewTaxonomyResponse(json);\r\n    }\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    ClientTypes,\r\n    IContentType,\r\n    IContentTypeQueryConfig,\r\n    IDeliveryNetworkResponse,\r\n    Parameters,\r\n    Responses\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseListingQuery } from '../common/base-listing-query.class';\r\n\r\nexport class MultipleTypeQuery<TClientTypes extends ClientTypes> extends BaseListingQuery<\r\n    TClientTypes,\r\n    IContentType<TClientTypes['contentTypeCodenames']>,\r\n    Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']>,\r\n    Responses.IListContentTypesAllResponse<TClientTypes['contentTypeCodenames']>,\r\n    IContentTypeQueryConfig,\r\n    Contracts.IListContentTypeContract\r\n> {\r\n    protected _queryConfig: IContentTypeQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Used to limit the number of elements returned by query.\r\n     * @param elementCodenames Array of element codenames to fetch\r\n     */\r\n    elementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this {\r\n        this.parameters.push(new Parameters.ElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to exclude elements returned by query.\r\n     * @param elementCodenames Array of element codenames to exclude\r\n     */\r\n    excludeElementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this {\r\n        this.parameters.push(new Parameters.ExcludeElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Limits the number of taxonomies returned by query\r\n     * @param limit Number of taxonomies to load\r\n     */\r\n    limitParameter(limit: number): this {\r\n        this.parameters.push(new Parameters.LimitParameter(limit));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Skips the selected number of taxonomies\r\n     * @param skip Number of taxonomies to skip\r\n     */\r\n    skipParameter(skip: number): this {\r\n        this.parameters.push(new Parameters.SkipParameter(skip));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']>,\r\n            Contracts.IListContentTypeContract\r\n        >\r\n    > {\r\n        return this.queryService.getMultipleTypes(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/types';\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']> {\r\n        return this.queryService.mappingService.listContentTypesResponse(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: IContentType<TClientTypes['contentTypeCodenames']>[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']>,\r\n            Contracts.IListContentTypeContract\r\n        >[]\r\n    ): Responses.IListContentTypesAllResponse<TClientTypes['contentTypeCodenames']> {\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport { ClientTypes, IContentTypeQueryConfig, IDeliveryNetworkResponse, Responses } from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from '../common/base-query.class';\r\n\r\nexport class SingleTypeQuery<TClientTypes extends ClientTypes> extends BaseQuery<\r\n    TClientTypes,\r\n    Responses.IViewContentTypeResponse<TClientTypes['contentTypeCodenames']>,\r\n    IContentTypeQueryConfig,\r\n    Contracts.IViewContentTypeContract\r\n> {\r\n    protected _queryConfig: IContentTypeQueryConfig = {};\r\n\r\n    constructor(\r\n        protected config: IDeliveryClientConfig,\r\n        protected queryService: QueryService<TClientTypes>,\r\n        private typeCodename: string\r\n    ) {\r\n        super(config, queryService);\r\n\r\n        if (!typeCodename) {\r\n            throw Error(`Cannot create type query without the codename of the type`);\r\n        }\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IViewContentTypeResponse<TClientTypes['contentTypeCodenames']>,\r\n            Contracts.IViewContentTypeContract\r\n        >\r\n    > {\r\n        return this.queryService.getSingleType(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/types/' + this.typeCodename;\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IViewContentTypeResponse<TClientTypes['contentTypeCodenames']> {\r\n        return this.queryService.mappingService.viewContentTypeResponse(json);\r\n    }\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    Filters,\r\n    IDeliveryNetworkResponse,\r\n    Parameters,\r\n    Responses,\r\n    IItemFeedQueryConfig,\r\n    ClientTypes,\r\n    IUsedInItemRecord,\r\n    IQueryConfig\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseListingQuery } from '../common/base-listing-query.class';\r\n\r\nexport type UsedInSetup = {\r\n    readonly entity: 'asset' | 'contentItem';\r\n    readonly codename: string;\r\n};\r\n\r\nexport class UsedInQuery<TClientTypes extends ClientTypes> extends BaseListingQuery<\r\n    TClientTypes,\r\n    IUsedInItemRecord<TClientTypes>,\r\n    Responses.IUsedInResponse<TClientTypes>,\r\n    Responses.IUsedInAllResponse<TClientTypes>,\r\n    IQueryConfig,\r\n    Contracts.IUsedInItemsContract\r\n> {\r\n    protected _queryConfig: IQueryConfig = {};\r\n\r\n    constructor(\r\n        protected readonly config: IDeliveryClientConfig,\r\n        protected readonly queryService: QueryService<TClientTypes>,\r\n        protected readonly setup: UsedInSetup\r\n    ) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets only item of given type\r\n     * @param type Codename of type to get\r\n     */\r\n    type(type: TClientTypes['contentTypeCodenames']): this {\r\n        this.parameters.push(new Filters.TypeFilter(type));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets items of given types (logical or)\r\n     * I.e. get items of either 'Actor' or 'Movie' type\r\n     * @param types Types to get\r\n     */\r\n    types(types: TClientTypes['contentTypeCodenames'][]): this {\r\n        this.parameters.push(new Filters.TypeFilter(types));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets only item from given collection\r\n     * @param collection Codename of collection to get\r\n     */\r\n    collection(collection: TClientTypes['collectionCodenames']): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collection));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets items from given collections (logical or)\r\n     * I.e. get items of either 'default' or 'christmas-campaign' collection\r\n     * @param collections Collections to get\r\n     */\r\n    collections(collections: TClientTypes['collectionCodenames'][]): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collections));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Language codename\r\n     * @param languageCodename Codename of the language\r\n     */\r\n    languageParameter(languageCodename: TClientTypes['languageCodenames']): this {\r\n        this.parameters.push(new Parameters.LanguageParameter(languageCodename));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<Responses.IUsedInResponse<TClientTypes>, Contracts.IUsedInItemsContract>\r\n    > {\r\n        return this.queryService.getUsedIn(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = `/${this.setup.entity === 'asset' ? 'assets' : 'items'}/${this.setup.codename}/used-in`;\r\n\r\n        // add default language is necessary\r\n        this.processDefaultLanguageParameter();\r\n\r\n        //process client level archived item exclusion\r\n        this.processExcludeArchivedItemsParameter();\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: IItemFeedQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    map(json: any): Responses.IUsedInResponse<TClientTypes> {\r\n        return this.queryService.mappingService.usedInResponse(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: IUsedInItemRecord<TClientTypes>[],\r\n        responses: IDeliveryNetworkResponse<Responses.IUsedInResponse<TClientTypes>, Contracts.IUsedInItemsContract>[]\r\n    ): Responses.IUsedInAllResponse<TClientTypes> {\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n}\r\n","\nimport { ISDKInfo } from '@kontent-ai/core-sdk';\nexport const sdkInfo: ISDKInfo = {\n    host: 'npmjs.com',\n    version: '16.3.0',\n    name: '@kontent-ai/delivery-sdk'\n};\n","import { IResponse, IHeader, IHttpService, IQueryParameter, urlHelper } from '@kontent-ai/core-sdk';\r\nimport { AxiosError } from 'axios';\r\nimport {\r\n    waitForLoadingNewContentHeader,\r\n    IQueryConfig,\r\n    ISDKInfo,\r\n    IDeliveryErrorRaw,\r\n    DeliveryError,\r\n    sdkVersionHeader,\r\n    staleContentHeaderName,\r\n    continuationTokenHeaderName,\r\n    IDeliveryNetworkResponse,\r\n    ClientTypes\r\n} from '../models';\r\n\r\nimport { IDeliveryClientConfig } from '../config';\r\nimport { IMappingService } from './mapping.service';\r\n\r\nexport abstract class BaseDeliveryQueryService<TClientTypes extends ClientTypes> {\r\n    /**\r\n     * Default base Url to Kontent.ai Delivery API\r\n     */\r\n    private readonly defaultBaseDeliveryApiUrl: string = 'https://deliver.kontent.ai';\r\n\r\n    /**\r\n     * Default preview url to Kontent.ai Delivery API\r\n     */\r\n    private readonly defaultPreviewDeliveryApiUrl: string = 'https://preview-deliver.kontent.ai';\r\n\r\n    constructor(\r\n        /**\r\n         * Delivery client configuration\r\n         */\r\n        public readonly config: IDeliveryClientConfig,\r\n        /**\r\n         * Http service for fetching data\r\n         */\r\n        public readonly httpService: IHttpService<any>,\r\n        /**\r\n         * Information about the SDK\r\n         */\r\n        public readonly sdkInfo: ISDKInfo,\r\n        /**\r\n         * Mapping service\r\n         */\r\n        public readonly mappingService: IMappingService<TClientTypes>\r\n    ) {}\r\n\r\n    /**\r\n     * Gets url based on the action, query configuration and options (parameters)\r\n     * @param action Action (= url part) that will be hit\r\n     * @param queryConfig Query configuration\r\n     * @param options Query options\r\n     */\r\n    getUrl(action: string, queryConfig: IQueryConfig, options?: IQueryParameter[]): string {\r\n        if (!this.config.proxy || !this.config.proxy.advancedProxyUrlResolver) {\r\n            return urlHelper.addOptionsToUrl(this.getBaseUrl(queryConfig) + action, options);\r\n        }\r\n        return this.config.proxy.advancedProxyUrlResolver({\r\n            queryParameters: options ? options : [],\r\n            queryString: urlHelper.addOptionsToUrl('', options),\r\n            action: action,\r\n            domain: this.getDomain(queryConfig),\r\n            queryConfig: queryConfig,\r\n            environmentId: this.config.environmentId\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets proper set of headers for given request.\r\n     * @param queryConfig Query configuration\r\n     * @param additionalHeaders Custom headers\r\n     */\r\n    getHeaders(queryConfig: IQueryConfig, additionalHeaders?: IHeader[]): IHeader[] {\r\n        const headers: IHeader[] = [];\r\n\r\n        if (additionalHeaders) {\r\n            headers.push(...additionalHeaders);\r\n        }\r\n\r\n        // add SDK Id header for monitoring SDK usage\r\n        headers.push(this.getSdkIdHeader());\r\n\r\n        // add headers from global config\r\n        if (this.config.globalHeaders) {\r\n            headers.push(...this.config.globalHeaders(queryConfig));\r\n        }\r\n\r\n        // add query / global headers from query config\r\n        headers.push(...this.getQueryHeaders(queryConfig));\r\n\r\n        if (this.isPreviewModeEnabled(queryConfig) && this.isSecuredModeEnabled(queryConfig)) {\r\n            throw Error(`Preview & secured modes cannot be used at the same time.`);\r\n        }\r\n\r\n        // add preview header is required\r\n        if (this.isPreviewModeEnabled(queryConfig) && this.config.previewApiKey) {\r\n            headers.push(this.getAuthorizationHeader(this.config.previewApiKey));\r\n        }\r\n\r\n        // add secured mode header is required\r\n        if (this.isSecuredModeEnabled(queryConfig) && this.config.secureApiKey) {\r\n            headers.push(this.getAuthorizationHeader(this.config.secureApiKey));\r\n        }\r\n\r\n        // add 'X-KC-Wait-For-Loading-New-Content' header if required\r\n        if (this.shouldAddWaitForLoadingNewContentHeader(queryConfig)) {\r\n            headers.push({\r\n                header: waitForLoadingNewContentHeader,\r\n                value: 'true'\r\n            });\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    /**\r\n     * Http POST response\r\n     * @param url Url of request\r\n     * @param queryConfig Query config configuration\r\n     */\r\n    protected async postResponseAsync<TRawData>(\r\n        url: string,\r\n        body: any,\r\n        queryConfig?: IQueryConfig,\r\n        serviceConfig?: {\r\n            headers?: IHeader[];\r\n        }\r\n    ): Promise<IResponse<TRawData>> {\r\n        if (!queryConfig) {\r\n            queryConfig = {};\r\n        }\r\n\r\n        if (!serviceConfig) {\r\n            serviceConfig = {};\r\n        }\r\n\r\n        try {\r\n            return await this.httpService.postAsync<TRawData>(\r\n                {\r\n                    url: url,\r\n                    body: body\r\n                },\r\n                {\r\n                    cancelToken: queryConfig?.cancelToken,\r\n                    responseType: 'json',\r\n                    retryStrategy: this.config.retryStrategy,\r\n                    headers: this.getHeaders(queryConfig, serviceConfig.headers ? serviceConfig.headers : [])\r\n                }\r\n            );\r\n        } catch (error) {\r\n            throw this.mapDeliveryError(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Http GET response\r\n     * @param url Url of request\r\n     * @param queryConfig Query config configuration\r\n     */\r\n    protected async getResponseAsync<TRawData>(\r\n        url: string,\r\n        queryConfig?: IQueryConfig,\r\n        serviceConfig?: {\r\n            headers?: IHeader[];\r\n        }\r\n    ): Promise<IResponse<TRawData>> {\r\n        if (!queryConfig) {\r\n            queryConfig = {};\r\n        }\r\n\r\n        if (!serviceConfig) {\r\n            serviceConfig = {};\r\n        }\r\n\r\n        try {\r\n            return await this.httpService.getAsync<TRawData>(\r\n                {\r\n                    url: url\r\n                },\r\n                {\r\n                    cancelToken: queryConfig?.cancelToken,\r\n                    responseType: 'json',\r\n                    retryStrategy: this.config.retryStrategy,\r\n                    headers: this.getHeaders(queryConfig, serviceConfig.headers ? serviceConfig.headers : [])\r\n                }\r\n            );\r\n        } catch (error) {\r\n            throw this.mapDeliveryError(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets base URL of the request including the environment Id\r\n     * @param queryConfig Query configuration\r\n     */\r\n    protected getBaseUrl(queryConfig: IQueryConfig): string {\r\n        return this.getDomain(queryConfig) + '/' + this.config.environmentId;\r\n    }\r\n\r\n    protected mapNetworkResponse<TData, TContract>(\r\n        data: TData,\r\n        response: IResponse<any>\r\n    ): IDeliveryNetworkResponse<TData, TContract> {\r\n        return {\r\n            data: data,\r\n            response: response,\r\n            hasStaleContent: this.getHasStaleContent(response.headers),\r\n            xContinuationToken: this.getContinuationToken(response.headers)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Indicates if current query should use preview mode\r\n     * @param queryConfig Query configuration\r\n     */\r\n    private isPreviewModeEnabled(queryConfig: IQueryConfig): boolean {\r\n        if (queryConfig.usePreviewMode !== undefined) {\r\n            return queryConfig.usePreviewMode;\r\n        }\r\n\r\n        if (!this.config.defaultQueryConfig) {\r\n            return false;\r\n        }\r\n\r\n        if (this.config.defaultQueryConfig.usePreviewMode === true) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private getQueryHeaders(queryConfig: IQueryConfig): IHeader[] {\r\n        if (queryConfig.customHeaders) {\r\n            return queryConfig.customHeaders;\r\n        }\r\n\r\n        if (this.config.defaultQueryConfig?.customHeaders) {\r\n            return this.config.defaultQueryConfig.customHeaders;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    private shouldAddWaitForLoadingNewContentHeader(queryConfig: IQueryConfig): boolean {\r\n        if (queryConfig.waitForLoadingNewContent !== undefined) {\r\n            return queryConfig.waitForLoadingNewContent;\r\n        }\r\n\r\n        if (!this.config.defaultQueryConfig) {\r\n            return false;\r\n        }\r\n\r\n        if (this.config.defaultQueryConfig.waitForLoadingNewContent === true) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Indicates if current query should use secured mode\r\n     * @param queryConfig Query configuration\r\n     */\r\n    private isSecuredModeEnabled(queryConfig: IQueryConfig): boolean {\r\n        if (queryConfig.useSecuredMode !== undefined) {\r\n            return queryConfig.useSecuredMode;\r\n        }\r\n\r\n        if (!this.config.defaultQueryConfig) {\r\n            return false;\r\n        }\r\n\r\n        if (this.config.defaultQueryConfig.useSecuredMode === true) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets preview or standard URL based on client and query configuration\r\n     * @param queryConfig Query configuration\r\n     */\r\n    private getDomain(queryConfig: IQueryConfig): string {\r\n        if (this.isPreviewModeEnabled(queryConfig)) {\r\n            if (!this.config.previewApiKey) {\r\n                throw Error(`Preview API key is not configured.`);\r\n            }\r\n\r\n            // check custom preview url\r\n            if (this.config.proxy && this.config.proxy.basePreviewUrl) {\r\n                return this.config.proxy.basePreviewUrl;\r\n            }\r\n\r\n            // use default preview url\r\n            return this.defaultPreviewDeliveryApiUrl;\r\n        }\r\n\r\n        // check custom base url\r\n        if (this.config.proxy && this.config.proxy.baseUrl) {\r\n            return this.config.proxy.baseUrl;\r\n        }\r\n        return this.defaultBaseDeliveryApiUrl;\r\n    }\r\n\r\n    /**\r\n     * Gets authorization header. This is used for 'preview' functionality\r\n     */\r\n    private getAuthorizationHeader(key?: string): IHeader {\r\n        if (!key) {\r\n            throw Error(`Cannot get authorization header because key is invalid`);\r\n        }\r\n        // authorization header required for preview mode\r\n        return {\r\n            header: 'authorization',\r\n            value: `bearer ${key}`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Header identifying SDK type & version for internal purposes of Kontent.ai\r\n     */\r\n    private getSdkIdHeader(): IHeader {\r\n        return {\r\n            header: sdkVersionHeader,\r\n            value: `${this.sdkInfo.host};${this.sdkInfo.name};${this.sdkInfo.version}`\r\n        };\r\n    }\r\n\r\n    private mapDeliveryError(error: any): any {\r\n        let axiosError: AxiosError | undefined;\r\n\r\n        if (error.error) {\r\n            axiosError = error.error;\r\n        } else {\r\n            axiosError = error;\r\n        }\r\n\r\n        if (!axiosError || !axiosError.isAxiosError) {\r\n            return error;\r\n        }\r\n\r\n        const deliveryErrorData = axiosError.response?.data as IDeliveryErrorRaw;\r\n\r\n        if (!deliveryErrorData || !deliveryErrorData.error_code) {\r\n            return error;\r\n        }\r\n\r\n        return new DeliveryError({\r\n            errorCode: deliveryErrorData.error_code,\r\n            message: deliveryErrorData.message,\r\n            specificCode: deliveryErrorData.specific_code,\r\n            requestId: deliveryErrorData.request_id\r\n        });\r\n    }\r\n\r\n    private getHasStaleContent(headers: IHeader[]): boolean {\r\n        const hasStaleContentHeader = headers.find(\r\n            (m) => m.header.toLowerCase() === staleContentHeaderName.toLowerCase()\r\n        );\r\n\r\n        if (hasStaleContentHeader) {\r\n            if (hasStaleContentHeader.value.toString() === '1') {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private getContinuationToken(headers: IHeader[]): string | undefined {\r\n        const header = headers.find((m) => m.header.toLowerCase() === continuationTokenHeaderName.toLowerCase());\r\n        return header ? header.value : undefined;\r\n    }\r\n}\r\n","import { IHttpService } from '@kontent-ai/core-sdk';\r\nimport { IDeliveryClientConfig } from '../config';\r\nimport { Contracts } from '../contracts';\r\nimport {\r\n    Responses,\r\n    IContentItem,\r\n    IContentTypeQueryConfig,\r\n    IGroupedNetworkResponse,\r\n    IItemQueryConfig,\r\n    IDeliveryNetworkResponse,\r\n    ILanguagesQueryConfig,\r\n    ITaxonomyQueryConfig,\r\n    ISyncInitQueryConfig,\r\n    ClientTypes\r\n} from '../models';\r\nimport {\r\n    IKontentListAllResponse,\r\n    IKontentListResponse,\r\n    IListAllQueryConfig,\r\n    ISDKInfo\r\n} from '../models/common/common-models';\r\nimport { BaseDeliveryQueryService } from './base-delivery-query.service';\r\nimport { IMappingService } from './mapping.service';\r\n\r\nexport class QueryService<TClientTypes extends ClientTypes> extends BaseDeliveryQueryService<TClientTypes> {\r\n    constructor(\r\n        config: IDeliveryClientConfig,\r\n        httpService: IHttpService<any>,\r\n        sdkInfo: ISDKInfo,\r\n        mappingService: IMappingService<TClientTypes>\r\n    ) {\r\n        super(config, httpService, sdkInfo, mappingService);\r\n    }\r\n\r\n    /**\r\n     * Gets single item from given url\r\n     * @param url Url used to get single item\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getSingleItemAsync<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        url: string,\r\n        queryConfig: IItemQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IViewContentItemResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IViewContentItemContract\r\n        >\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IViewContentItemContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse<\r\n            Responses.IViewContentItemResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IViewContentItemContract\r\n        >(this.mappingService.viewContentItemResponse<TContentItem>(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets single feed response. Might not contain all items in your environment.\r\n     * @param url Url\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getItemsFeed<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        url: string,\r\n        queryConfig: IItemQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListItemsFeedResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IItemsFeedContract\r\n        >\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IItemsFeedContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.itemsFeedResponse<TContentItem>(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets single used in response. Might not contain all used in references.\r\n     * @param url Url\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getUsedIn(\r\n        url: string,\r\n        queryConfig: IItemQueryConfig\r\n    ): Promise<IDeliveryNetworkResponse<Responses.IUsedInResponse<TClientTypes>, Contracts.IUsedInItemsContract>> {\r\n        const response = await this.getResponseAsync<Contracts.IUsedInItemsContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.usedInResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets multiple items from given url\r\n     * @param url Url used to get multiple items\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getMultipleItems<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        url: string,\r\n        queryConfig: IItemQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListContentItemsResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IListContentItemsContract\r\n        >\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IListContentItemsContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.listContentItemsResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets single content type from given url\r\n     * @param url Url used to get single type\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getSingleType(\r\n        url: string,\r\n        queryConfig: IContentTypeQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IViewContentTypeResponse<TClientTypes['contentTypeCodenames']>,\r\n            Contracts.IViewContentTypeContract\r\n        >\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IViewContentTypeContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.viewContentTypeResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets multiple content types from given url\r\n     * @param url Url used to get multiple types\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getMultipleTypes(\r\n        url: string,\r\n        queryConfig: IContentTypeQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']>,\r\n            Contracts.IListContentTypeContract\r\n        >\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IListContentTypeContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.listContentTypesResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Initializes synchronization of changes in content items based on the specified parameters. After the initialization,\r\n     * you'll get an X-Continuation token in the response.\r\n     * Use the token to synchronize changes in the content items matching the initialization criteria.\r\n     * @param url Url\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async initializeSync(\r\n        url: string,\r\n        queryConfig: ISyncInitQueryConfig\r\n    ): Promise<IDeliveryNetworkResponse<Responses.IInitializeSyncResponse, Contracts.IInitializeSyncContract>> {\r\n        const response = await this.postResponseAsync<Contracts.IInitializeSyncContract>(url, {}, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.initializeContentSync(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Retrieve a list of delta updates to recently changed content items in the specified environment.\r\n     * The types of items you get is determined by the X-Continuation token you use.\r\n     * @param url Url used to get multiple types\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async syncChanges(\r\n        url: string,\r\n        queryConfig: IContentTypeQueryConfig\r\n    ): Promise<IDeliveryNetworkResponse<Responses.ISyncChangesResponse, Contracts.ISyncChangesContract>> {\r\n        const response = await this.getResponseAsync<Contracts.ISyncChangesContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.syncChanges(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets languages\r\n     * @param url Url\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getLanguages(\r\n        url: string,\r\n        queryConfig: ILanguagesQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListLanguagesResponse<TClientTypes['languageCodenames']>,\r\n            Contracts.IListLanguagesContract\r\n        >\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IListLanguagesContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.listLanguagesResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets single taxonomy from given url\r\n     * @param url Url used to get single taxonomy\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getTaxonomy(\r\n        url: string,\r\n        queryConfig: ITaxonomyQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IViewTaxonomyResponse<TClientTypes['taxonomyCodenames']>,\r\n            Contracts.IViewTaxonomyGroupContract\r\n        >\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IViewTaxonomyGroupContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.viewTaxonomyResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets multiple taxonomies from given url\r\n     * @param url Url used to get multiple taxonomies\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getTaxonomies(\r\n        url: string,\r\n        queryConfig: ITaxonomyQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListTaxonomiesResponse<TClientTypes['taxonomyCodenames']>,\r\n            Contracts.IListTaxonomyGroupsContract\r\n        >\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IListTaxonomyGroupsContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.listTaxonomiesResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets single content type element from given url\r\n     * @param url Url used to get single content type element\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getElementAsync(\r\n        url: string,\r\n        queryConfig: ITaxonomyQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<Responses.IViewContentTypeElementResponse, Contracts.IViewContentTypeElementContract>\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IViewContentTypeElementContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.viewContentTypeElementResponse(response.data), response);\r\n    }\r\n\r\n    async getListAllResponse<\r\n        TResponse extends IKontentListResponse,\r\n        TAllResponse extends IKontentListAllResponse,\r\n        TContract\r\n    >(data: {\r\n        page: number;\r\n        getResponse: (\r\n            nextPageUrl?: string,\r\n            continuationToken?: string\r\n        ) => Promise<IDeliveryNetworkResponse<TResponse, TContract>>;\r\n        allResponseFactory: (\r\n            items: any[],\r\n            responses: IDeliveryNetworkResponse<TResponse, TContract>[]\r\n        ) => IGroupedNetworkResponse<TAllResponse>;\r\n        listQueryConfig?: IListAllQueryConfig<TResponse, TContract>;\r\n    }): Promise<IGroupedNetworkResponse<TAllResponse>> {\r\n        const responses = await this.getListAllResponseInternalAsync({\r\n            page: data.page,\r\n            resolvedResponses: [],\r\n            getResponse: data.getResponse,\r\n            nextPageUrl: undefined,\r\n            continuationToken: undefined,\r\n            listQueryConfig: data.listQueryConfig\r\n        });\r\n\r\n        return data.allResponseFactory(\r\n            responses.reduce((prev: any[], current) => {\r\n                prev.push(...current.data.items);\r\n                return prev;\r\n            }, []),\r\n            responses\r\n        );\r\n    }\r\n\r\n    private async getListAllResponseInternalAsync<TResponse extends IKontentListResponse, TContract>(data: {\r\n        page: number;\r\n        nextPageUrl?: string;\r\n        continuationToken?: string;\r\n        getResponse: (\r\n            nextPageUrl?: string,\r\n            continuationToken?: string\r\n        ) => Promise<IDeliveryNetworkResponse<TResponse, TContract>>;\r\n        resolvedResponses: IDeliveryNetworkResponse<TResponse, TContract>[];\r\n        listQueryConfig?: IListAllQueryConfig<TResponse, TContract>;\r\n    }): Promise<IDeliveryNetworkResponse<TResponse, TContract>[]> {\r\n        if (data.listQueryConfig?.pages) {\r\n            if (data.page > data.listQueryConfig.pages) {\r\n                // page limit reached, return result\r\n                return data.resolvedResponses;\r\n            }\r\n        }\r\n\r\n        const response = await data.getResponse(data.nextPageUrl, data.continuationToken);\r\n\r\n        if (data.listQueryConfig?.delayBetweenRequests) {\r\n            await this.sleep(data.listQueryConfig.delayBetweenRequests);\r\n        }\r\n\r\n        data.resolvedResponses.push(response);\r\n\r\n        if (data.listQueryConfig?.responseFetched) {\r\n            data.listQueryConfig.responseFetched(response, data.nextPageUrl, data.continuationToken);\r\n        }\r\n\r\n        const nextPage = response.data.pagination?.nextPage;\r\n        const continuationToken = response.xContinuationToken;\r\n\r\n        if (nextPage || continuationToken) {\r\n            // recursively fetch next page data\r\n            return await this.getListAllResponseInternalAsync({\r\n                page: data.page + 1,\r\n                nextPageUrl: nextPage,\r\n                continuationToken: continuationToken,\r\n                listQueryConfig: data.listQueryConfig,\r\n                getResponse: data.getResponse,\r\n                resolvedResponses: data.resolvedResponses\r\n            });\r\n        }\r\n\r\n        return data.resolvedResponses;\r\n    }\r\n\r\n    private sleep(ms: number): Promise<void> {\r\n        return new Promise((resolve) => setTimeout(resolve, ms));\r\n    }\r\n}\r\n","export * from './delivery-query.service';\r\nexport * from './mapping.service';\r\n","import { IDeliveryClientConfig } from '../config';\r\nimport { Contracts } from '../contracts';\r\nimport {\r\n    SyncMapper,\r\n    GenericElementMapper,\r\n    ItemMapper,\r\n    LanguageMapper,\r\n    TaxonomyMapper,\r\n    TypeMapper,\r\n    UsedInMapper\r\n} from '../mappers';\r\nimport { Responses, IContentItem, IPagination, ClientTypes } from '../models';\r\n\r\nexport interface IMappingService<TClientTypes extends ClientTypes> {\r\n    listContentTypesResponse(\r\n        data: Contracts.IListContentTypeContract\r\n    ): Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']>;\r\n\r\n    itemsFeedResponse<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        data: Contracts.IItemsFeedContract\r\n    ): Responses.IListItemsFeedResponse<TContentItem, TClientTypes['contentItemType']>;\r\n\r\n    usedInResponse(data: Contracts.IUsedInItemsContract): Responses.IUsedInResponse<TClientTypes>;\r\n\r\n    viewContentTypeResponse(\r\n        data: Contracts.IViewContentTypeContract\r\n    ): Responses.IViewContentTypeResponse<TClientTypes['contentTypeCodenames']>;\r\n\r\n    viewContentItemResponse<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        data: Contracts.IViewContentItemContract\r\n    ): Responses.IViewContentItemResponse<TContentItem, TClientTypes['contentItemType']>;\r\n\r\n    listContentItemsResponse<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        data: Contracts.IListContentItemsContract\r\n    ): Responses.IListContentItemsResponse<TContentItem, TClientTypes['contentItemType']>;\r\n\r\n    viewTaxonomyResponse(\r\n        data: Contracts.IViewTaxonomyGroupContract\r\n    ): Responses.IViewTaxonomyResponse<TClientTypes['taxonomyCodenames']>;\r\n\r\n    listTaxonomiesResponse(\r\n        data: Contracts.IListTaxonomyGroupsContract\r\n    ): Responses.IListTaxonomiesResponse<TClientTypes['taxonomyCodenames']>;\r\n\r\n    viewContentTypeElementResponse(\r\n        data: Contracts.IViewContentTypeElementContract\r\n    ): Responses.IViewContentTypeElementResponse;\r\n\r\n    listLanguagesResponse(\r\n        data: Contracts.IListLanguagesContract\r\n    ): Responses.IListLanguagesResponse<TClientTypes['languageCodenames']>;\r\n    initializeContentSync(data: Contracts.IInitializeSyncContract): Responses.IInitializeSyncResponse;\r\n    syncChanges(data: Contracts.ISyncChangesContract): Responses.ISyncChangesResponse;\r\n}\r\n\r\nexport class MappingService<TClientTypes extends ClientTypes> implements IMappingService<TClientTypes> {\r\n    private readonly typeMapper: TypeMapper<TClientTypes['contentTypeCodenames']>;\r\n    private readonly languageMapper: LanguageMapper<TClientTypes['languageCodenames']>;\r\n    private readonly itemMapper: ItemMapper<TClientTypes['contentItemType']>;\r\n    private readonly taxonomyMapper: TaxonomyMapper<TClientTypes['taxonomyCodenames']>;\r\n    private readonly usedInMapper: UsedInMapper<TClientTypes>;\r\n    private readonly genericElementMapper: GenericElementMapper;\r\n    private readonly syncMapper: SyncMapper;\r\n\r\n    constructor(readonly config: IDeliveryClientConfig) {\r\n        this.typeMapper = new TypeMapper();\r\n        this.languageMapper = new LanguageMapper();\r\n        this.itemMapper = new ItemMapper(config);\r\n        this.taxonomyMapper = new TaxonomyMapper();\r\n        this.usedInMapper = new UsedInMapper<TClientTypes>();\r\n        this.genericElementMapper = new GenericElementMapper();\r\n        this.syncMapper = new SyncMapper();\r\n    }\r\n\r\n    usedInResponse(data: Contracts.IUsedInItemsContract): Responses.IUsedInResponse<TClientTypes> {\r\n        return {\r\n            items: data.items.map((m) => this.usedInMapper.mapUsedInItem(m))\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for list of languages\r\n     * @param data Response data\r\n     */\r\n    listLanguagesResponse(\r\n        data: Contracts.IListLanguagesContract\r\n    ): Responses.IListLanguagesResponse<TClientTypes['languageCodenames']> {\r\n        return {\r\n            items: this.languageMapper.mapMultipleLanguages(data),\r\n            pagination: this.mapPagination(data.pagination)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting a multiple type\r\n     * @param data Response data\r\n     */\r\n    listContentTypesResponse(\r\n        data: Contracts.IListContentTypeContract\r\n    ): Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']> {\r\n        return {\r\n            items: this.typeMapper.mapMultipleTypes(data),\r\n            pagination: this.mapPagination(data.pagination)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for single type\r\n     * @param data Response data\r\n     * @param options Options\r\n     */\r\n    viewContentTypeResponse(\r\n        data: Contracts.IViewContentTypeContract\r\n    ): Responses.IViewContentTypeResponse<TClientTypes['contentTypeCodenames']> {\r\n        return {\r\n            type: this.typeMapper.mapSingleType(data)\r\n        };\r\n    }\r\n\r\n    itemsFeedResponse<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        data: Contracts.IItemsFeedContract\r\n    ): Responses.IListItemsFeedResponse<TContentItem, TClientTypes['contentItemType']> {\r\n        const itemsResult = this.itemMapper.mapItems<TContentItem>({\r\n            linkedItems: Object.values(data.modular_content),\r\n            mainItems: data.items\r\n        });\r\n\r\n        return {\r\n            items: itemsResult.items,\r\n            linkedItems: itemsResult.linkedItems\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting single item\r\n     * @param data Response data\r\n     * @param queryConfig Query configuration\r\n     */\r\n    viewContentItemResponse<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        data: Contracts.IViewContentItemContract\r\n    ): Responses.IViewContentItemResponse<TContentItem, TClientTypes['contentItemType']> {\r\n        const itemResult = this.itemMapper.mapSingleItemFromResponse<TContentItem>(data);\r\n\r\n        return {\r\n            item: itemResult.item,\r\n            linkedItems: itemResult.linkedItems\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting multiple items\r\n     * @param data Response data\r\n     * @param queryConfig Query configuration\r\n     */\r\n    listContentItemsResponse<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        data: Contracts.IListContentItemsContract\r\n    ): Responses.IListContentItemsResponse<TContentItem, TClientTypes['contentItemType']> {\r\n        const itemsResult = this.itemMapper.mapMultipleItemsFromResponse<TContentItem>(data);\r\n\r\n        return {\r\n            items: itemsResult.items,\r\n            pagination: this.mapPagination(data.pagination),\r\n            linkedItems: itemsResult.linkedItems\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting single taxonomy item\r\n     * @param data Response data\r\n     */\r\n    viewTaxonomyResponse(\r\n        data: Contracts.IViewTaxonomyGroupContract\r\n    ): Responses.IViewTaxonomyResponse<TClientTypes['taxonomyCodenames']> {\r\n        return {\r\n            taxonomy: this.taxonomyMapper.mapTaxonomy(data.system, data.terms)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting multiples taxonomies\r\n     * @param data Response data\r\n     */\r\n    listTaxonomiesResponse(\r\n        data: Contracts.IListTaxonomyGroupsContract\r\n    ): Responses.IListTaxonomiesResponse<TClientTypes['taxonomyCodenames']> {\r\n        return {\r\n            items: this.taxonomyMapper.mapTaxonomies(data.taxonomies),\r\n            pagination: this.mapPagination(data.pagination)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting single content type element\r\n     * @param data Response data\r\n     */\r\n    viewContentTypeElementResponse(\r\n        data: Contracts.IViewContentTypeElementContract\r\n    ): Responses.IViewContentTypeElementResponse {\r\n        return this.genericElementMapper.mapElement(data);\r\n    }\r\n\r\n    initializeContentSync(data: Contracts.IInitializeSyncContract): Responses.IInitializeSyncResponse {\r\n        return {\r\n            items: data.items.map((m) => this.syncMapper.mapContentItemDelta(m))\r\n        };\r\n    }\r\n\r\n    syncChanges(data: Contracts.ISyncChangesContract): Responses.ISyncChangesResponse {\r\n        return {\r\n            items: data.items.map((m) => this.syncMapper.mapContentItemDelta(m))\r\n        };\r\n    }\r\n\r\n    private mapPagination(paginationContract: Contracts.IPaginationContract): IPagination {\r\n        return {\r\n            skip: paginationContract.skip,\r\n            count: paginationContract.count,\r\n            limit: paginationContract.limit,\r\n            nextPage: paginationContract.next_page,\r\n            totalCount: paginationContract.total_count ?? null\r\n        };\r\n    }\r\n}\r\n","export class CodenameHelper {\r\n    /**\r\n     * This is used to prevent errors caused by reserved names in content item codename (e.g. 'constructor')\r\n     */\r\n    escapeCodenameInCodenameIndexer(codename: string): string {\r\n        return `_${codename}`;\r\n    }\r\n}\r\n\r\nexport const codenameHelper = new CodenameHelper();\r\n","export class DeliveryUrlHelper {\r\n    replaceAssetDomain(originalAssetUrl: string, customDomain: string): string {\r\n        return `${customDomain}${this.getPathname(originalAssetUrl)}`;\r\n    }\r\n\r\n    getPathname(url: string): string {\r\n        return new URL(url).pathname;\r\n    }\r\n}\r\n\r\nexport const deliveryUrlHelper = new DeliveryUrlHelper();\r\n","export class EnumHelper {\r\n    getAllValues(T: any): string[] {\r\n        const allEnumValues: string[] = Object.keys(T).map((key) => T[key]);\r\n        return allEnumValues;\r\n    }\r\n\r\n    getEnumFromValue<T>(T: any, value: string | number): T | undefined {\r\n        try {\r\n            if (!value) {\r\n                return undefined;\r\n            }\r\n\r\n            // we can map back from index number directly\r\n            if (this.isNumeric(value)) {\r\n                return <T>T[value];\r\n            }\r\n\r\n            // for strings, we need to compare each value separately\r\n            const allEnumValues = this.getAllValues(T);\r\n\r\n            const result = allEnumValues.find((m) => m.toLowerCase() === value.toString().toLowerCase());\r\n\r\n            if (!result) {\r\n                return undefined;\r\n            }\r\n\r\n            return result as T;\r\n        } catch (err) {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    private isNumeric(value: any): boolean {\r\n        return !isNaN(parseFloat(value)) && isFinite(value);\r\n    }\r\n}\r\n\r\nexport const enumHelper = new EnumHelper();\r\n","export * from './codename.helper';\r\nexport * from './delivery-url.helper';\r\nexport * from './enum.helper';\r\n","export class HeaderHelper {\n    constructor() {\n        /**\n        * Header name for SDK usage\n        */\n        this.sdkVersionHeader = 'X-KC-SDKID';\n    }\n    /**\n    * Header identifying SDK type & version for internal purposes of Kontent.ai\n    */\n    getSdkIdHeader(info) {\n        return {\n            header: this.sdkVersionHeader,\n            value: `${info.host};${info.name};${info.version}`\n        };\n    }\n}\nexport const headerHelper = new HeaderHelper();\n//# sourceMappingURL=header.helper.js.map","export function extractHeadersFromAxiosResponse(response) {\n    const headers = [];\n    for (const headerKey of Object.keys(response.headers)) {\n        headers.push({\n            header: headerKey,\n            value: response.headers[headerKey]\n        });\n    }\n    return headers;\n}\n//# sourceMappingURL=headers-helper.js.map","export * from './url.helper';\nexport * from './header.helper';\nexport * from './retry-helper';\nexport * from './headers-helper';\n//# sourceMappingURL=index.js.map","import { extractHeadersFromAxiosResponse } from './headers-helper';\nexport class RetryHelper {\n    constructor() {\n        this.requestCancelledMessagePrefix = 'Request cancelled';\n        this.retryAfterHeaderName = 'Retry-After';\n        this.defaultRetryStatusCodes = [408, 429, 500, 502, 503, 504];\n        this.defaultRetryStrategy = {\n            addJitter: true,\n            deltaBackoffMs: 1000,\n            maxAttempts: 5,\n            canRetryError: (error) => this.canRetryErrorDefault(error)\n        };\n    }\n    getRetryErrorResult(data) {\n        var _a, _b, _c;\n        if (data.error && data.error.message) {\n            if (data.error.message.startsWith(this.requestCancelledMessagePrefix)) {\n                // request was cancelled by user, do not retry it\n                return {\n                    canRetry: false,\n                    retryInMs: 0,\n                    maxRetries: 0\n                };\n            }\n        }\n        const canRetryError = data.retryStrategy.canRetryError\n            ? data.retryStrategy.canRetryError(data.error)\n            : this.defaultRetryStrategy.canRetryError(data.error);\n        if (!canRetryError) {\n            // request cannot be retried\n            return {\n                canRetry: false,\n                retryInMs: 0,\n                maxRetries: 0\n            };\n        }\n        const maxRetries = ((_a = data.retryStrategy.maxAttempts) !== null && _a !== void 0 ? _a : this.defaultRetryStrategy.maxAttempts);\n        const maxRetriesReached = data.retryAttempt >= maxRetries;\n        if (maxRetriesReached) {\n            // request cannot be retried anymore due to maximum attempts\n            return {\n                canRetry: false,\n                retryInMs: 0,\n                maxRetries: maxRetries\n            };\n        }\n        // get wait time\n        const retryResult = this.tryGetRetryAfterInMsFromError(data.error);\n        if (retryResult) {\n            // retry after header was provided\n            return {\n                canRetry: true,\n                retryInMs: retryResult,\n                maxRetries: maxRetries\n            };\n        }\n        // wait time was not provided in header\n        const waitTimeMs = this.getNextWaitTimeMs((_b = data.retryStrategy.addJitter) !== null && _b !== void 0 ? _b : this.defaultRetryStrategy.addJitter, (_c = data.retryStrategy.deltaBackoffMs) !== null && _c !== void 0 ? _c : this.defaultRetryStrategy.deltaBackoffMs, data.retryAttempt);\n        return {\n            canRetry: true,\n            retryInMs: waitTimeMs,\n            maxRetries: maxRetries\n        };\n    }\n    getRetryStrategyFromStrategyOptions(retryOptions) {\n        if (!retryOptions) {\n            return this.defaultRetryStrategy;\n        }\n        return retryOptions;\n    }\n    canRetryInTime(startTime, maxCumulativeWaitTimeMs) {\n        const start = startTime.getTime();\n        const now = new Date().getTime();\n        const differenceInMs = now - start;\n        return {\n            canRetry: differenceInMs < maxCumulativeWaitTimeMs,\n            differenceInMs: differenceInMs\n        };\n    }\n    getNextWaitTimeMs(addJitter, deltaBackoffMs, retryAttempts) {\n        if (!addJitter) {\n            return deltaBackoffMs * Math.pow(2, retryAttempts);\n        }\n        const from = 0.8 * deltaBackoffMs;\n        const to = 1.2 * deltaBackoffMs * Math.pow(2, retryAttempts);\n        return this.randomNumberFromInterval(from, to);\n    }\n    canRetryErrorDefault(error) {\n        const axiosError = this.tryGetAxiosError(error);\n        if (!axiosError) {\n            // by default non-axios errors are not retried\n            return false;\n        }\n        const statusCode = this.getStatusCodeFromError(error);\n        const canRetryStatusCode = this.canRetryStatusCode(statusCode, this.defaultRetryStatusCodes);\n        if (canRetryStatusCode) {\n            return true;\n        }\n        return false;\n    }\n    tryGetRetryAfterInMsFromError(error) {\n        const axiosError = this.tryGetAxiosError(error);\n        if (!axiosError || !axiosError.response) {\n            return undefined;\n        }\n        const headers = extractHeadersFromAxiosResponse(axiosError.response);\n        const retryValueHeader = headers.find((m) => m.header.toLowerCase() === this.retryAfterHeaderName.toLowerCase());\n        if (!retryValueHeader) {\n            return undefined;\n        }\n        const retryInSeconds = +retryValueHeader.value;\n        return retryInSeconds * 1000;\n    }\n    canRetryStatusCode(statusCode, useRetryForResponseCodes) {\n        return useRetryForResponseCodes.includes(statusCode);\n    }\n    getStatusCodeFromError(error) {\n        const axiosError = this.tryGetAxiosError(error);\n        if (!axiosError || !axiosError.response) {\n            return 0;\n        }\n        return axiosError.response.status;\n    }\n    tryGetAxiosError(error) {\n        if (!error) {\n            return undefined;\n        }\n        if (error.isAxiosError) {\n            return error;\n        }\n        const originalError = error.originalError;\n        if (originalError && originalError.isAxiosError) {\n            return originalError;\n        }\n        return undefined;\n    }\n    /**\n     * min and max included\n     */\n    randomNumberFromInterval(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n}\nexport const retryHelper = new RetryHelper();\n//# sourceMappingURL=retry-helper.js.map","export class UrlHelper {\n    /**\n   * Adds query parameters to given url\n   * @param url Url to which options will be added\n   * @param options Query parameters to add\n   */\n    addOptionsToUrl(url, options) {\n        if (options) {\n            options.forEach(filter => {\n                if (url.indexOf('?') > -1) {\n                    url += '&';\n                }\n                else {\n                    url += '?';\n                }\n                url += filter.getParam();\n            });\n        }\n        return url;\n    }\n}\nexport const urlHelper = new UrlHelper();\n//# sourceMappingURL=url.helper.js.map","export class HttpDebugger {\n    /*\n    Called when http request is started\n    */\n    debugStartHttpRequest() {\n    }\n    /*\n    Called when http request is resolved\n    */\n    debugSuccessHttpRequest() {\n    }\n    /*\n    Called when http request is being retried\n    */\n    debugRetryHttpRequest() {\n    }\n}\nexport const httpDebugger = new HttpDebugger();\n//# sourceMappingURL=http.debugger.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport axios from 'axios';\nimport { extractHeadersFromAxiosResponse } from '../helpers/headers-helper';\nimport { httpDebugger } from './http.debugger';\nimport { retryHelper } from '../helpers/retry-helper';\nexport function getWithRetryAsync(instance, call, functionsConfig, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const retryStrategyOptions = (_a = options === null || options === void 0 ? void 0 : options.retryStrategy) !== null && _a !== void 0 ? _a : retryHelper.defaultRetryStrategy;\n        return yield runWithRetryAsync({\n            retryAttempt: 0,\n            url: call.url,\n            retryStrategy: retryStrategyOptions,\n            functionsConfig: functionsConfig,\n            call: (retryAttempt) => __awaiter(this, void 0, void 0, function* () {\n                var _b, _c;\n                httpDebugger.debugStartHttpRequest();\n                const axiosResponse = yield instance.get(call.url, {\n                    headers: getHeadersJson((_b = options === null || options === void 0 ? void 0 : options.headers) !== null && _b !== void 0 ? _b : [], false),\n                    responseType: options === null || options === void 0 ? void 0 : options.responseType,\n                    cancelToken: (_c = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _c === void 0 ? void 0 : _c.token\n                });\n                const response = {\n                    data: axiosResponse.data,\n                    rawResponse: axiosResponse,\n                    headers: extractHeadersFromAxiosResponse(axiosResponse),\n                    status: axiosResponse.status,\n                    retryStrategy: {\n                        options: retryStrategyOptions,\n                        retryAttempts: retryAttempt\n                    }\n                };\n                httpDebugger.debugSuccessHttpRequest();\n                return response;\n            })\n        });\n    });\n}\nexport function postWithRetryAsync(instance, call, functionsConfig, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const retryStrategyOptions = (_a = options === null || options === void 0 ? void 0 : options.retryStrategy) !== null && _a !== void 0 ? _a : retryHelper.defaultRetryStrategy;\n        return yield runWithRetryAsync({\n            retryAttempt: 0,\n            url: call.url,\n            retryStrategy: retryStrategyOptions,\n            functionsConfig: functionsConfig,\n            call: (retryAttempt) => __awaiter(this, void 0, void 0, function* () {\n                var _b, _c;\n                httpDebugger.debugStartHttpRequest();\n                const axiosResponse = yield instance.post(call.url, call.body, {\n                    headers: getHeadersJson((_b = options === null || options === void 0 ? void 0 : options.headers) !== null && _b !== void 0 ? _b : [], false),\n                    responseType: options === null || options === void 0 ? void 0 : options.responseType,\n                    // required for uploading large files\n                    // https://github.com/axios/axios/issues/1362\n                    maxContentLength: 'Infinity',\n                    maxBodyLength: 'Infinity',\n                    cancelToken: (_c = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _c === void 0 ? void 0 : _c.token\n                });\n                const response = {\n                    data: axiosResponse.data,\n                    rawResponse: axiosResponse,\n                    headers: extractHeadersFromAxiosResponse(axiosResponse),\n                    status: axiosResponse.status,\n                    retryStrategy: {\n                        options: retryStrategyOptions,\n                        retryAttempts: retryAttempt\n                    }\n                };\n                httpDebugger.debugSuccessHttpRequest();\n                return response;\n            })\n        });\n    });\n}\nexport function putWithRetryAsync(instance, call, functionsConfig, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const retryStrategyOptions = (_a = options === null || options === void 0 ? void 0 : options.retryStrategy) !== null && _a !== void 0 ? _a : retryHelper.defaultRetryStrategy;\n        return yield runWithRetryAsync({\n            retryAttempt: 0,\n            url: call.url,\n            retryStrategy: retryStrategyOptions,\n            functionsConfig: functionsConfig,\n            call: (retryAttempt) => __awaiter(this, void 0, void 0, function* () {\n                var _b, _c;\n                httpDebugger.debugStartHttpRequest();\n                const axiosResponse = yield instance.put(call.url, call.body, {\n                    headers: getHeadersJson((_b = options === null || options === void 0 ? void 0 : options.headers) !== null && _b !== void 0 ? _b : [], false),\n                    responseType: options === null || options === void 0 ? void 0 : options.responseType,\n                    // required for uploading large files\n                    // https://github.com/axios/axios/issues/1362\n                    maxContentLength: 'Infinity',\n                    maxBodyLength: 'Infinity',\n                    cancelToken: (_c = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _c === void 0 ? void 0 : _c.token\n                });\n                const response = {\n                    data: axiosResponse.data,\n                    rawResponse: axiosResponse,\n                    headers: extractHeadersFromAxiosResponse(axiosResponse),\n                    status: axiosResponse.status,\n                    retryStrategy: {\n                        options: retryStrategyOptions,\n                        retryAttempts: retryAttempt\n                    }\n                };\n                httpDebugger.debugSuccessHttpRequest();\n                return response;\n            })\n        });\n    });\n}\nexport function patchWithRetryAsync(instance, call, functionsConfig, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const retryStrategyOptions = (_a = options === null || options === void 0 ? void 0 : options.retryStrategy) !== null && _a !== void 0 ? _a : retryHelper.defaultRetryStrategy;\n        return yield runWithRetryAsync({\n            retryAttempt: 0,\n            url: call.url,\n            retryStrategy: retryStrategyOptions,\n            functionsConfig: functionsConfig,\n            call: (retryAttempt) => __awaiter(this, void 0, void 0, function* () {\n                var _b, _c;\n                httpDebugger.debugStartHttpRequest();\n                const axiosResponse = yield instance.patch(call.url, call.body, {\n                    headers: getHeadersJson((_b = options === null || options === void 0 ? void 0 : options.headers) !== null && _b !== void 0 ? _b : [], false),\n                    responseType: options === null || options === void 0 ? void 0 : options.responseType,\n                    // required for uploading large files\n                    // https://github.com/axios/axios/issues/1362\n                    maxContentLength: 'Infinity',\n                    maxBodyLength: 'Infinity',\n                    cancelToken: (_c = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _c === void 0 ? void 0 : _c.token\n                });\n                const response = {\n                    data: axiosResponse.data,\n                    rawResponse: axiosResponse,\n                    headers: extractHeadersFromAxiosResponse(axiosResponse),\n                    status: axiosResponse.status,\n                    retryStrategy: {\n                        options: retryStrategyOptions,\n                        retryAttempts: retryAttempt\n                    }\n                };\n                httpDebugger.debugSuccessHttpRequest();\n                return response;\n            })\n        });\n    });\n}\nexport function deleteWithRetryAsync(instance, call, functionsConfig, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const retryStrategyOptions = (_a = options === null || options === void 0 ? void 0 : options.retryStrategy) !== null && _a !== void 0 ? _a : retryHelper.defaultRetryStrategy;\n        return yield runWithRetryAsync({\n            retryAttempt: 0,\n            url: call.url,\n            retryStrategy: retryStrategyOptions,\n            functionsConfig: functionsConfig,\n            call: (retryAttempt) => __awaiter(this, void 0, void 0, function* () {\n                var _b, _c;\n                httpDebugger.debugStartHttpRequest();\n                const axiosResponse = yield instance.delete(call.url, {\n                    headers: getHeadersJson((_b = options === null || options === void 0 ? void 0 : options.headers) !== null && _b !== void 0 ? _b : [], false),\n                    responseType: options === null || options === void 0 ? void 0 : options.responseType,\n                    // required for uploading large files\n                    // https://github.com/axios/axios/issues/1362\n                    maxContentLength: 'Infinity',\n                    maxBodyLength: 'Infinity',\n                    cancelToken: (_c = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _c === void 0 ? void 0 : _c.token\n                });\n                const response = {\n                    data: axiosResponse.data,\n                    rawResponse: axiosResponse,\n                    headers: extractHeadersFromAxiosResponse(axiosResponse),\n                    status: axiosResponse.status,\n                    retryStrategy: {\n                        options: retryStrategyOptions,\n                        retryAttempts: retryAttempt\n                    }\n                };\n                httpDebugger.debugSuccessHttpRequest();\n                return response;\n            })\n        });\n    });\n}\nexport function createCancelToken() {\n    let canceler;\n    const token = new axios.CancelToken((c) => {\n        // An executor function receives a cancel function as a parameter\n        canceler = c;\n    });\n    return {\n        cancel: (cancelMessage) => canceler(`${retryHelper.requestCancelledMessagePrefix}: ${cancelMessage !== null && cancelMessage !== void 0 ? cancelMessage : 'User cancel'}`),\n        token: token\n    };\n}\nfunction runWithRetryAsync(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            return yield data.call(data.retryAttempt);\n        }\n        catch (error) {\n            const retryResult = retryHelper.getRetryErrorResult({\n                error: error,\n                retryAttempt: data.retryAttempt,\n                retryStrategy: data.retryStrategy\n            });\n            if (retryResult.canRetry) {\n                httpDebugger.debugRetryHttpRequest();\n                // wait time before retrying\n                yield new Promise((resolve) => setTimeout(resolve, retryResult.retryInMs));\n                if (data.functionsConfig.logErrorsToConsole) {\n                    console.warn(`Retry attempt '${data.retryAttempt + 1}' from a maximum of '${retryResult.maxRetries}' retries. Request url: '${data.url}'`);\n                }\n                // retry request\n                return yield runWithRetryAsync({\n                    call: data.call,\n                    retryStrategy: data.retryStrategy,\n                    retryAttempt: data.retryAttempt + 1,\n                    url: data.url,\n                    functionsConfig: data.functionsConfig\n                });\n            }\n            if (data.functionsConfig.logErrorsToConsole) {\n                console.error(`Executing '${data.url}' failed. Request was retried '${data.retryAttempt}' times. `, error);\n            }\n            throw error;\n        }\n    });\n}\nfunction getHeadersJson(headers, addContentTypeHeader) {\n    const headerJson = {};\n    headers.forEach((header) => {\n        headerJson[header.header] = header.value;\n    });\n    if (addContentTypeHeader) {\n        // add default content type header if not present\n        const contentTypeHeader = headers.find((m) => m.header.toLowerCase() === 'Content-Type'.toLowerCase());\n        if (!contentTypeHeader) {\n            headerJson['Content-Type'] = 'application/json';\n        }\n    }\n    return headerJson;\n}\n//# sourceMappingURL=http.functions.js.map","export {};\n//# sourceMappingURL=http.models.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport axios from 'axios';\nimport * as HttpFunctions from './http.functions';\nexport class HttpService {\n    constructor(opts) {\n        this.opts = opts;\n        this.axiosInstance = axios.create(opts === null || opts === void 0 ? void 0 : opts.axiosRequestConfig);\n        this.functionsConfig = this.getFunctionsConfig();\n    }\n    getAsync(call, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield HttpFunctions.getWithRetryAsync(this.axiosInstance, call, this.functionsConfig, options);\n        });\n    }\n    postAsync(call, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield HttpFunctions.postWithRetryAsync(this.axiosInstance, call, this.functionsConfig, options);\n        });\n    }\n    putAsync(call, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield HttpFunctions.putWithRetryAsync(this.axiosInstance, call, this.functionsConfig, options);\n        });\n    }\n    patchAsync(call, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield HttpFunctions.patchWithRetryAsync(this.axiosInstance, call, this.functionsConfig, options);\n        });\n    }\n    deleteAsync(call, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield HttpFunctions.deleteWithRetryAsync(this.axiosInstance, call, this.functionsConfig, options);\n        });\n    }\n    createCancelToken() {\n        return HttpFunctions.createCancelToken();\n    }\n    getFunctionsConfig() {\n        var _a, _b;\n        return {\n            logErrorsToConsole: (_b = (_a = this.opts) === null || _a === void 0 ? void 0 : _a.logErrorsToConsole) !== null && _b !== void 0 ? _b : true\n        };\n    }\n}\n//# sourceMappingURL=http.service.js.map","export {};\n//# sourceMappingURL=ihttp.service.js.map","export * from './ihttp.service';\nexport * from './http.service';\nexport * from './http.models';\nexport * from './http.functions';\nexport * from './http.debugger';\nexport * from './test-http.service';\n//# sourceMappingURL=index.js.map","export class TestHttpService {\n    constructor(config) {\n        this.response = undefined;\n        this.error = undefined;\n        Object.assign(this, config);\n    }\n    getAsync(call, options) {\n        return this.resolveTestCall();\n    }\n    postAsync(call, options) {\n        return this.resolveTestCall();\n    }\n    putAsync(call, options) {\n        return this.resolveTestCall();\n    }\n    patchAsync(call, options) {\n        return this.resolveTestCall();\n    }\n    deleteAsync(call, options) {\n        return this.resolveTestCall();\n    }\n    createCancelToken() {\n        return {\n            cancel: () => { },\n            token: undefined\n        };\n    }\n    resolveTestCall() {\n        const promise = new Promise((resolve, reject) => {\n            if (this.response) {\n                resolve(this.response);\n            }\n            if (this.error) {\n                reject(this.error);\n            }\n            throw Error(`Missing test data`);\n        });\n        return promise;\n    }\n}\n//# sourceMappingURL=test-http.service.js.map","/* Public API */\nexport * from './helpers';\nexport * from './models';\nexport * from './http';\n//# sourceMappingURL=index.js.map","export * from './url.models';\nexport * from './isdk-info';\nexport * from './parameters';\n//# sourceMappingURL=index.js.map","export {};\n//# sourceMappingURL=isdk-info.js.map","export var Parameters;\n(function (Parameters) {\n    class CustomParameter {\n        /**\n         * Custom parameter\n         * @constructor\n         * @param {string} name - Name of the parameter\n         * @param {string} value - Value of the parameter\n         */\n        constructor(name, value) {\n            this.name = name;\n            this.value = value;\n            if (!name) {\n                throw Error(`Name of the custom parameter is not specified`);\n            }\n        }\n        getParam() {\n            return this.name;\n        }\n        getParamValue() {\n            return this.value;\n        }\n    }\n    Parameters.CustomParameter = CustomParameter;\n})(Parameters || (Parameters = {}));\n//# sourceMappingURL=parameters.js.map","export {};\n//# sourceMappingURL=url.models.js.map","import utils from '../utils.js';\nimport httpAdapter from './http.js';\nimport xhrAdapter from './xhr.js';\nimport fetchAdapter from './fetch.js';\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter,\n  fetch: fetchAdapter\n}\n\nutils.forEach(knownAdapters, (fn, value) => {\n  if (fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nconst renderReason = (reason) => `- ${reason}`;\n\nconst isResolvedHandle = (adapter) => utils.isFunction(adapter) || adapter === null || adapter === false;\n\nexport default {\n  getAdapter: (adapters) => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    const rejectedReasons = {};\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      let id;\n\n      adapter = nameOrAdapter;\n\n      if (!isResolvedHandle(nameOrAdapter)) {\n        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];\n\n        if (adapter === undefined) {\n          throw new AxiosError(`Unknown adapter '${id}'`);\n        }\n      }\n\n      if (adapter) {\n        break;\n      }\n\n      rejectedReasons[id || '#' + i] = adapter;\n    }\n\n    if (!adapter) {\n\n      const reasons = Object.entries(rejectedReasons)\n        .map(([id, state]) => `adapter ${id} ` +\n          (state === false ? 'is not supported by the environment' : 'is not available in the build')\n        );\n\n      let s = length ?\n        (reasons.length > 1 ? 'since :\\n' + reasons.map(renderReason).join('\\n') : ' ' + renderReason(reasons[0])) :\n        'as no adapter specified';\n\n      throw new AxiosError(\n        `There is no suitable adapter to dispatch the request ` + s,\n        'ERR_NOT_SUPPORT'\n      );\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n}\n","import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport composeSignals from \"../helpers/composeSignals.js\";\nimport {trackStream} from \"../helpers/trackStream.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport {progressEventReducer, progressEventDecorator, asyncDecorator} from \"../helpers/progressEventReducer.js\";\nimport resolveConfig from \"../helpers/resolveConfig.js\";\nimport settle from \"../core/settle.js\";\n\nconst isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';\nconst isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';\n\n// used only inside the fetch adapter\nconst encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?\n    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :\n    async (str) => new Uint8Array(await new Response(str).arrayBuffer())\n);\n\nconst test = (fn, ...args) => {\n  try {\n    return !!fn(...args);\n  } catch (e) {\n    return false\n  }\n}\n\nconst supportsRequestStream = isReadableStreamSupported && test(() => {\n  let duplexAccessed = false;\n\n  const hasContentType = new Request(platform.origin, {\n    body: new ReadableStream(),\n    method: 'POST',\n    get duplex() {\n      duplexAccessed = true;\n      return 'half';\n    },\n  }).headers.has('Content-Type');\n\n  return duplexAccessed && !hasContentType;\n});\n\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\n\nconst supportsResponseStream = isReadableStreamSupported &&\n  test(() => utils.isReadableStream(new Response('').body));\n\n\nconst resolvers = {\n  stream: supportsResponseStream && ((res) => res.body)\n};\n\nisFetchSupported && (((res) => {\n  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {\n    !resolvers[type] && (resolvers[type] = utils.isFunction(res[type]) ? (res) => res[type]() :\n      (_, config) => {\n        throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);\n      })\n  });\n})(new Response));\n\nconst getBodyLength = async (body) => {\n  if (body == null) {\n    return 0;\n  }\n\n  if(utils.isBlob(body)) {\n    return body.size;\n  }\n\n  if(utils.isSpecCompliantForm(body)) {\n    const _request = new Request(platform.origin, {\n      method: 'POST',\n      body,\n    });\n    return (await _request.arrayBuffer()).byteLength;\n  }\n\n  if(utils.isArrayBufferView(body) || utils.isArrayBuffer(body)) {\n    return body.byteLength;\n  }\n\n  if(utils.isURLSearchParams(body)) {\n    body = body + '';\n  }\n\n  if(utils.isString(body)) {\n    return (await encodeText(body)).byteLength;\n  }\n}\n\nconst resolveBodyLength = async (headers, body) => {\n  const length = utils.toFiniteNumber(headers.getContentLength());\n\n  return length == null ? getBodyLength(body) : length;\n}\n\nexport default isFetchSupported && (async (config) => {\n  let {\n    url,\n    method,\n    data,\n    signal,\n    cancelToken,\n    timeout,\n    onDownloadProgress,\n    onUploadProgress,\n    responseType,\n    headers,\n    withCredentials = 'same-origin',\n    fetchOptions\n  } = resolveConfig(config);\n\n  responseType = responseType ? (responseType + '').toLowerCase() : 'text';\n\n  let composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);\n\n  let request;\n\n  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {\n      composedSignal.unsubscribe();\n  });\n\n  let requestContentLength;\n\n  try {\n    if (\n      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&\n      (requestContentLength = await resolveBodyLength(headers, data)) !== 0\n    ) {\n      let _request = new Request(url, {\n        method: 'POST',\n        body: data,\n        duplex: \"half\"\n      });\n\n      let contentTypeHeader;\n\n      if (utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {\n        headers.setContentType(contentTypeHeader)\n      }\n\n      if (_request.body) {\n        const [onProgress, flush] = progressEventDecorator(\n          requestContentLength,\n          progressEventReducer(asyncDecorator(onUploadProgress))\n        );\n\n        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);\n      }\n    }\n\n    if (!utils.isString(withCredentials)) {\n      withCredentials = withCredentials ? 'include' : 'omit';\n    }\n\n    // Cloudflare Workers throws when credentials are defined\n    // see https://github.com/cloudflare/workerd/issues/902\n    const isCredentialsSupported = \"credentials\" in Request.prototype;\n    request = new Request(url, {\n      ...fetchOptions,\n      signal: composedSignal,\n      method: method.toUpperCase(),\n      headers: headers.normalize().toJSON(),\n      body: data,\n      duplex: \"half\",\n      credentials: isCredentialsSupported ? withCredentials : undefined\n    });\n\n    let response = await fetch(request, fetchOptions);\n\n    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');\n\n    if (supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {\n      const options = {};\n\n      ['status', 'statusText', 'headers'].forEach(prop => {\n        options[prop] = response[prop];\n      });\n\n      const responseContentLength = utils.toFiniteNumber(response.headers.get('content-length'));\n\n      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(\n        responseContentLength,\n        progressEventReducer(asyncDecorator(onDownloadProgress), true)\n      ) || [];\n\n      response = new Response(\n        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {\n          flush && flush();\n          unsubscribe && unsubscribe();\n        }),\n        options\n      );\n    }\n\n    responseType = responseType || 'text';\n\n    let responseData = await resolvers[utils.findKey(resolvers, responseType) || 'text'](response, config);\n\n    !isStreamResponse && unsubscribe && unsubscribe();\n\n    return await new Promise((resolve, reject) => {\n      settle(resolve, reject, {\n        data: responseData,\n        headers: AxiosHeaders.from(response.headers),\n        status: response.status,\n        statusText: response.statusText,\n        config,\n        request\n      })\n    })\n  } catch (err) {\n    unsubscribe && unsubscribe();\n\n    if (err && err.name === 'TypeError' && /Load failed|fetch/i.test(err.message)) {\n      throw Object.assign(\n        new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request),\n        {\n          cause: err.cause || err\n        }\n      )\n    }\n\n    throw AxiosError.from(err, err && err.code, config, request);\n  }\n});\n\n\n","import utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport parseProtocol from '../helpers/parseProtocol.js';\nimport platform from '../platform/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport {progressEventReducer} from '../helpers/progressEventReducer.js';\nimport resolveConfig from \"../helpers/resolveConfig.js\";\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nexport default isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    const _config = resolveConfig(config);\n    let requestData = _config.data;\n    const requestHeaders = AxiosHeaders.from(_config.headers).normalize();\n    let {responseType, onUploadProgress, onDownloadProgress} = _config;\n    let onCanceled;\n    let uploadThrottled, downloadThrottled;\n    let flushUpload, flushDownload;\n\n    function done() {\n      flushUpload && flushUpload(); // flush events\n      flushDownload && flushDownload(); // flush events\n\n      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);\n\n      _config.signal && _config.signal.removeEventListener('abort', onCanceled);\n    }\n\n    let request = new XMLHttpRequest();\n\n    request.open(_config.method.toUpperCase(), _config.url, true);\n\n    // Set the request timeout in MS\n    request.timeout = _config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = _config.transitional || transitionalDefaults;\n      if (_config.timeoutErrorMessage) {\n        timeoutErrorMessage = _config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(_config.withCredentials)) {\n      request.withCredentials = !!_config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = _config.responseType;\n    }\n\n    // Handle progress if needed\n    if (onDownloadProgress) {\n      ([downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true));\n      request.addEventListener('progress', downloadThrottled);\n    }\n\n    // Not all browsers support upload events\n    if (onUploadProgress && request.upload) {\n      ([uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress));\n\n      request.upload.addEventListener('progress', uploadThrottled);\n\n      request.upload.addEventListener('loadend', flushUpload);\n    }\n\n    if (_config.cancelToken || _config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);\n      if (_config.signal) {\n        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(_config.url);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n}\n","'use strict';\n\nimport utils from './utils.js';\nimport bind from './helpers/bind.js';\nimport Axios from './core/Axios.js';\nimport mergeConfig from './core/mergeConfig.js';\nimport defaults from './defaults/index.js';\nimport formDataToJSON from './helpers/formDataToJSON.js';\nimport CanceledError from './cancel/CanceledError.js';\nimport CancelToken from './cancel/CancelToken.js';\nimport isCancel from './cancel/isCancel.js';\nimport {VERSION} from './env/data.js';\nimport toFormData from './helpers/toFormData.js';\nimport AxiosError from './core/AxiosError.js';\nimport spread from './helpers/spread.js';\nimport isAxiosError from './helpers/isAxiosError.js';\nimport AxiosHeaders from \"./core/AxiosHeaders.js\";\nimport adapters from './adapters/adapters.js';\nimport HttpStatusCode from './helpers/HttpStatusCode.js';\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new Axios(defaultConfig);\n  const instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context, {allOwnKeys: true});\n\n  // Copy context to instance\n  utils.extend(instance, context, null, {allOwnKeys: true});\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\n\naxios.AxiosHeaders = AxiosHeaders;\n\naxios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);\n\naxios.getAdapter = adapters.getAdapter;\n\naxios.HttpStatusCode = HttpStatusCode;\n\naxios.default = axios;\n\n// this module should only have a default export\nexport default axios\n","'use strict';\n\nimport CanceledError from './CanceledError.js';\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.');\n    }\n\n    let resolvePromise;\n\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n\n      let i = token._listeners.length;\n\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n\n      return promise;\n    };\n\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n\n      token.reason = new CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  toAbortSignal() {\n    const controller = new AbortController();\n\n    const abort = (err) => {\n      controller.abort(err);\n    };\n\n    this.subscribe(abort);\n\n    controller.signal.unsubscribe = () => this.unsubscribe(abort);\n\n    return controller.signal;\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n\nexport default CancelToken;\n","'use strict';\n\nimport AxiosError from '../core/AxiosError.js';\nimport utils from '../utils.js';\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);\n  this.name = 'CanceledError';\n}\n\nutils.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\nexport default CanceledError;\n","'use strict';\n\nexport default function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n","'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig || {};\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  async request(configOrUrl, config) {\n    try {\n      return await this._request(configOrUrl, config);\n    } catch (err) {\n      if (err instanceof Error) {\n        let dummy = {};\n\n        Error.captureStackTrace ? Error.captureStackTrace(dummy) : (dummy = new Error());\n\n        // slice off the Error: ... line\n        const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, '') : '';\n        try {\n          if (!err.stack) {\n            err.stack = stack;\n            // match without the 2 top stack lines\n          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, ''))) {\n            err.stack += '\\n' + stack\n          }\n        } catch (e) {\n          // ignore the case where \"stack\" is an un-writable property\n        }\n      }\n\n      throw err;\n    }\n  }\n\n  _request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer != null) {\n      if (utils.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        }\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: validators.function,\n          serialize: validators.function\n        }, true);\n      }\n    }\n\n    // Set config.allowAbsoluteUrls\n    if (config.allowAbsoluteUrls !== undefined) {\n      // do nothing\n    } else if (this.defaults.allowAbsoluteUrls !== undefined) {\n      config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;\n    } else {\n      config.allowAbsoluteUrls = true;\n    }\n\n    validator.assertOptions(config, {\n      baseUrl: validators.spelling('baseURL'),\n      withXsrfToken: validators.spelling('withXSRFToken')\n    }, true);\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    // Flatten headers\n    let contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    headers && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift(...requestInterceptorChain);\n      chain.push(...responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nexport default Axios;\n","'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = (new Error()).stack;\n  }\n\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  if (response) {\n    this.response = response;\n    this.status = response.status ? response.status : null;\n  }\n}\n\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils.toJSONObject(this.config),\n      code: this.code,\n      status: this.status\n    };\n  }\n});\n\nconst prototype = AxiosError.prototype;\nconst descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED',\n  'ERR_NOT_SUPPORT',\n  'ERR_INVALID_URL'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(prototype);\n\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== 'isAxiosError';\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.cause = error;\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\nexport default AxiosError;\n","'use strict';\n\nimport utils from '../utils.js';\nimport parseHeaders from '../helpers/parseHeaders.js';\n\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nconst isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());\n\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (isHeaderNameFilter) {\n    value = header;\n  }\n\n  if (!utils.isString(value)) return;\n\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(' ' + header);\n\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite)\n    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else if (utils.isObject(header) && utils.isIterable(header)) {\n      let obj = {}, dest, key;\n      for (const entry of header) {\n        if (!utils.isArray(entry)) {\n          throw TypeError('Object iterator must return a key-value pair');\n        }\n\n        obj[key = entry[0]] = (dest = obj[key]) ?\n          (utils.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]]) : entry[1];\n      }\n\n      setHeaders(obj, valueOrRewrite)\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n\n    while (i--) {\n      const key = keys[i];\n      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\\n');\n  }\n\n  getSetCookie() {\n    return this.get(\"set-cookie\") || [];\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);\n\n// reserved names hotfix\nutils.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {\n  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`\n  return {\n    get: () => value,\n    set(headerValue) {\n      this[mapped] = headerValue;\n    }\n  }\n});\n\nutils.freezeMethods(AxiosHeaders);\n\nexport default AxiosHeaders;\n","'use strict';\n\nimport utils from './../utils.js';\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\nexport default InterceptorManager;\n","'use strict';\n\nimport isAbsoluteURL from '../helpers/isAbsoluteURL.js';\nimport combineURLs from '../helpers/combineURLs.js';\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nexport default function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {\n  let isRelativeUrl = !isAbsoluteURL(requestedURL);\n  if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n","'use strict';\n\nimport transformData from './transformData.js';\nimport isCancel from '../cancel/isCancel.js';\nimport defaults from '../defaults/index.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport adapters from \"../adapters/adapters.js\";\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nexport default function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = AxiosHeaders.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {\n    config.headers.setContentType('application/x-www-form-urlencoded', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || defaults.adapter);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = AxiosHeaders.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = AxiosHeaders.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosHeaders from \"./AxiosHeaders.js\";\n\nconst headersToObject = (thing) => thing instanceof AxiosHeaders ? { ...thing } : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nexport default function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, prop, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({caseless}, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, prop , caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, prop , caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, prop , caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    withXSRFToken: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b , prop) => mergeDeepProperties(headersToObject(a), headersToObject(b),prop, true)\n  };\n\n  utils.forEach(Object.keys({...config1, ...config2}), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n","'use strict';\n\nimport AxiosError from './AxiosError.js';\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nexport default function settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n}\n","'use strict';\n\nimport utils from './../utils.js';\nimport defaults from '../defaults/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nexport default function transformData(fns, response) {\n  const config = this || defaults;\n  const context = response || config;\n  const headers = AxiosHeaders.from(context.headers);\n  let data = context.data;\n\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n\n  headers.normalize();\n\n  return data;\n}\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\nimport transitionalDefaults from './transitional.js';\nimport toFormData from '../helpers/toFormData.js';\nimport toURLEncodedForm from '../helpers/toURLEncodedForm.js';\nimport platform from '../platform/index.js';\nimport formDataToJSON from '../helpers/formDataToJSON.js';\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: ['xhr', 'http', 'fetch'],\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils.isObject(data);\n\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils.isFormData(data);\n\n    if (isFormData) {\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data) ||\n      utils.isReadableStream(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(\n          isFileList ? {'files[]': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (utils.isResponse(data) || utils.isReadableStream(data)) {\n      return data;\n    }\n\n    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': undefined\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {\n  defaults.headers[method] = {};\n});\n\nexport default defaults;\n","'use strict';\n\nexport default {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n","export const VERSION = \"1.11.0\";","'use strict';\n\nimport toFormData from './toFormData.js';\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode(str) {\n  const charMap = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '~': '%7E',\n    '%20': '+',\n    '%00': '\\x00'\n  };\n  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n\n  params && toFormData(params, this, options);\n}\n\nconst prototype = AxiosURLSearchParams.prototype;\n\nprototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\n\nprototype.toString = function toString(encoder) {\n  const _encode = encoder ? function(value) {\n    return encoder.call(this, value, encode);\n  } : encode;\n\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + '=' + _encode(pair[1]);\n  }, '').join('&');\n};\n\nexport default AxiosURLSearchParams;\n","const HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511,\n};\n\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n\nexport default HttpStatusCode;\n","'use strict';\n\nexport default function bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosURLSearchParams from '../helpers/AxiosURLSearchParams.js';\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?(object|Function)} options\n *\n * @returns {string} The formatted url\n */\nexport default function buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || encode;\n\n  if (utils.isFunction(options)) {\n    options = {\n      serialize: options\n    };\n  } \n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n}\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nexport default function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/?\\/$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n}\n","import CanceledError from \"../cancel/CanceledError.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport utils from '../utils.js';\n\nconst composeSignals = (signals, timeout) => {\n  const {length} = (signals = signals ? signals.filter(Boolean) : []);\n\n  if (timeout || length) {\n    let controller = new AbortController();\n\n    let aborted;\n\n    const onabort = function (reason) {\n      if (!aborted) {\n        aborted = true;\n        unsubscribe();\n        const err = reason instanceof Error ? reason : this.reason;\n        controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\n      }\n    }\n\n    let timer = timeout && setTimeout(() => {\n      timer = null;\n      onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT))\n    }, timeout)\n\n    const unsubscribe = () => {\n      if (signals) {\n        timer && clearTimeout(timer);\n        timer = null;\n        signals.forEach(signal => {\n          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);\n        });\n        signals = null;\n      }\n    }\n\n    signals.forEach((signal) => signal.addEventListener('abort', onabort));\n\n    const {signal} = controller;\n\n    signal.unsubscribe = () => utils.asap(unsubscribe);\n\n    return signal;\n  }\n}\n\nexport default composeSignals;\n","import utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.hasStandardBrowserEnv ?\n\n  // Standard browser envs support document.cookie\n  {\n    write(name, value, expires, path, domain, secure) {\n      const cookie = [name + '=' + encodeURIComponent(value)];\n\n      utils.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());\n\n      utils.isString(path) && cookie.push('path=' + path);\n\n      utils.isString(domain) && cookie.push('domain=' + domain);\n\n      secure === true && cookie.push('secure');\n\n      document.cookie = cookie.join('; ');\n    },\n\n    read(name) {\n      const match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n      return (match ? decodeURIComponent(match[3]) : null);\n    },\n\n    remove(name) {\n      this.write(name, '', Date.now() - 86400000);\n    }\n  }\n\n  :\n\n  // Non-standard browser env (web workers, react-native) lack needed support.\n  {\n    write() {},\n    read() {\n      return null;\n    },\n    remove() {}\n  };\n\n","'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === '[]' ? '' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n\n    if (name === '__proto__') return true;\n\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils.isArray(target) ? target.length : name;\n\n    if (isLast) {\n      if (utils.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n\n      return !isNumericKey;\n    }\n\n    if (!target[name] || !utils.isObject(target[name])) {\n      target[name] = [];\n    }\n\n    const result = buildPath(path, value, target[name], index);\n\n    if (result && utils.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n\n    return !isNumericKey;\n  }\n\n  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {\n    const obj = {};\n\n    utils.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n\n    return obj;\n  }\n\n  return null;\n}\n\nexport default formDataToJSON;\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nexport default function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n","'use strict';\n\nimport utils from './../utils.js';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nexport default function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n}\n","import platform from '../platform/index.js';\n\nexport default platform.hasStandardBrowserEnv ? ((origin, isMSIE) => (url) => {\n  url = new URL(url, platform.origin);\n\n  return (\n    origin.protocol === url.protocol &&\n    origin.host === url.host &&\n    (isMSIE || origin.port === url.port)\n  );\n})(\n  new URL(platform.origin),\n  platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)\n) : () => true;\n","// eslint-disable-next-line strict\nexport default null;\n","'use strict';\n\nimport utils from './../utils.js';\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils.toObjectSet([\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n]);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\nexport default rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\n    i = line.indexOf(':');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\n      return;\n    }\n\n    if (key === 'set-cookie') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\nexport default function parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n}\n","import speedometer from \"./speedometer.js\";\nimport throttle from \"./throttle.js\";\nimport utils from \"../utils.js\";\n\nexport const progressEventReducer = (listener, isDownloadStream, freq = 3) => {\n  let bytesNotified = 0;\n  const _speedometer = speedometer(50, 250);\n\n  return throttle(e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e,\n      lengthComputable: total != null,\n      [isDownloadStream ? 'download' : 'upload']: true\n    };\n\n    listener(data);\n  }, freq);\n}\n\nexport const progressEventDecorator = (total, throttled) => {\n  const lengthComputable = total != null;\n\n  return [(loaded) => throttled[0]({\n    lengthComputable,\n    total,\n    loaded\n  }), throttled[1]];\n}\n\nexport const asyncDecorator = (fn) => (...args) => utils.asap(() => fn(...args));\n","import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport isURLSameOrigin from \"./isURLSameOrigin.js\";\nimport cookies from \"./cookies.js\";\nimport buildFullPath from \"../core/buildFullPath.js\";\nimport mergeConfig from \"../core/mergeConfig.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport buildURL from \"./buildURL.js\";\n\nexport default (config) => {\n  const newConfig = mergeConfig({}, config);\n\n  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;\n\n  newConfig.headers = headers = AxiosHeaders.from(headers);\n\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);\n\n  // HTTP basic authentication\n  if (auth) {\n    headers.set('Authorization', 'Basic ' +\n      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))\n    );\n  }\n\n  let contentType;\n\n  if (utils.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // Let the browser set it\n    } else if ((contentType = headers.getContentType()) !== false) {\n      // fix semicolon duplication issue for ReactNative FormData implementation\n      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];\n      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));\n    }\n  }\n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n\n    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {\n      // Add xsrf header\n      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n\n  return newConfig;\n}\n\n","'use strict';\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\nexport default speedometer;\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nexport default function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n","/**\n * Throttle decorator\n * @param {Function} fn\n * @param {Number} freq\n * @return {Function}\n */\nfunction throttle(fn, freq) {\n  let timestamp = 0;\n  let threshold = 1000 / freq;\n  let lastArgs;\n  let timer;\n\n  const invoke = (args, now = Date.now()) => {\n    timestamp = now;\n    lastArgs = null;\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n    fn(...args);\n  }\n\n  const throttled = (...args) => {\n    const now = Date.now();\n    const passed = now - timestamp;\n    if ( passed >= threshold) {\n      invoke(args, now);\n    } else {\n      lastArgs = args;\n      if (!timer) {\n        timer = setTimeout(() => {\n          timer = null;\n          invoke(lastArgs)\n        }, threshold - passed);\n      }\n    }\n  }\n\n  const flush = () => lastArgs && invoke(lastArgs);\n\n  return [throttled, flush];\n}\n\nexport default throttle;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\n// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored\nimport PlatformFormData from '../platform/node/classes/FormData.js';\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? '[' + token + ']' : token;\n  }).join(dots ? '.' : '');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('target must be an object');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (PlatformFormData || FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;\n  const useBlob = _Blob && utils.isSpecCompliantForm(formData);\n\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError('visitor must be a function');\n  }\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (utils.isBoolean(value)) {\n      return value.toString();\n    }\n\n    if (!useBlob && utils.isBlob(value)) {\n      throw new AxiosError('Blob is not supported. Use a Buffer instead.');\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === 'object') {\n      if (utils.endsWith(key, '{}')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils.isArray(value) && isFlatArray(value)) ||\n        ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error('Circular reference detected in ' + path.join('.'));\n    }\n\n    stack.push(value);\n\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils.isObject(obj)) {\n    throw new TypeError('data must be an object');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\nexport default toFormData;\n","'use strict';\n\nimport utils from '../utils.js';\nimport toFormData from './toFormData.js';\nimport platform from '../platform/index.js';\n\nexport default function toURLEncodedForm(data, options) {\n  return toFormData(data, new platform.classes.URLSearchParams(), {\n    visitor: function(value, key, path, helpers) {\n      if (platform.isNode && utils.isBuffer(value)) {\n        this.append(key, value.toString('base64'));\n        return false;\n      }\n\n      return helpers.defaultVisitor.apply(this, arguments);\n    },\n    ...options\n  });\n}\n","\nexport const streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n\n  let pos = 0;\n  let end;\n\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n}\n\nexport const readBytes = async function* (iterable, chunkSize) {\n  for await (const chunk of readStream(iterable)) {\n    yield* streamChunk(chunk, chunkSize);\n  }\n}\n\nconst readStream = async function* (stream) {\n  if (stream[Symbol.asyncIterator]) {\n    yield* stream;\n    return;\n  }\n\n  const reader = stream.getReader();\n  try {\n    for (;;) {\n      const {done, value} = await reader.read();\n      if (done) {\n        break;\n      }\n      yield value;\n    }\n  } finally {\n    await reader.cancel();\n  }\n}\n\nexport const trackStream = (stream, chunkSize, onProgress, onFinish) => {\n  const iterator = readBytes(stream, chunkSize);\n\n  let bytes = 0;\n  let done;\n  let _onFinish = (e) => {\n    if (!done) {\n      done = true;\n      onFinish && onFinish(e);\n    }\n  }\n\n  return new ReadableStream({\n    async pull(controller) {\n      try {\n        const {done, value} = await iterator.next();\n\n        if (done) {\n         _onFinish();\n          controller.close();\n          return;\n        }\n\n        let len = value.byteLength;\n        if (onProgress) {\n          let loadedBytes = bytes += len;\n          onProgress(loadedBytes);\n        }\n        controller.enqueue(new Uint8Array(value));\n      } catch (err) {\n        _onFinish(err);\n        throw err;\n      }\n    },\n    cancel(reason) {\n      _onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  })\n}\n","'use strict';\n\nimport {VERSION} from '../env/data.js';\nimport AxiosError from '../core/AxiosError.js';\n\nconst validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\nvalidators.spelling = function spelling(correctSpelling) {\n  return (value, opt) => {\n    // eslint-disable-next-line no-console\n    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);\n    return true;\n  }\n};\n\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nexport default {\n  assertOptions,\n  validators\n};\n","'use strict'\n\nexport default typeof Blob !== 'undefined' ? Blob : null\n","'use strict';\n\nexport default typeof FormData !== 'undefined' ? FormData : null;\n","'use strict';\n\nimport AxiosURLSearchParams from '../../../helpers/AxiosURLSearchParams.js';\nexport default typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;\n","import URLSearchParams from './classes/URLSearchParams.js'\nimport FormData from './classes/FormData.js'\nimport Blob from './classes/Blob.js'\n\nexport default {\n  isBrowser: true,\n  classes: {\n    URLSearchParams,\n    FormData,\n    Blob\n  },\n  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']\n};\n","const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';\n\nconst _navigator = typeof navigator === 'object' && navigator || undefined;\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n *\n * @returns {boolean}\n */\nconst hasStandardBrowserEnv = hasBrowserEnv &&\n  (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0);\n\n/**\n * Determine if we're running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */\nconst hasStandardBrowserWebWorkerEnv = (() => {\n  return (\n    typeof WorkerGlobalScope !== 'undefined' &&\n    // eslint-disable-next-line no-undef\n    self instanceof WorkerGlobalScope &&\n    typeof self.importScripts === 'function'\n  );\n})();\n\nconst origin = hasBrowserEnv && window.location.href || 'http://localhost';\n\nexport {\n  hasBrowserEnv,\n  hasStandardBrowserWebWorkerEnv,\n  hasStandardBrowserEnv,\n  _navigator as navigator,\n  origin\n}\n","import platform from './node/index.js';\nimport * as utils from './common/utils.js';\n\nexport default {\n  ...utils,\n  ...platform\n}\n","'use strict';\n\nimport bind from './helpers/bind.js';\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\nconst {iterator, toStringTag} = Symbol;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n}\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(toStringTag in val) && !(iterator in val);\n}\n\n/**\n * Determine if a value is an empty object (safely handles Buffers)\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an empty object, otherwise false\n */\nconst isEmptyObject = (val) => {\n  // Early return for non-objects or Buffers to prevent RangeError\n  if (!isObject(val) || isBuffer(val)) {\n    return false;\n  }\n  \n  try {\n    return Object.keys(val).length === 0 && Object.getPrototypeOf(val) === Object.prototype;\n  } catch (e) {\n    // Fallback for any other objects that might cause RangeError with Object.keys()\n    return false;\n  }\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  let kind;\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) || (\n      isFunction(thing.append) && (\n        (kind = kindOf(thing)) === 'formdata' ||\n        // detect form-data instance\n        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')\n      )\n    )\n  )\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\nconst [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Buffer check\n    if (isBuffer(obj)) {\n      return;\n    }\n\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  if (isBuffer(obj)){\n    return null;\n  }\n\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  return typeof self !== \"undefined\" ? self : (typeof window !== 'undefined' ? window : global)\n})();\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  }\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[iterator];\n\n  const _iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = _iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n}\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n}\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    let ret;\n    if ((ret = reducer(descriptor, name, obj)) !== false) {\n      reducedDescriptors[name] = ret || descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n}\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n}\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  }\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n}\n\nconst noop = () => {}\n\nconst toFiniteNumber = (value, defaultValue) => {\n  return value != null && Number.isFinite(value = +value) ? value : defaultValue;\n}\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && isFunction(thing.append) && thing[toStringTag] === 'FormData' && thing[iterator]);\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      //Buffer check\n      if (isBuffer(source)) {\n        return source;\n      }\n\n      if(!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  }\n\n  return visit(obj, 0);\n}\n\nconst isAsyncFn = kindOfTest('AsyncFunction');\n\nconst isThenable = (thing) =>\n  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);\n\n// original code\n// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34\n\nconst _setImmediate = ((setImmediateSupported, postMessageSupported) => {\n  if (setImmediateSupported) {\n    return setImmediate;\n  }\n\n  return postMessageSupported ? ((token, callbacks) => {\n    _global.addEventListener(\"message\", ({source, data}) => {\n      if (source === _global && data === token) {\n        callbacks.length && callbacks.shift()();\n      }\n    }, false);\n\n    return (cb) => {\n      callbacks.push(cb);\n      _global.postMessage(token, \"*\");\n    }\n  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);\n})(\n  typeof setImmediate === 'function',\n  isFunction(_global.postMessage)\n);\n\nconst asap = typeof queueMicrotask !== 'undefined' ?\n  queueMicrotask.bind(_global) : ( typeof process !== 'undefined' && process.nextTick || _setImmediate);\n\n// *********************\n\n\nconst isIterable = (thing) => thing != null && isFunction(thing[iterator]);\n\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isEmptyObject,\n  isReadableStream,\n  isRequest,\n  isResponse,\n  isHeaders,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  isSpecCompliantForm,\n  toJSONObject,\n  isAsyncFn,\n  isThenable,\n  setImmediate: _setImmediate,\n  asap,\n  isIterable\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./lib/index.ts\");\n",""],"names":[],"sourceRoot":""}