{"version":3,"file":"kontent-delivery.umd.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,kBAAmB,GAAIH,GACJ,iBAAZC,QACdA,QAAyB,gBAAID,IAE7BD,EAAsB,gBAAIC,GAC3B,CATD,CASGK,KAAM,I,yMCTI,EAAAC,4BAAsC,iBACtC,EAAAC,+BAAyC,oCACzC,EAAAC,iBAA2B,aAC3B,EAAAC,uBAAiC,iB,2fCH9C,aACA,aACA,Y,qaCFA,gBAEA,UAgBA,iCAWI,WAAAC,CAIoBC,EAIAC,EAIAC,EAIAC,GAZA,KAAAH,OAAAA,EAIA,KAAAC,YAAAA,EAIA,KAAAC,QAAAA,EAIA,KAAAC,eAAAA,EAvBH,KAAAC,0BAAoC,6BAKpC,KAAAC,6BAAuC,oCAmBrD,CAQH,MAAAC,CAAOC,EAAgBC,EAA2BC,GAC9C,OAAKC,KAAKV,OAAOW,OAAUD,KAAKV,OAAOW,MAAMC,yBAGtCF,KAAKV,OAAOW,MAAMC,yBAAyB,CAC9CC,gBAAiBJ,GAAoB,GACrCK,YAAa,EAAAC,UAAUC,gBAAgB,GAAIP,GAC3CF,OAAQA,EACRU,OAAQP,KAAKQ,UAAUV,GACvBA,YAAaA,EACbW,cAAeT,KAAKV,OAAOmB,gBARpB,EAAAJ,UAAUC,gBAAgBN,KAAKU,WAAWZ,GAAeD,EAAQE,EAUhF,CAOA,UAAAY,CAAWb,EAA2Bc,GAClC,MAAMC,EAAqB,GAiB3B,GAfID,GACAC,EAAQC,QAAQF,GAIpBC,EAAQC,KAAKd,KAAKe,kBAGdf,KAAKV,OAAO0B,eACZH,EAAQC,QAAQd,KAAKV,OAAO0B,cAAclB,IAI9Ce,EAAQC,QAAQd,KAAKiB,gBAAgBnB,IAEjCE,KAAKkB,qBAAqBpB,IAAgBE,KAAKmB,qBAAqBrB,GACpE,MAAMsB,MAAM,4DAqBhB,OAjBIpB,KAAKkB,qBAAqBpB,IAAgBE,KAAKV,OAAO+B,eACtDR,EAAQC,KAAKd,KAAKsB,uBAAuBtB,KAAKV,OAAO+B,gBAIrDrB,KAAKmB,qBAAqBrB,IAAgBE,KAAKV,OAAOiC,cACtDV,EAAQC,KAAKd,KAAKsB,uBAAuBtB,KAAKV,OAAOiC,eAIrDvB,KAAKwB,wCAAwC1B,IAC7Ce,EAAQC,KAAK,CACTW,OAAQ,EAAAvC,+BACRwC,MAAO,SAIRb,CACX,CAOgB,iBAAAc,CACZC,EACAC,EACA/B,EACAgC,G,wCAIKhC,IACDA,EAAc,CAAC,GAGdgC,IACDA,EAAgB,CAAC,GAGrB,IACI,aAAa9B,KAAKT,YAAYwC,UAC1B,CACIH,IAAKA,EACLC,KAAMA,GAEV,CACIG,YAAalC,aAAW,EAAXA,EAAakC,YAC1BC,aAAc,OACdC,cAAelC,KAAKV,OAAO4C,cAC3BrB,QAASb,KAAKW,WAAWb,EAAagC,EAAcjB,QAAUiB,EAAcjB,QAAU,K,CAGhG,MAAOsB,GACL,MAAMnC,KAAKoC,iBAAiBD,E,CAEpC,E,CAOgB,gBAAAE,CACZT,EACA9B,EACAgC,G,wCAIKhC,IACDA,EAAc,CAAC,GAGdgC,IACDA,EAAgB,CAAC,GAGrB,IACI,aAAa9B,KAAKT,YAAY+C,SAC1B,CACIV,IAAKA,GAET,CACII,YAAalC,aAAW,EAAXA,EAAakC,YAC1BC,aAAc,OACdC,cAAelC,KAAKV,OAAO4C,cAC3BrB,QAASb,KAAKW,WAAWb,EAAagC,EAAcjB,QAAUiB,EAAcjB,QAAU,K,CAGhG,MAAOsB,GACL,MAAMnC,KAAKoC,iBAAiBD,E,CAEpC,E,CAMU,UAAAzB,CAAWZ,GACjB,OAAOE,KAAKQ,UAAUV,GAAe,IAAME,KAAKV,OAAOmB,aAC3D,CAEU,kBAAA8B,CACNC,EACAC,GAEA,MAAO,CACHD,KAAMA,EACNC,SAAUA,EACVC,gBAAiB1C,KAAK2C,mBAAmBF,EAAS5B,SAClD+B,mBAAoB5C,KAAK6C,qBAAqBJ,EAAS5B,SAE/D,CAMQ,oBAAAK,CAAqBpB,GACzB,YAAmCgD,IAA/BhD,EAAYiD,eACLjD,EAAYiD,iBAGlB/C,KAAKV,OAAO0D,qBAIqC,IAAlDhD,KAAKV,OAAO0D,mBAAmBD,cAKvC,CAEQ,eAAA9B,CAAgBnB,G,MACpB,OAAIA,EAAYmD,cACLnD,EAAYmD,eAGW,QAA9B,EAAAjD,KAAKV,OAAO0D,0BAAkB,eAAEC,eACzBjD,KAAKV,OAAO0D,mBAAmBC,cAGnC,EACX,CAEQ,uCAAAzB,CAAwC1B,GAC5C,YAA6CgD,IAAzChD,EAAYoD,yBACLpD,EAAYoD,2BAGlBlD,KAAKV,OAAO0D,qBAI+C,IAA5DhD,KAAKV,OAAO0D,mBAAmBE,wBAKvC,CAMQ,oBAAA/B,CAAqBrB,GACzB,YAAmCgD,IAA/BhD,EAAYqD,eACLrD,EAAYqD,iBAGlBnD,KAAKV,OAAO0D,qBAIqC,IAAlDhD,KAAKV,OAAO0D,mBAAmBG,cAKvC,CAMQ,SAAA3C,CAAUV,GACd,GAAIE,KAAKkB,qBAAqBpB,GAAc,CACxC,IAAKE,KAAKV,OAAO+B,cACb,MAAMD,MAAM,sCAIhB,OAAIpB,KAAKV,OAAOW,OAASD,KAAKV,OAAOW,MAAMmD,eAChCpD,KAAKV,OAAOW,MAAMmD,eAItBpD,KAAKL,4B,CAIhB,OAAIK,KAAKV,OAAOW,OAASD,KAAKV,OAAOW,MAAMoD,QAChCrD,KAAKV,OAAOW,MAAMoD,QAEtBrD,KAAKN,yBAChB,CAKQ,sBAAA4B,CAAuBgC,GAC3B,IAAKA,EACD,MAAMlC,MAAM,0DAGhB,MAAO,CACHK,OAAQ,gBACRC,MAAO,UAAU4B,IAEzB,CAKQ,cAAAvC,GACJ,MAAO,CACHU,OAAQ,EAAAtC,iBACRuC,MAAO,GAAG1B,KAAKR,QAAQ+D,QAAQvD,KAAKR,QAAQgE,QAAQxD,KAAKR,QAAQiE,UAEzE,CAEQ,gBAAArB,CAAiBD,G,MACrB,IAAIuB,EAQJ,GALIA,EADAvB,EAAMA,MACOA,EAAMA,MAENA,GAGZuB,IAAeA,EAAWC,aAC3B,OAAOxB,EAGX,MAAMyB,EAAuC,QAAnB,EAAAF,EAAWjB,gBAAQ,eAAED,KAE/C,OAAKoB,GAAsBA,EAAkBC,WAItC,IAAI,EAAAC,cAAc,CACrBC,UAAWH,EAAkBC,WAC7BG,QAASJ,EAAkBI,QAC3BC,aAAcL,EAAkBM,cAChCC,UAAWP,EAAkBQ,aAPtBjC,CASf,CAEQ,kBAAAQ,CAAmB9B,GACvB,MAAMwD,EAAwBxD,EAAQyD,KACjCC,GAAMA,EAAE9C,OAAO+C,gBAAkB,EAAApF,uBAAuBoF,eAG7D,SAAIH,GAC+C,MAA3CA,EAAsB3C,MAAM+C,WAKxC,CAEQ,oBAAA5B,CAAqBhC,GACzB,MAAMY,EAASZ,EAAQyD,KAAMC,GAAMA,EAAE9C,OAAO+C,gBAAkB,EAAAvF,4BAA4BuF,eAC1F,OAAO/C,EAASA,EAAOC,WAAQoB,CACnC,E,wFCjXJ,gBAEA,MAAa4B,UAAuD,EAAAC,UAQhE,WAAAtF,CACcC,EACAsF,EACFC,EACAC,GAIR,GAFAC,MAAMzF,EAAQsF,GALJ,KAAAtF,OAAAA,EACA,KAAAsF,aAAAA,EACF,KAAAC,aAAAA,EACA,KAAAC,gBAAAA,EANF,KAAAE,aAAoC,CAAC,GAUtCH,EACD,MAAMzD,MAAM,2CAGhB,IAAK0D,EACD,MAAM1D,MAAM,6CAEpB,CAEA,SAAA6D,G,MAGI,OAAOjF,KAAK4E,aAAaM,gBAAgBlF,KAAKJ,SAA2B,QAAjB,EAAAI,KAAKgF,oBAAY,QAAI,CAAC,EAClF,CAEA,MAAApF,GACI,OAAOmF,MAAMI,mBAAmB,UAAUnF,KAAK6E,yBAAyB7E,KAAK8E,kBACjF,CAEA,GAAAM,CAAIC,GACA,OAAOrF,KAAK4E,aAAanF,eAAe6F,+BAA+BD,EAC3E,EArCJ,gB,4JCJA,gBASA,UAEA,MAAaE,UAA4D,EAAAC,iBAUrE,WAAAnG,CAAsBC,EAAyCsF,GAC3DG,MAAMzF,EAAQsF,GADI,KAAAtF,OAAAA,EAAyC,KAAAsF,aAAAA,EAFrD,KAAAI,aAAwC,CAAC,CAInD,CAMA,iBAAAS,CAAkBC,GAEd,OADA1F,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWC,kBAAkBH,IAC/C1F,IACX,CAMA,wBAAA8F,CAAyBJ,GAErB,OADA1F,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWG,yBAAyBL,IACtD1F,IACX,CAMA,cAAAgG,CAAeC,GAEX,OADAjG,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWM,eAAeD,IAC5CjG,IACX,CAMA,aAAAmG,CAAcC,GAEV,OADApG,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWS,cAAcD,IAC3CpG,IACX,CAEA,SAAAiF,G,MAMI,OAAOjF,KAAK4E,aAAa0B,iBAAiBtG,KAAKJ,SAA2B,QAAjB,EAAAI,KAAKgF,oBAAY,QAAI,CAAC,EACnF,CAEA,MAAApF,GAGI,OAAOmF,MAAMI,mBAFE,SAGnB,CAEA,GAAAC,CAAIC,GACA,OAAOrF,KAAK4E,aAAanF,eAAe8G,yBAAyBlB,EACrE,CAEU,kBAAAmB,CACNC,EACAC,GAKA,MAAO,CACHD,MAAOA,EACPC,UAAWA,EAEnB,EAhFJ,qB,0FCXA,gBAqDA,uBASI,WAAArH,CAAqBC,GAAA,KAAAA,OAAAA,EACjBU,KAAK2G,WAAa,IAAI,EAAAC,WACtB5G,KAAK6G,eAAiB,IAAI,EAAAC,eAC1B9G,KAAK+G,WAAa,IAAI,EAAAC,WAAW1H,GACjCU,KAAKiH,eAAiB,IAAI,EAAAC,eAC1BlH,KAAKmH,aAAe,IAAI,EAAAC,aACxBpH,KAAKqH,qBAAuB,IAAI,EAAAC,qBAChCtH,KAAKuH,WAAa,IAAI,EAAAC,UAC1B,CAEA,cAAAC,CAAejF,GACX,MAAO,CACHiE,MAAOjE,EAAKiE,MAAMrB,IAAKb,GAAMvE,KAAKmH,aAAaO,cAAcnD,IAErE,CAMA,qBAAAoD,CACInF,GAEA,MAAO,CACHiE,MAAOzG,KAAK6G,eAAee,qBAAqBpF,GAChDqF,WAAY7H,KAAK8H,cAActF,EAAKqF,YAE5C,CAMA,wBAAAtB,CACI/D,GAEA,MAAO,CACHiE,MAAOzG,KAAK2G,WAAWoB,iBAAiBvF,GACxCqF,WAAY7H,KAAK8H,cAActF,EAAKqF,YAE5C,CAOA,uBAAAG,CACIxF,GAEA,MAAO,CACHyF,KAAMjI,KAAK2G,WAAWuB,cAAc1F,GAE5C,CAEA,iBAAA2F,CACI3F,GAEA,MAAM4F,EAAcpI,KAAK+G,WAAWsB,SAAuB,CACvDC,YAAaC,OAAOC,OAAOhG,EAAKiG,iBAChCC,UAAWlG,EAAKiE,QAGpB,MAAO,CACHA,MAAO2B,EAAY3B,MACnB6B,YAAaF,EAAYE,YAEjC,CAOA,uBAAAK,CACInG,GAEA,MAAMoG,EAAa5I,KAAK+G,WAAW8B,0BAAwCrG,GAE3E,MAAO,CACHsG,KAAMF,EAAWE,KACjBR,YAAaM,EAAWN,YAEhC,CAOA,wBAAAS,CACIvG,GAEA,MAAM4F,EAAcpI,KAAK+G,WAAWiC,6BAA2CxG,GAE/E,MAAO,CACHiE,MAAO2B,EAAY3B,MACnBoB,WAAY7H,KAAK8H,cAActF,EAAKqF,YACpCS,YAAaF,EAAYE,YAEjC,CAMA,oBAAAW,CACIzG,GAEA,MAAO,CACH0G,SAAUlJ,KAAKiH,eAAekC,YAAY3G,EAAK4G,OAAQ5G,EAAK6G,OAEpE,CAMA,sBAAAC,CACI9G,GAEA,MAAO,CACHiE,MAAOzG,KAAKiH,eAAesC,cAAc/G,EAAKgH,YAC9C3B,WAAY7H,KAAK8H,cAActF,EAAKqF,YAE5C,CAMA,8BAAAvC,CACI9C,GAEA,OAAOxC,KAAKqH,qBAAqBoC,WAAWjH,EAChD,CAEA,qBAAAkH,CAAsBlH,GAClB,MAAO,CACHiE,MAAOjE,EAAKiE,MAAMrB,IAAKb,GAAMvE,KAAKuH,WAAWoC,oBAAoBpF,IAEzE,CAEA,WAAAqF,CAAYpH,GACR,MAAO,CACHiE,MAAOjE,EAAKiE,MAAMrB,IAAKb,GAAMvE,KAAKuH,WAAWoC,oBAAoBpF,IAEzE,CAEQ,aAAAuD,CAAc+B,G,MAClB,MAAO,CACHzD,KAAMyD,EAAmBzD,KACzB0D,MAAOD,EAAmBC,MAC1B7D,MAAO4D,EAAmB5D,MAC1B8D,SAAUF,EAAmBG,UAC7BC,WAA0C,QAA9B,EAAAJ,EAAmBK,mBAAW,QAAI,KAEtD,E,6FC7NJ,gBAEA,6BAAkCtI,GAC9B,OAAO,IAAI,EAAAuI,8BAA8BvI,EAC7C,C,2FCAA,gBAEA,MAAawI,UAA0D,EAAAzF,UAQnE,WAAAtF,CACcC,EACAsF,EACFC,GAIR,GAFAE,MAAMzF,EAAQsF,GAJJ,KAAAtF,OAAAA,EACA,KAAAsF,aAAAA,EACF,KAAAC,aAAAA,EALF,KAAAG,aAAwC,CAAC,GAS1CH,EACD,MAAMzD,MAAM,4DAEpB,CAEA,SAAA6D,G,MAMI,OAAOjF,KAAK4E,aAAayF,cAAcrK,KAAKJ,SAA2B,QAAjB,EAAAI,KAAKgF,oBAAY,QAAI,CAAC,EAChF,CAEA,MAAApF,GACI,MAAMC,EAAS,UAAYG,KAAK6E,aAEhC,OAAOE,MAAMI,mBAAmBtF,EACpC,CAEA,GAAAuF,CAAIC,GACA,OAAOrF,KAAK4E,aAAanF,eAAeuI,wBAAwB3C,EACpE,EArCJ,mB,4fCNA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,Y,4FCHA,gBAEA,MAAaiF,UAA2D,EAAA9E,iBAYpE,WAAAnG,CAAsBC,EAAyCsF,GAC3DG,MAAMzF,EAAQsF,GADI,KAAAtF,OAAAA,EAAyC,KAAAsF,aAAAA,EAJrD,KAAAI,aAAiC,CAAC,EAE3B,KAAAnF,OAAiB,OAIlC,CAEA,SAAAoF,G,MAII,OAHAsF,QAAQC,KACJ,sHAEGxK,KAAK4E,aAAagF,YAAY5J,KAAKJ,SAA2B,QAAjB,EAAAI,KAAKgF,oBAAY,QAAI,CAAC,EAC9E,CAEA,MAAApF,GACI,OAAOmF,MAAMI,mBAAmBnF,KAAKH,OACzC,CAMA,WAAAC,CAAYA,GAER,OADAE,KAAKgF,aAAelF,EACbE,IACX,CAEA,GAAAoF,CAAIC,GACA,OAAOrF,KAAK4E,aAAanF,eAAemK,YAAYvE,EACxD,CAEU,kBAAAmB,CACNC,EACAC,GAEA,MAAO,CACHD,MAAOA,EACPC,UAAWA,EAEnB,EAhDJ,oB,4fCNA,Y,sJCyGA,sBAMI,WAAArH,CAAYmD,GACRxC,KAAKgE,QAAUxB,EAAKwB,QACpBhE,KAAKmE,UAAY3B,EAAK2B,UACtBnE,KAAK+D,UAAYvB,EAAKuB,UACtB/D,KAAKiE,aAAezB,EAAKyB,YAC7B,E,4fCpHJ,aACA,aACA,aACA,aACA,aACA,aACA,W,mJCHA,mBACI,aAAAiE,CAAczF,GACV,OAAOzC,KAAKyK,QAAQhI,EACxB,CAEA,gBAAAsF,CAAiBtF,GACb,OAAOA,EAASiI,MAAMtF,IAAK6C,GAChBjI,KAAKyK,QAAQxC,GAE5B,CAEQ,OAAAwC,CAAQxC,GACZ,IAAKA,EACD,MAAM7G,MAAM,mBAGhB,IAAK6G,EAAK0C,SACN,MAAMvJ,MAAM,4BAGhB,MAAMgI,EAA8D,CAChEwB,SAAU3C,EAAKmB,OAAOwB,SACtBC,GAAI5C,EAAKmB,OAAOyB,GAChBrH,KAAMyE,EAAKmB,OAAO5F,KAClBsH,aAAc7C,EAAKmB,OAAO2B,eAGxBJ,EAA8B,GAwCpC,OAtCqBpC,OAAOyC,oBAAoB/C,EAAK0C,UACxCM,QAASC,IAClB,MAAMC,EAAclD,EAAK0C,SAASO,GAElC,IAAKC,EACD,MAAM/J,MAAM,wBAAwB8J,eAAyBjD,EAAKmB,OAAOwB,aAI7E,MAAM9F,EAAkBoG,EAGlBnL,EAA8C,GAG9CqL,EAAaD,EAAYpL,QAC/B,GAAIqL,EAAY,CACZ,IAAKC,MAAMC,QAAQF,GACf,MAAMhK,MAAM,sDAGhBgK,EAAWH,QAASM,IAChBxL,EAAQe,KAAK,CACT8J,SAAUW,EAAUX,SACpBpH,KAAM+H,EAAU/H,Q,CAK5BmH,EAAS7J,KAAK,CACV8J,SAAU9F,EACV0G,cAAeL,EAAYM,eAC3B1L,QAASA,EACTyD,KAAM2H,EAAY3H,KAClByE,KAAMkD,EAAYlD,SAInB,CACH0C,SAAUA,EACVvB,OAAQA,EAEhB,E,2jBC1EJ,aACA,aACA,aACA,aACA,aACA,aACA,aACA,Y,yGCPA,MAAasC,EAIT,+BAAAC,CAAgCf,GAC5B,MAAO,IAAIA,GACf,EANJ,mBASa,EAAAgB,eAAiB,IAAIF,C,iFCPrB,EAAAlM,QAAoB,CAC7B+D,KAAM,YACNE,QAAS,SACTD,KAAM,2B,qFCFV,gBAUA,kBASI,WAAAnE,CAAsBC,EAAyCsF,GAAzC,KAAAtF,OAAAA,EAAyC,KAAAsF,aAAAA,EAHrD,KAAAe,WAAgC,EAGgE,CAsB1G,mBAAAkG,CAAoBrI,EAAc9B,GAE9B,OADA1B,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWkG,eAAetI,EAAM9B,IAClD1B,IACX,CAOA,aAAA+L,CAAcC,GAEV,OADAhM,KAAK2F,WAAW7E,KAAKkL,GACdhM,IACX,CAMA,cAAAiM,CAAetG,GAEX,OADA3F,KAAK2F,WAAW7E,QAAQ6E,GACjB3F,IACX,CAKA,UAAAW,GACI,OAAOX,KAAK4E,aAAajE,WAAWX,KAAKgF,aAAc,GAC3D,CAKA,WAAAkH,CAAYrL,G,MACR,MAAMsL,EAA8C,QAA/B,EAAAnM,KAAKgF,aAAa/B,qBAAa,QAAI,GAGxD,OAFAkJ,EAAarL,QAAQD,GACrBb,KAAKgF,aAAa/B,cAAgBkJ,EAC3BnM,IACX,CAKA,UAAAoM,CAAW3K,G,MACP,MAAM0K,EAA8C,QAA/B,EAAAnM,KAAKgF,aAAa/B,qBAAa,QAAI,GAGxD,OAFAkJ,EAAarL,KAAKW,GAClBzB,KAAKgF,aAAa/B,cAAgBkJ,EAC3BnM,IACX,CAKA,aAAAqM,CAAczK,GAEV,OADA5B,KAAKsM,UAAY1K,EACV5B,IACX,CAKA,aAAAuM,GACI,OAAOvM,KAAK2F,UAChB,CAMA,WAAA7F,CAAYA,GAER,OADAE,KAAKgF,aAAelF,EACbE,IACX,CAEU,kBAAAmF,CAAmBtF,G,MAEzB,OAAIG,KAAKsM,UACEtM,KAAKsM,UAITtM,KAAK4E,aAAahF,OAAOC,EAAyB,QAAjB,EAAAG,KAAKgF,oBAAY,QAAI,CAAC,EAAGhF,KAAKuM,gBAC1E,CAEU,+BAAAC,GAEFxM,KAAKV,OAAOmN,kBACczM,KAAKuM,gBAAgBjI,KAAMC,IAAK,MACtD,OAAY,QAAZ,EAAAA,EAAEmI,kBAAU,eAAElI,cAAcmI,SAAS,YAAYnI,kBAIjDxE,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWgH,kBAAkB5M,KAAKV,OAAOmN,kBAG9E,CAEU,oCAAAI,GACF7M,KAAKV,OAAOwN,sBACZ9M,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQC,gBAAgB,uBAAwB,YAEjF,E,+JChJJ,gBAEA,gCACI1N,GAEA,OAAO,IAAI,EAAA2N,eAAe3N,EAC9B,C,8FCNA,gBAUA,UAEA,MAAa4N,UAGH,EAAAC,qBASN,WAAA9N,CAAsBC,EAAyCsF,GAC3DG,MAAMzF,EAAQsF,GADI,KAAAtF,OAAAA,EAAyC,KAAAsF,aAAAA,EAFrD,KAAAI,aAAiC,CAAC,CAI5C,CAOA,0BAAAoI,GAEI,OADApN,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWyH,4BAC7BrN,IACX,CAMA,IAAAiI,CAAKA,GAED,OADAjI,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQO,WAAWrF,IACrCjI,IACX,CAOA,KAAA0K,CAAMA,GAEF,OADA1K,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQO,WAAW5C,IACrC1K,IACX,CAMA,UAAAuN,CAAWA,GAEP,OADAvN,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQS,iBAAiBD,IAC3CvN,IACX,CAOA,WAAAyN,CAAYA,GAER,OADAzN,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQS,iBAAiBC,IAC3CzN,IACX,CAMA,cAAA0N,CAAeC,GAEX,OADA3N,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWgI,eAAeD,IAC5C3N,IACX,CAMA,iBAAA6N,CAAkBC,GAEd,OADA9N,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWgH,kBAAkBkB,IAC/C9N,IACX,CAMA,iBAAAyF,CAAkBC,GAEd,OADA1F,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWC,kBAAkBH,IAC/C1F,IACX,CAMA,wBAAA8F,CAAyBJ,GAErB,OADA1F,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWG,yBAAyBL,IACtD1F,IACX,CAEA,SAAAiF,G,MAMI,OAAOjF,KAAK4E,aAAamJ,iBAAiB/N,KAAKJ,SAA2B,QAAjB,EAAAI,KAAKgF,oBAAY,QAAI,CAAC,EACnF,CAEA,MAAApF,GASI,OALAI,KAAKwM,kCAGLxM,KAAK6M,uCAEE9H,MAAMI,mBARE,SASnB,CAEA,GAAAC,CAAIC,GACA,OAAOrF,KAAK4E,aAAanF,eAAesJ,yBAAyB1D,EACrE,CAEU,kBAAAmB,CACNC,EACAC,GAOA,OAFA1G,KAAKgO,UAAUvH,EAAOC,GAEf,CACHD,MAAOA,EACPC,UAAWA,EAEnB,CAEQ,SAAAsH,CACJvH,EACAC,GAMA,MAAMuH,EAAkC,GAGxC,IAAK,MAAMxL,KAAYiE,EACnBuH,EAAgBnN,QACTyH,OAAOC,OAAO/F,EAASD,KAAK8F,aAC1B4F,OAAQ3J,QAAYzB,IAANyB,GACda,IAAKb,GAAMA,IAKxB,IAAK,MAAMuE,KAAQrC,EACVwH,EAAgB3J,KAAMC,GAAMA,EAAE6E,OAAOwB,SAASpG,gBAAkBsE,EAAKM,OAAOwB,SAASpG,gBACtFyJ,EAAgBnN,KAAKgI,GAI7B9I,KAAKmO,eAAeF,EACxB,EAvKJ,sB,uFCZA,gBAWA,UAOA,MAAaG,UAAsD,EAAA5I,iBAU/D,WAAAnG,CACuBC,EACAsF,EACAyJ,GAEnBtJ,MAAMzF,EAAQsF,GAJK,KAAAtF,OAAAA,EACA,KAAAsF,aAAAA,EACA,KAAAyJ,MAAAA,EALb,KAAArJ,aAA6B,CAAC,CAQxC,CAMA,IAAAiD,CAAKA,GAED,OADAjI,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQO,WAAWrF,IACrCjI,IACX,CAOA,KAAA0K,CAAMA,GAEF,OADA1K,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQO,WAAW5C,IACrC1K,IACX,CAMA,UAAAuN,CAAWA,GAEP,OADAvN,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQS,iBAAiBD,IAC3CvN,IACX,CAOA,WAAAyN,CAAYA,GAER,OADAzN,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQS,iBAAiBC,IAC3CzN,IACX,CAMA,iBAAA6N,CAAkBC,GAEd,OADA9N,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWgH,kBAAkBkB,IAC/C9N,IACX,CAEA,SAAAiF,G,MAGI,OAAOjF,KAAK4E,aAAa0J,UAAUtO,KAAKJ,SAA2B,QAAjB,EAAAI,KAAKgF,oBAAY,QAAI,CAAC,EAC5E,CAEA,MAAApF,GACI,MAAMC,EAAS,IAA0B,UAAtBG,KAAKqO,MAAME,OAAqB,SAAW,WAAWvO,KAAKqO,MAAMzD,mBAQpF,OALA5K,KAAKwM,kCAGLxM,KAAK6M,uCAEE9H,MAAMI,mBAAmBtF,EACpC,CAMA,WAAAC,CAAYA,GAER,OADAE,KAAKgF,aAAelF,EACbE,IACX,CAEA,GAAAoF,CAAIC,GACA,OAAOrF,KAAK4E,aAAanF,eAAegI,eAAepC,EAC3D,CAEU,kBAAAmB,CACNC,EACAC,GAEA,MAAO,CACHD,MAAOA,EACPC,UAAWA,EAEnB,EAxGJ,e,4fCnBA,aACA,aACA,aACA,aACA,YACA,aACA,aACA,aACA,aACA,aACA,Y,4fCXA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,Y,yGCVA,gBAGA,sCAIE,WAAArH,CAESmP,GAAA,KAAAA,SAAAA,EALD,KAAAC,YAAiC,GACxB,KAAAC,qBAA+B,QAK5C,CAMJ,eAAAC,CAAgBC,GAId,OAHA5O,KAAKyO,YAAY3N,KACf,IAAI,EAAA8E,WAAWiJ,gBAAgBD,IAE1B5O,IACT,CAMA,OAAA8O,CAAQC,GAKN,OAJA/O,KAAKyO,YAAY3N,KACf,IAAI,EAAA8E,WAAWkG,eAAe,MAAOiD,EAAItK,aAGpCzE,IACT,CASA,iBAAAgP,CAAkBC,EAAWC,EAAWC,EAAeC,GAIrD,OAHApP,KAAKyO,YAAY3N,KACf,IAAI,EAAA8E,WAAWkG,eAAe,OAAQ,CAACmD,EAAGC,EAAGC,EAAOC,GAAQC,KAAK,OAE5DrP,IACT,CAQA,kBAAAsP,CAAmBL,EAAWC,EAAWK,GAQvC,OAPAvP,KAAKwP,YAAY,QAEjBxP,KAAKyO,YAAY3N,KAAK,IAAI,EAAA8E,WAAWkG,eAAe,OAAQ,eAC5D9L,KAAKyO,YAAY3N,KAAK,IAAI,EAAA8E,WAAWkG,eAAe,OAAQmD,EAAExK,aAC9DzE,KAAKyO,YAAY3N,KAAK,IAAI,EAAA8E,WAAWkG,eAAe,OAAQoD,EAAEzK,aAC9DzE,KAAKyO,YAAY3N,KAAK,IAAI,EAAA8E,WAAWkG,eAAe,OAAQyD,EAAE9K,aAEvDzE,IACT,CAMA,mBAAAyP,CAAoBC,GASlB,OARA1P,KAAKyO,YAAY3N,KACf,IAAI,EAAA8E,WAAWkG,eAAe,OAAQ9L,KAAK0O,uBAGzCgB,GACF1P,KAAK2P,WAAWD,GAGX1P,IACT,CAMA,WAAAwP,CAAYI,GAEV,OADA5P,KAAKyO,YAAY3N,KAAK,IAAI,EAAA8E,WAAWkG,eAAe,MAAO8D,IACpD5P,IACT,CAMA,eAAA6P,CAAgBC,GAOd,OANA9P,KAAKyO,YAAY3N,KACf,IAAI,EAAA8E,WAAWkG,eACb,WACgB,aAAhBgE,EAA6B,OAAS,UAGnC9P,IACT,CAMA,WAAA+P,CAAYC,GAIV,OAHAhQ,KAAKyO,YAAY3N,KACf,IAAI,EAAA8E,WAAWkG,eAAe,IAAKkE,EAAQvL,aAEtCzE,IACT,CAQA,UAAA2P,CAAWM,GAIT,OAHAjQ,KAAKyO,YAAY3N,KACf,IAAI,EAAA8E,WAAWkG,eAAe,KAAMmE,IAE/BjQ,IACT,CAMA,UAAAkQ,CAAWd,GAIT,OAHApP,KAAKyO,YAAY3N,KACf,IAAI,EAAA8E,WAAWkG,eAAe,IAAKsD,EAAO3K,aAErCzE,IACT,CAMA,SAAAmQ,CAAUhB,GAER,OADAnP,KAAKyO,YAAY3N,KAAK,IAAI,EAAA8E,WAAWkG,eAAe,IAAKqD,EAAM1K,aACxDzE,IACT,CAKA,SAAAoQ,GACE,OAAOpQ,KAAKyO,WACd,CAKA,cAAA4B,GACE,IAAIC,EAAgB,GASpB,OARAtQ,KAAKyO,YAAYxD,QAAQiD,IAErBoC,EADEA,EAAMC,QAAQ,MAAQ,EAChBD,EAAQ,IAAMpC,EAAOxB,WAErB4D,EAAQ,IAAMpC,EAAOxB,aAI1B4D,CACT,CAKA,MAAA1Q,GACE,OAAOI,KAAKwO,SAAWxO,KAAKqQ,gBAC9B,E,yFCnLF,gBAIA,UAgBA,sBACI,WAAAhR,CAA6BC,GAAA,KAAAA,OAAAA,CAAgC,CAE7D,WAAAkR,CAAsEhO,GAOlE,MAAMiO,EACFjO,EAAKkO,eAAe,EAAA9E,eAAeD,gCAAgCnJ,EAAKmO,UAAU7H,KAAKM,OAAOwB,WAClG,GAAI6F,EAEA,MAAO,CACH3H,KAAM2H,EACNC,eAAgBlO,EAAKkO,eACrBE,cAAepO,EAAKoO,cACpBC,8BAA+BrO,EAAKqO,+BAI5C,MAAMC,EACFtO,EAAKoO,cAAc,EAAAhF,eAAeD,gCAAgCnJ,EAAKmO,UAAU7H,KAAKM,OAAOwB,WAE3FmG,EAAeD,aAAY,EAAZA,EAAchI,KAEnC,IAAKiI,EAED,OAIJ,MAAMrL,EAAmB6C,OAAOyC,oBAAoBxI,EAAKmO,UAAUK,QAAQrG,UAE3E,IAAK,MAAM7F,KAAmBY,EAAkB,CAC5C,MAAMuL,EAAgD,CAClD7H,OAAQ5G,EAAKmO,UAAU7H,KAAKM,OAC5B8H,WAAY1O,EAAKmO,UAAUK,QAAQrG,SAAS7F,GAC5CqM,QAASrM,GAGPsM,EAAgBpR,KAAKyJ,WAAW,CAClCwH,eAAgBA,EAChBnI,KAAMiI,EACNH,cAAepO,EAAKoO,cACpBC,8BAA+BrO,EAAKqO,8BACpCH,eAAgBlO,EAAKkO,iBAIzBK,EAAapG,SAAS7F,GAAmBsM,C,CAG7C,MAAO,CACHtI,KAAMiI,EACNL,eAAgBlO,EAAKkO,eACrBE,cAAepO,EAAKoO,cACpBC,8BAA+BrO,EAAKqO,8BAE5C,CAEQ,UAAApH,CAAWjH,GAOf,MAAM6O,EAAc,EAAAC,WAAWC,iBAA8B,EAAAC,YAAahP,EAAKyO,eAAeC,WAAWjJ,MACzG,GAAIoJ,EAAa,CACb,GAAIA,IAAgB,EAAAG,YAAYC,eAC5B,OAAOzR,KAAK0R,sBAAsB,CAC9BT,eAAgBzO,EAAKyO,eACrBL,cAAepO,EAAKoO,cACpBC,8BAA+BrO,EAAKqO,8BACpCH,eAAgBlO,EAAKkO,iBAI7B,GAAIW,IAAgB,EAAAG,YAAYG,KAC5B,OAAO3R,KAAK4R,eAAepP,EAAKyO,gBAEpC,GAAII,IAAgB,EAAAG,YAAYK,MAC5B,OAAO7R,KAAK8R,iBAAiBtP,EAAKyO,gBAGtC,GAAII,IAAgB,EAAAG,YAAYO,OAC5B,OAAO/R,KAAKgS,iBAAiBxP,EAAKyO,gBAEtC,GAAII,IAAgB,EAAAG,YAAYS,eAC5B,OAAOjS,KAAKkS,yBAAyB1P,EAAKyO,gBAG9C,GAAII,IAAgB,EAAAG,YAAYW,SAC5B,OAAOnS,KAAKoS,mBAAmB5P,EAAKyO,gBAGxC,GAAII,IAAgB,EAAAG,YAAYa,SAE5B,OAAOrS,KAAKsS,mBACR9P,EAAKyO,eACLzO,EAAKkO,eACLlO,EAAKqO,8BACLrO,EAAKoO,eAIb,GAAIS,IAAgB,EAAAG,YAAYe,QAC5B,OAAOvS,KAAKwS,kBAAkBhQ,EAAKyO,gBAGvC,GAAII,IAAgB,EAAAG,YAAYiB,SAC5B,OAAOzS,KAAK0S,mBAAmBlQ,EAAKyO,gBAGxC,GAAII,IAAgB,EAAAG,YAAYmB,OAC5B,OAAO3S,KAAK4S,iBAAiBpQ,EAAKyO,e,CAM1C,OAHA1G,QAAQC,KACJ,0BAA0BhI,EAAKyO,eAAeC,WAAW1N,kBAAkBhB,EAAKyO,eAAeC,WAAWjJ,6CAEvGjI,KAAK6S,iBAAiBrQ,EAAKyO,eACtC,CAEQ,kBAAAqB,CACJrB,EACAP,EACAG,EACAD,GAEA,MAAMM,EAAaD,EAAeC,WAG5B4B,EAAsC,GACtCC,EAAyC,GAIzCC,EAAqC9B,EAAWxP,MAAiBuR,SACnE,4DAEEC,EAAmC7H,MAAM8H,KAAKH,GAAmCI,OACnF,CAACC,EAAKC,KACEA,EAAMC,QAAUD,EAAMC,OAAO3I,UAC7ByI,EAAIvS,KAAKwS,EAAMC,OAAO3I,UAEnByI,GAEX,IAEEG,EAA6B,IAAItC,EAAWzI,iBAAiBgL,KAAK,SAAUC,EAAGC,GACjF,OAAOT,EAAiC3C,QAAQmD,GAAKR,EAAiC3C,QAAQoD,EAClG,GAEA,IAAK,MAAM/I,KAAY4I,EAA4B,CAC/CT,EAA6BjS,KAAK8J,GAElC,MAAMgJ,EAAehD,EAAchG,GAGnC,GAAI5K,KAAK6T,oBAAqB,CAC1B,MAAMC,EAAqB9T,KAAK+T,8BAC5BnJ,EACAsG,EACAR,EACAG,EACAD,GAGJ,GAAIkD,EAEAhB,EAAoBhS,KAAKgT,QAGzB,GAAIF,EAAc,CACd,MAAMI,EAAyBhU,KAAKwQ,YAAY,CAC5CG,UAAWiD,EACXhD,cAAeA,EACfC,8BAA+BA,EAC/BH,eAAgBA,IAIhBsD,GACAlB,EAAoBhS,KAAKkT,EAAuBlL,K,GAQpE,MAAMmL,EAAuBjU,KAAKkU,kBAAkBhD,EAAWiD,QAGzDC,EAAiBpU,KAAKqU,iBAAiBnD,EAAWkD,OAClDD,EAA2BF,EAAqBK,eAGhDC,EAAuBvU,KAAKwU,gBAAgBtD,EAAWxP,MAAOuS,EAAqBQ,iBAEzF,MAAO,CACHN,OAAQA,EACRO,oBAAqB3B,EACrBzK,YAAawK,EACbsB,MAAOA,EACP5Q,KAAM0N,EAAW1N,KACjByE,KAAM,EAAAuJ,YAAYa,SAClB3Q,MAAO6S,EAEf,CAEQ,kBAAAnC,CAAmBnB,G,MACvB,MAAMC,EAAaD,EAAeC,WAClC,OAAO,OAAP,wBACOlR,KAAK2U,aAAa1D,EAAgB,EAAAO,YAAYW,SAAU,IAAMjB,EAAWxP,QAAM,CAClFkT,gBAA4C,QAA3B,EAAA1D,EAAW2D,wBAAgB,QAAI,MAExD,CAEQ,wBAAA3C,CAAyBjB,GAC7B,OAAOjR,KAAK2U,aAAa1D,EAAgB,EAAAO,YAAYS,eAAgB,IAAMhB,EAAeC,WAAWxP,MACzG,CAEQ,gBAAAsQ,CAAiBf,GACrB,OAAOjR,KAAK2U,aAAa1D,EAAgB,EAAAO,YAAYO,OAAQ,IACjB,IAApCd,EAAeC,WAAWxP,MACnB,EACAuP,EAAeC,WAAWxP,OACzBuP,EAAeC,WAAWxP,MAE/B,KAEf,CAEQ,cAAAkQ,CAAeX,GACnB,OAAOjR,KAAK2U,aAAa1D,EAAgB,EAAAO,YAAYG,KAAM,IAAMV,EAAeC,WAAWxP,MAC/F,CAEQ,gBAAAoQ,CAAiBb,GACrB,OAAOjR,KAAK2U,aAAa1D,EAAgB,EAAAO,YAAYK,MAAO,K,MACxD,MAAMiD,EAAiB7D,EAAeC,WAAWxP,MAE3CqT,EAAqC,GAE3C,IAAK,MAAMC,KAAiBF,EAAgB,CACxC,IAAIG,EAAoF,KAGxF,MAAMC,EAAmBlV,KAAKV,OAAO6V,aAC/B,EAAAC,kBAAkBC,mBAAmBL,EAAcpT,IAAK5B,KAAKV,OAAO6V,cACpEH,EAAcpT,IAEpB,GAAIoT,EAAcC,WAAY,CAC1BA,EAAa,CAAC,EAEd,IAAK,MAAMK,KAAsB/M,OAAOgN,KAAKP,EAAcC,YAAa,CACpE,MAAMO,EAAYR,EAAcC,WAAWK,GAE3CL,EAAWK,GAAsB,OAAH,wBACvBE,GAAS,CACZ5T,IAAK,GAAGsT,KAAYM,EAAUlF,S,EAK1C,MAAMmF,EACDzV,KAAKV,OAAOoW,yBAA0BT,aAAU,EAAVA,EAAajV,KAAKV,OAAOoW,0BAA4B,KAE1FC,EAAoC,QAAzB,EAAAF,aAAoB,EAApBA,EAAsB7T,WAAG,QAAIsT,EAExCU,EAAK,+BACJZ,GAAa,CAChBpT,IAAK+T,EACLV,eAGJF,EAAOjU,KAAK8U,E,CAGhB,OAAOb,GAEf,CAEQ,kBAAArC,CAAmBzB,G,MACvB,OAAO,OAAP,wBACOjR,KAAK2U,aAAa1D,EAAgB,EAAAO,YAAYiB,SAAU,IAAMxB,EAAeC,WAAWxP,QAAM,CACjG8J,cAAuD,QAAxC,EAAAyF,EAAeC,WAAWzF,sBAAc,QAAI,IAEnE,CAEQ,gBAAAoH,CAAiB5B,GACrB,OAAOjR,KAAK2U,aAAa1D,EAAgB,EAAAO,YAAYqE,QAAS,IAAM5E,EAAeC,WAAWxP,MAClG,CAEQ,gBAAAkR,CACJ3B,GAGA,GAAIjR,KAAKV,OAAOwW,gBAAiB,CAC7B,MAAMC,EAAuB/V,KAAKV,OAAOwW,gBAAgB7E,GAEzD,GAAI8E,EACA,OAAO/V,KAAK2U,aAAa1D,EAAgB,EAAAO,YAAYmB,OAAQ,IAAMoD,E,CAI3E,OAAO/V,KAAK2U,aAAa1D,EAAgB,EAAAO,YAAYmB,OAAQ,IAAM1B,EAAeC,WAAWxP,MACjG,CAEQ,iBAAA8Q,CAAkBvB,GACtB,OAAOjR,KAAK2U,aAAa1D,EAAgB,EAAAO,YAAYe,QAAS,IAAMtB,EAAeC,WAAWxP,MAClG,CAEQ,qBAAAgQ,CAAsBlP,GAO1B,MAAM8F,EAA8B,GAG9BoM,EAAsBlS,EAAKyO,eAAeC,WAAWxP,MAE3D,IAAK,MAAMkJ,KAAY8J,EACnB,GAAI1U,KAAK6T,oBAAqB,CAC1B,MAAMmC,EAAahW,KAAK+T,8BACpBnJ,EACApI,EAAKyO,eAAeC,WACpB1O,EAAKkO,eACLlO,EAAKqO,8BACLrO,EAAKoO,eAELoF,GAEA1N,EAAYxH,KAAKkV,E,CAK7B,OAAO,OAAP,wBACOhW,KAAK2U,aAAanS,EAAKyO,eAAgB,EAAAO,YAAYC,eAAgB,IAAMiD,IAAoB,CAChGpM,YAAaA,GAErB,CAEQ,6BAAAyL,CACJnJ,EACAuG,EACAT,EACAuF,EACArF,GAEA,MAAMsF,EAAkB,EAAAtK,eAAeD,gCAAgCf,GAGjE6F,EAAgBC,EAAewF,GAErC,GAAIzF,EAEA,OAAOA,EAGX,MAAMK,EAAeF,EAAcsF,GAEnC,GAAID,EAA2BtJ,SAAS/B,GACpC,OAAOkG,aAAY,EAAZA,EAAchI,KAMzB,GAHAmN,EAA2BnV,KAAK8J,IAG3BkG,EACD,OAGJ,IAAIqF,EAGJ,MAAMnC,EAAyBhU,KAAKwQ,YAAY,CAC5CG,UAAWG,EACXF,cAAeA,EACfC,8BAA+BoF,EAC/BvF,eAAgBA,IAUpB,OAPIsD,IACAmC,EAAmBnC,EAAuBlL,KAG1C4H,EAAewF,GAAmBC,GAG/BA,CACX,CAEQ,gBAAA9B,CAAiB+B,GACrB,MAAMhC,EAAiB,GAEvB,IAAK,MAAMiC,KAAU9N,OAAOgN,KAAKa,GAAY,CACzC,MAAME,EAAUF,EAAUC,GAC1BjC,EAAMtT,KAAK,CACP8J,SAAU0L,EAAQ1L,SAClByL,OAAQA,EACRE,QAASD,EAAQE,SACjBvO,KAAMqO,EAAQrO,M,CAItB,OAAOmM,CACX,CAEQ,eAAAI,CAAgBD,EAAsBkC,GAC1C,IAAK,MAAMC,KAAuBD,EAE1BC,EAAoBC,SAAWD,EAAoBE,cACnDrC,EAAeA,EAAasC,QACxB,IAAIC,OAAOJ,EAAoBE,YAAa,KAC5CF,EAAoBC,SAKhC,OAAOpC,CACX,CAEQ,iBAAAL,CAAkB6C,G,UAItB,MAAM5C,EAA2B,GAC3BM,EAA6C,GAEnD,IAAK,MAAMuC,KAAWzO,OAAOgN,KAAKwB,GAAa,CAC3C,MAAME,EAAWF,EAAWC,GAGtBxI,EAAmBxO,KAAKV,OAAO6V,aAC/B,EAAAC,kBAAkBC,mBAAmB4B,EAASrV,IAAK5B,KAAKV,OAAO6V,cAC/D8B,EAASrV,IAEfuS,EAAOrT,KAAK,CACRoW,YAAiC,QAApB,EAAAD,EAASC,mBAAW,QAAI,KACrCF,QAASC,EAASE,SAClBvV,IAAK4M,EACLY,OAAuB,QAAf,EAAA6H,EAAS7H,cAAM,QAAI,KAC3BD,MAAqB,QAAd,EAAA8H,EAAS9H,aAAK,QAAI,OAG7BsF,EAAgB3T,KAAK,CACjB8V,YAAaK,EAASrV,IACtB+U,OAAQnI,G,CAIhB,MAAO,CACHiG,gBAAiBA,EACjBH,eAAgBH,EAExB,CAEQ,YAAAQ,CACJ1D,EACAhJ,EACAmP,GAEA,MAAO,CACH5T,KAAMyN,EAAeC,WAAW1N,KAChCyE,KAAMA,EACNvG,MAAO0V,IAEf,CAEQ,iBAAAvD,GACJ,OAAK7T,KAAKV,OAAO+X,6BAGkC,QAA5CrX,KAAKV,OAAO+X,2BACvB,E,0FCpfJ,gBASA,UAEA,MAAaC,UAAyD,EAAA9R,iBAelE,WAAAnG,CAAsBC,EAAyCsF,GAC3DG,MAAMzF,EAAQsF,GADI,KAAAtF,OAAAA,EAAyC,KAAAsF,aAAAA,EAJ5C,KAAA2S,SAAmB,YAE5B,KAAAvS,aAAsC,CAAC,CAIjD,CAMA,cAAAgB,CAAeC,GAEX,OADAjG,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWM,eAAeD,IAC5CjG,IACX,CAMA,aAAAmG,CAAcC,GAEV,OADApG,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWS,cAAcD,IAC3CpG,IACX,CAEA,SAAAiF,G,MAMI,OAAOjF,KAAK4E,aAAa4S,aAAaxX,KAAKJ,SAA2B,QAAjB,EAAAI,KAAKgF,oBAAY,QAAI,CAAC,EAC/E,CAEA,MAAApF,GACI,MAAMC,EAAS,IAAMG,KAAKuX,SAE1B,OAAOxS,MAAMI,mBAAmBtF,EACpC,CAMA,WAAAC,CAAYA,GAER,OADAE,KAAKgF,aAAelF,EACbE,IACX,CAEA,GAAAoF,CAAIC,GACA,OAAOrF,KAAK4E,aAAanF,eAAekI,sBAAsBtC,EAClE,CAEU,kBAAAmB,CACNC,EACAC,GAKA,MAAO,CACHD,MAAOA,EACPC,UAAWA,EAEnB,EA5EJ,kB,qJCVA,qBACI,aAAAgB,CAAcjF,GACV,MAAO,CACH2G,OAAQ,CACJyB,GAAIpI,EAAS2G,OAAOyB,GACpBrH,KAAMf,EAAS2G,OAAO5F,KACtBoH,SAAUnI,EAAS2G,OAAOwB,SAC1B6M,SAAUhV,EAAS2G,OAAOqO,SAC1BxP,KAAMxF,EAAS2G,OAAOnB,KACtBsF,WAAY9K,EAAS2G,OAAOmE,WAC5BmK,SAAUjV,EAAS2G,OAAOsO,SAC1BC,aAAclV,EAAS2G,OAAOwO,cAC9B9M,aAAcrI,EAAS2G,OAAO2B,eAG1C,E,wFCfJ,uBACI,oBAAAnD,CAAqBnF,GACjB,OAAOA,EAASoV,UAAUzS,IAAKqS,GACpBzX,KAAK8X,YAAYL,GAEhC,CAEQ,WAAAK,CAAYL,GAChB,IAAKA,EACD,MAAMrW,MAAM,uBAGhB,MAAO,CACHgI,OAAQ,CACJwB,SAAU6M,EAASrO,OAAOwB,SAC1BC,GAAI4M,EAASrO,OAAOyB,GACpBrH,KAAMiU,EAASrO,OAAO5F,MAGlC,E,2jBCtBJ,aACA,aACA,aACA,Y,yJCDA,gBAUA,UAEA,MAAauU,UAGH,EAAA5K,qBASN,WAAA9N,CAAsBC,EAAyCsF,GAC3DG,MAAMzF,EAAQsF,GADI,KAAAtF,OAAAA,EAAyC,KAAAsF,aAAAA,EAFrD,KAAAI,aAAqC,CAAC,CAIhD,CAMA,IAAAiD,CAAKA,GAED,OADAjI,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQO,WAAWrF,IACrCjI,IACX,CAOA,KAAA0K,CAAMA,GAEF,OADA1K,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQO,WAAW5C,IACrC1K,IACX,CAMA,UAAAuN,CAAWA,GAEP,OADAvN,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQS,iBAAiBD,IAC3CvN,IACX,CAOA,WAAAyN,CAAYA,GAER,OADAzN,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQS,iBAAiBC,IAC3CzN,IACX,CAMA,iBAAA6N,CAAkBC,GAEd,OADA9N,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWgH,kBAAkBkB,IAC/C9N,IACX,CAMA,iBAAAyF,CAAkBC,GAEd,OADA1F,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWC,kBAAkBH,IAC/C1F,IACX,CAMA,wBAAA8F,CAAyBJ,GAErB,OADA1F,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWG,yBAAyBL,IACtD1F,IACX,CAEA,SAAAiF,G,MAMI,OAAOjF,KAAK4E,aAAaoT,aAAahY,KAAKJ,SAA2B,QAAjB,EAAAI,KAAKgF,oBAAY,QAAI,CAAC,EAC/E,CAEA,MAAApF,GASI,OALAI,KAAKwM,kCAGLxM,KAAK6M,uCAEE9H,MAAMI,mBARE,cASnB,CAMA,WAAArF,CAAYA,GAER,OADAE,KAAKgF,aAAelF,EACbE,IACX,CAEA,GAAAoF,CAAIC,GACA,OAAOrF,KAAK4E,aAAanF,eAAe0I,kBAAkB9C,EAC9D,CAEU,kBAAAmB,CACNC,EACAC,GASA,OAJI1G,KAAKiY,gBACLjY,KAAKkY,cAAczR,EAAOC,GAGvB,CACHD,MAAOA,EACPC,UAAWA,EAEnB,CAEQ,aAAAwR,CACJzR,EACAC,GAMA,MAAMyR,EAA2C,GAGjD,IAAK,MAAM1V,KAAYiE,EACnByR,EAAyBrX,QAClByH,OAAOC,OAAO/F,EAASD,KAAK8F,aAC1B4F,OAAQ3J,QAAYzB,IAANyB,GACda,IAAKb,GAAMA,IAKxB,IAAK,MAAMuE,KAAQrC,EAEV0R,EAAyB7T,KACrBC,GAAMA,EAAE6E,OAAOwB,SAASpG,gBAAkBsE,EAAKM,OAAOwB,SAASpG,gBAGpE2T,EAAyBrX,KAAKgI,GAItC9I,KAAKmO,eAAegK,EACxB,CAEQ,YAAAF,GACJ,MAAgD,WAA5CjY,KAAKV,OAAO+X,8BAI6B,IAAzCrX,KAAKgF,aAAaoT,kBAK1B,EA/KJ,kB,mJCXA,mBACI,mBAAAzO,CAAoB0O,G,QAChB,MAAMC,EAAiBD,EAAkB7V,KAAK4G,OAExCuB,EAAoD0N,EAAkB7V,KAAKmI,SAC3E0N,EAAkB7V,KAAKmI,SACvB,CAAC,EAEP,MAAO,CACH4N,WAAYF,EAAkBG,YAC9BC,UAAWJ,EAAkBI,UAC7BjW,KAAM,CACFmI,SAAUA,EACVvB,OAAQ,CACJwB,SAAU0N,EAAe1N,SACzB2C,WAAY+K,EAAe/K,WAC3B1C,GAAIyN,EAAezN,GACnB4M,SAAUa,EAAeb,SACzB3M,aAAcwN,EAAevN,cAC7BvH,KAAM8U,EAAe9U,KACrBkV,iBAAkBJ,EAAeK,kBACjC1Q,KAAMqQ,EAAerQ,KACrB0P,aAA0C,QAA5B,EAAAW,EAAeV,qBAAa,QAAI,KAC9CF,SAAiC,QAAvB,EAAAY,EAAeZ,gBAAQ,QAAI,OAIrD,E,8JC5BJ,gBAUA,UAEA,MAAakB,UAA8D,EAAAjU,UAUvE,WAAAtF,CAAsBC,EAAyCsF,GAC3DG,MAAMzF,EAAQsF,GADI,KAAAtF,OAAAA,EAAyC,KAAAsF,aAAAA,EAJ5C,KAAA2S,SAAmB,YAE5B,KAAAvS,aAAsC,CAAC,CAIjD,CAMA,IAAAiD,CAAKA,GAED,OADAjI,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQO,WAAWrF,IACrCjI,IACX,CAMA,UAAAuN,CAAWA,GAEP,OADAvN,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQS,iBAAiBD,IAC3CvN,IACX,CAMA,iBAAA6N,CAAkBC,GAEd,OADA9N,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWgH,kBAAkBkB,IAC/C9N,IACX,CAEA,SAAAiF,G,MAMI,OAHAsF,QAAQC,KACJ,sHAEGxK,KAAK4E,aAAaiU,eAAe7Y,KAAKJ,SAA2B,QAAjB,EAAAI,KAAKgF,oBAAY,QAAI,CAAC,EACjF,CAEA,MAAApF,GACI,MAAMC,EAAS,IAAMG,KAAKuX,SAE1B,OAAOxS,MAAMI,mBAAmBtF,EACpC,CAMA,WAAAC,CAAYA,GAER,OADAE,KAAKgF,aAAelF,EACbE,IACX,CAEA,GAAAoF,CAAIC,GACA,OAAOrF,KAAK4E,aAAanF,eAAeiK,sBAAsBrE,EAClE,EAnEJ,uB,wFCXA,uBACI,WAAA8D,CACI2P,EACAC,GAEA,IAAKD,EACD,MAAM1X,MAAM,wDAGhB,IAAK2X,EACD,MAAM3X,MAAM,uDAGhB,IAAKiK,MAAMC,QAAQyN,GACf,MAAM3X,MAAM,wDAYhB,MAAO,CACHgI,OAVyE,CACzE5F,KAAMsV,EAAetV,KACrBoH,SAAUkO,EAAelO,SACzBC,GAAIiO,EAAejO,GACnBC,aAAcgO,EAAe/N,eAO7B1B,MAJkCrJ,KAAKgZ,iBAAiBD,GAMhE,CAEA,aAAAxP,CAAcC,GACV,IAAKA,EACD,MAAMpI,MAAM,4DAGhB,IAAKiK,MAAMC,QAAQ9B,GACf,MAAMpI,MAAM,4EAGhB,MAAM6X,EAAwD,GAM9D,OAJAzP,EAAWyB,QAAS/B,IAChB+P,EAAiBnY,KAAKd,KAAKmJ,YAAYD,EAASE,OAAQF,EAASG,UAG9D4P,CACX,CAMQ,gBAAAD,CAAiBE,GACrB,GAA0B,IAAtBA,EAAWC,OACX,MAAO,GAGX,MAAMC,EAAqC,GAY3C,OAVAF,EAAWjO,QAAS5B,IAChB,MAAMgQ,EAA8B,CAChCzO,SAAUvB,EAAMuB,SAChBpH,KAAM6F,EAAM7F,KACZ6F,MAAOrJ,KAAKgZ,iBAAiB3P,EAAMA,QAGvC+P,EAAiBtY,KAAKuY,KAGnBD,CACX,E,eCzEJ,IAAiBrM,E,kEAAjB,SAAiBA,GACb,MACMuM,EAAuB,GAEvBC,EAAgC3K,IAClC,IAAKA,EACD,OAAO0K,EAGX,GAAIjO,MAAMC,QAAQsD,GAAQ,CACtB,IAAIlN,EAAQ,GAEZ,IAAK,IAAI8X,EAAI,EAAGA,EAAI5K,EAAMuK,OAAQK,IAC9B9X,GAAgBkN,EAAM4K,GAAG/U,WAErB+U,IAAM5K,EAAMuK,OAAS,IAErBzX,GAhBe,KAoBvB,OAAOA,C,CAIX,OAAOkN,EAAMnK,YAGJ,EAAA6I,WAAb,MACI,WAAAjO,CAAmB4I,GAAA,KAAAA,KAAAA,CAA0B,CAE7C,QAAAyE,GACI,OAAIrB,MAAMC,QAAQtL,KAAKiI,MAEZ,mBAAmBsR,EAA6BvZ,KAAKiI,QAIzD,eAAesR,EAA6BvZ,KAAKiI,OAC5D,GAGS,EAAAuF,iBAAb,MACI,WAAAnO,CAAmBkO,GAAA,KAAAA,WAAAA,CAAgC,CAEnD,QAAAb,GACI,OAAIrB,MAAMC,QAAQtL,KAAKuN,YAEZ,yBAAyBgM,EAA6BvZ,KAAKuN,cAI/D,qBAAqBgM,EAA6BvZ,KAAKuN,aAClE,GAGS,EAAAkM,YAAb,MACI,WAAApa,CAAmB8R,GAAA,KAAAA,QAAAA,CAAkB,CAErC,QAAAzE,GACI,MAAO,GAAG1M,KAAKmR,QAAQuI,eAC3B,GAGS,EAAAC,eAAb,MACI,WAAAta,CAAmB8R,GAAA,KAAAA,QAAAA,CAAkB,CAErC,QAAAzE,GACI,MAAO,GAAG1M,KAAKmR,QAAQuI,gBAC3B,GAGS,EAAAE,aAAb,MACI,WAAAva,CAAmB8R,EAAwBzP,GAAxB,KAAAyP,QAAAA,EAAwB,KAAAzP,MAAAA,CAAgB,CAE3D,QAAAgL,GACI,MAAO,GAAG1M,KAAKmR,QAAQuI,cAAc1Z,KAAK6Z,iBAC9C,CAEQ,aAAAA,GACJ,OAAK7Z,KAAK0B,MAIH1B,KAAK0B,MAHD4X,CAIf,GAGS,EAAAtM,gBAAb,MACI,WAAA3N,CAAmB8R,EAAwBzP,GAAxB,KAAAyP,QAAAA,EAAwB,KAAAzP,MAAAA,CAAgB,CAE3D,QAAAgL,GACI,MAAO,GAAG1M,KAAKmR,QAAQuI,eAAe1Z,KAAK6Z,iBAC/C,CAEQ,aAAAA,GACJ,OAAK7Z,KAAK0B,MAIH1B,KAAK0B,MAHD4X,CAIf,GAGS,EAAAQ,UAAb,MACI,WAAAza,CAAmB8R,EAAwB3I,GAAxB,KAAA2I,QAAAA,EAAwB,KAAA3I,OAAAA,CAAmB,CAE9D,QAAAkE,GACI,MAAO,GAAG1M,KAAKmR,QAAQuI,eAAe1Z,KAAK6Z,iBAC/C,CAEQ,aAAAA,GACJ,OAAK7Z,KAAKwI,QAAW6C,MAAMC,QAAQtL,KAAKwI,QAIjCxI,KAAKwI,OAAOpD,IAAKb,GAAMA,EAAEmV,QAAQrK,KAAK,KAHlCiK,CAIf,GAGS,EAAAS,UAAb,MACI,WAAA1a,CAAmB8R,EAAwB3I,GAAxB,KAAA2I,QAAAA,EAAwB,KAAA3I,OAAAA,CAAmB,CAE9D,QAAAkE,GACI,MAAO,GAAG1M,KAAKmR,QAAQuI,eAAe1Z,KAAK6Z,iBAC/C,CAEQ,aAAAA,GACJ,OAAK7Z,KAAKwI,QAAW6C,MAAMC,QAAQtL,KAAKwI,QAIjCxI,KAAKwI,OAAOpD,IAAKb,GAAMA,EAAEmV,QAAQrK,KAAK,KAHlCiK,CAIf,GAGS,EAAAU,eAAb,MACI,WAAA3a,CAAmB8R,EAAwB3I,GAAxB,KAAA2I,QAAAA,EAAwB,KAAA3I,OAAAA,CAAmB,CAE9D,QAAAkE,GACI,MAAO,GAAG1M,KAAKmR,QAAQuI,oBAAoB1Z,KAAK6Z,iBACpD,CAEQ,aAAAA,GACJ,OAAK7Z,KAAKwI,QAAW6C,MAAMC,QAAQtL,KAAKwI,QAIjCxI,KAAKwI,OAAOpD,IAAKb,GAAMA,EAAEmV,QAAQrK,KAAK,KAHlCiK,CAIf,GAGS,EAAAW,kBAAb,MACI,WAAA5a,CAAmB8R,EAAwBzP,GAAxB,KAAAyP,QAAAA,EAAwB,KAAAzP,MAAAA,CAAyB,CAEpE,QAAAgL,GACI,MAAO,GAAG1M,KAAKmR,QAAQuI,cAAc1Z,KAAK6Z,iBAC9C,CAEQ,aAAAA,GACJ,OAAK7Z,KAAK0B,MAIH1B,KAAK0B,MAHD4X,CAIf,GAGS,EAAAY,yBAAb,MACI,WAAA7a,CAAmB8R,EAAwBzP,GAAxB,KAAAyP,QAAAA,EAAwB,KAAAzP,MAAAA,CAAyB,CAEpE,QAAAgL,GACI,MAAO,GAAG1M,KAAKmR,QAAQuI,eAAe1Z,KAAK6Z,iBAC/C,CAEA,aAAAA,GACI,OAAK7Z,KAAK0B,MAIH1B,KAAK0B,MAHD4X,CAIf,GAGS,EAAAa,SAAb,MACI,WAAA9a,CAAmB8R,EAAwB3I,GAAxB,KAAA2I,QAAAA,EAAwB,KAAA3I,OAAAA,CAAmB,CAE9D,QAAAkE,GACI,MAAO,GAAG1M,KAAKmR,QAAQuI,cAAc1Z,KAAK6Z,iBAC9C,CAEQ,aAAAA,GACJ,OAAK7Z,KAAKwI,QAAW6C,MAAMC,QAAQtL,KAAKwI,QAIjCxI,KAAKwI,OACPpD,IAAKb,GACKA,EAAEmV,QAEZrK,KAAK,KAPCiK,CAQf,GAGS,EAAAc,YAAb,MACI,WAAA/a,CAAmB8R,EAAwB3I,GAAxB,KAAA2I,QAAAA,EAAwB,KAAA3I,OAAAA,CAAmB,CAE9D,QAAAkE,GACI,MAAO,GAAG1M,KAAKmR,QAAQuI,eAAe1Z,KAAK6Z,iBAC/C,CAEQ,aAAAA,GACJ,OAAK7Z,KAAKwI,QAAW6C,MAAMC,QAAQtL,KAAKwI,QAIjCxI,KAAKwI,OACPpD,IAAKb,GACKA,EAAEmV,QAEZrK,KAAK,KAPCiK,CAQf,GAGS,EAAAe,eAAb,MACI,WAAAhb,CAAmB8R,EAAwBzP,GAAxB,KAAAyP,QAAAA,EAAwB,KAAAzP,MAAAA,CAAyB,CAEpE,QAAAgL,GACI,MAAO,GAAG1M,KAAKmR,QAAQuI,cAAc1Z,KAAK6Z,iBAC9C,CAEQ,aAAAA,GACJ,OAAK7Z,KAAK0B,MAGH1B,KAAK0B,MAFD4X,CAGf,GAGS,EAAAgB,sBAAb,MACI,WAAAjb,CAAmB8R,EAAwBzP,GAAxB,KAAAyP,QAAAA,EAAwB,KAAAzP,MAAAA,CAAyB,CAEpE,QAAAgL,GACI,MAAO,GAAG1M,KAAKmR,QAAQuI,eAAe1Z,KAAK6Z,iBAC/C,CAEQ,aAAAA,GACJ,OAAK7Z,KAAK0B,MAIH1B,KAAK0B,MAHD4X,CAIf,GAGS,EAAAiB,YAAb,MACI,WAAAlb,CAAmB8R,EAAwBqJ,EAAoCC,GAA5D,KAAAtJ,QAAAA,EAAwB,KAAAqJ,WAAAA,EAAoC,KAAAC,YAAAA,CAA+B,CAE9G,QAAA/N,GACI,MAAO,GAAG1M,KAAKmR,QAAQuI,iBAAiB1Z,KAAK6Z,iBACjD,CAEQ,aAAAA,GACJ,IAAIa,EAAWpB,EACXqB,EAAYrB,EAUhB,OARItZ,KAAKwa,aACLE,EAAW1a,KAAKwa,WAAW/V,YAG3BzE,KAAKya,cACLE,EAAY3a,KAAKya,YAAYhW,YAG1B,GAAGiW,KAAYC,GAC1B,EAEP,CArRD,CAAiB5N,IAAO,UAAPA,EAAO,I,ydCmBxB,eAGA,MAAa6N,UAAuD,EAAAC,yBAChE,WAAAxb,CACIC,EACAC,EACAC,EACAC,GAEAsF,MAAMzF,EAAQC,EAAaC,EAASC,EACxC,CAOM,kBAAAqb,CACFlZ,EACA9B,G,wCAOA,MAAM2C,QAAiBzC,KAAKqC,iBAAqDT,EAAK9B,GAEtF,OAAOE,KAAKuC,mBAGVvC,KAAKP,eAAekJ,wBAAsClG,EAASD,MAAOC,EAChF,E,CAOM,YAAAuV,CACFpW,EACA9B,G,wCAOA,MAAM2C,QAAiBzC,KAAKqC,iBAA+CT,EAAK9B,GAEhF,OAAOE,KAAKuC,mBAAmBvC,KAAKP,eAAe0I,kBAAgC1F,EAASD,MAAOC,EACvG,E,CAOM,SAAA6L,CACF1M,EACA9B,G,wCAEA,MAAM2C,QAAiBzC,KAAKqC,iBAAiDT,EAAK9B,GAElF,OAAOE,KAAKuC,mBAAmBvC,KAAKP,eAAegI,eAAehF,EAASD,MAAOC,EACtF,E,CAOM,gBAAAsL,CACFnM,EACA9B,G,wCAOA,MAAM2C,QAAiBzC,KAAKqC,iBAAsDT,EAAK9B,GAEvF,OAAOE,KAAKuC,mBAAmBvC,KAAKP,eAAesJ,yBAAyBtG,EAASD,MAAOC,EAChG,E,CAOM,aAAA4H,CACFzI,EACA9B,G,wCAOA,MAAM2C,QAAiBzC,KAAKqC,iBAAqDT,EAAK9B,GAEtF,OAAOE,KAAKuC,mBAAmBvC,KAAKP,eAAeuI,wBAAwBvF,EAASD,MAAOC,EAC/F,E,CAOM,gBAAA6D,CACF1E,EACA9B,G,wCAOA,MAAM2C,QAAiBzC,KAAKqC,iBAAqDT,EAAK9B,GAEtF,OAAOE,KAAKuC,mBAAmBvC,KAAKP,eAAe8G,yBAAyB9D,EAASD,MAAOC,EAChG,E,CASM,cAAAoW,CACFjX,EACA9B,G,wCAEA,MAAM2C,QAAiBzC,KAAK2B,kBAAqDC,EAAK,CAAC,EAAG9B,GAE1F,OAAOE,KAAKuC,mBAAmBvC,KAAKP,eAAeiK,sBAAsBjH,EAASD,MAAOC,EAC7F,E,CAQM,WAAAmH,CACFhI,EACA9B,G,wCAEA,MAAM2C,QAAiBzC,KAAKqC,iBAAiDT,EAAK9B,GAElF,OAAOE,KAAKuC,mBAAmBvC,KAAKP,eAAemK,YAAYnH,EAASD,MAAOC,EACnF,E,CAOM,YAAA+U,CACF5V,EACA9B,G,wCAOA,MAAM2C,QAAiBzC,KAAKqC,iBAAmDT,EAAK9B,GAEpF,OAAOE,KAAKuC,mBAAmBvC,KAAKP,eAAekI,sBAAsBlF,EAASD,MAAOC,EAC7F,E,CAOM,WAAAsY,CACFnZ,EACA9B,G,wCAOA,MAAM2C,QAAiBzC,KAAKqC,iBAAuDT,EAAK9B,GAExF,OAAOE,KAAKuC,mBAAmBvC,KAAKP,eAAewJ,qBAAqBxG,EAASD,MAAOC,EAC5F,E,CAOM,aAAAuY,CACFpZ,EACA9B,G,wCAOA,MAAM2C,QAAiBzC,KAAKqC,iBAAwDT,EAAK9B,GAEzF,OAAOE,KAAKuC,mBAAmBvC,KAAKP,eAAe6J,uBAAuB7G,EAASD,MAAOC,EAC9F,E,CAOM,eAAAyC,CACFtD,EACA9B,G,wCAIA,MAAM2C,QAAiBzC,KAAKqC,iBAA4DT,EAAK9B,GAE7F,OAAOE,KAAKuC,mBAAmBvC,KAAKP,eAAe6F,+BAA+B7C,EAASD,MAAOC,EACtG,E,CAEM,kBAAAwY,CAIJzY,G,wCAYE,MAAMkE,QAAkB1G,KAAKkb,gCAAgC,CACzDC,KAAM3Y,EAAK2Y,KACXC,kBAAmB,GACnBC,YAAa7Y,EAAK6Y,YAClBC,iBAAaxY,EACbyY,uBAAmBzY,EACnB0Y,gBAAiBhZ,EAAKgZ,kBAG1B,OAAOhZ,EAAKgE,mBACRE,EAAU0M,OAAO,CAACqI,EAAaC,KAC3BD,EAAK3a,QAAQ4a,EAAQlZ,KAAKiE,OACnBgV,GACR,IACH/U,EAER,E,CAEc,+BAAAwU,CAAmF1Y,G,oDAW7F,IAAwB,QAApB,EAAAA,EAAKgZ,uBAAe,eAAEG,QAClBnZ,EAAK2Y,KAAO3Y,EAAKgZ,gBAAgBG,MAEjC,OAAOnZ,EAAK4Y,kBAIpB,MAAM3Y,QAAiBD,EAAK6Y,YAAY7Y,EAAK8Y,YAAa9Y,EAAK+Y,oBAEvC,QAApB,EAAA/Y,EAAKgZ,uBAAe,eAAEI,8BAChB5b,KAAK6b,MAAMrZ,EAAKgZ,gBAAgBI,uBAG1CpZ,EAAK4Y,kBAAkBta,KAAK2B,IAEJ,QAApB,EAAAD,EAAKgZ,uBAAe,eAAEM,kBACtBtZ,EAAKgZ,gBAAgBM,gBAAgBrZ,EAAUD,EAAK8Y,YAAa9Y,EAAK+Y,mBAG1E,MAAMxR,EAAmC,QAAxB,EAAAtH,EAASD,KAAKqF,kBAAU,eAAEkC,SACrCwR,EAAoB9Y,EAASG,mBAEnC,OAAImH,GAAYwR,QAECvb,KAAKkb,gCAAgC,CAC9CC,KAAM3Y,EAAK2Y,KAAO,EAClBG,YAAavR,EACbwR,kBAAmBA,EACnBC,gBAAiBhZ,EAAKgZ,gBACtBH,YAAa7Y,EAAK6Y,YAClBD,kBAAmB5Y,EAAK4Y,oBAIzB5Y,EAAK4Y,iB,GAGR,KAAAS,CAAME,GACV,OAAO,IAAIC,QAASC,GAAYC,WAAWD,EAASF,GACxD,EAtTJ,gB,+GCxBA,MAAaI,EACT,kBAAA9G,CAAmB+G,EAA0BC,GACzC,MAAO,GAAGA,IAAerc,KAAKsc,YAAYF,IAC9C,CAEA,WAAAE,CAAY1a,GACR,OAAO,IAAI2a,IAAI3a,GAAK4a,QACxB,EAPJ,sBAUa,EAAApH,kBAAoB,IAAI+G,C,sFCVrC,gBASA,UA4BA,mBAGI,WAAA9c,CAAqBC,GAAA,KAAAA,OAAAA,EACjBU,KAAKyc,cAAgB,IAAI,EAAAC,cAAcpd,EAC3C,CAOA,yBAAAuJ,CACIpG,GAEA,MAAMka,EAAY3c,KAAKqI,SAAuB,CAC1CK,UAAW,CAACjG,EAASqG,MACrBR,YAAaC,OAAOC,OAAO/F,EAASgG,mBAGxC,MAAO,CACHK,KAAM6T,EAAUlW,MAAM,GACtB6B,YAAaqU,EAAUrU,YAE/B,CAOA,4BAAAU,CACIvG,GAOA,OALkBzC,KAAKqI,SAAuB,CAC1CK,UAAWjG,EAASgE,MACpB6B,YAAaC,OAAOC,OAAO/F,EAASgG,kBAI5C,CAKA,QAAAJ,CAAmE7F,GAI/D,MAAMkO,EAAuD,CAAC,EACxDE,EAAkD,CAAC,EACnDC,EAA0C,GAC1C+L,EAAkC,GAClCC,EAA0D,CAAC,EAC3DC,EAAmD,IAAIta,EAAKkG,aAAclG,EAAK8F,aAGrF,IAAK,MAAMQ,KAAQgU,EACflM,EAAc,EAAAhF,eAAeD,gCAAgC7C,EAAKM,OAAOwB,WAAa,CAClF9B,KAAM9I,KAAK+c,kBAAkBjU,GAC7BkI,QAASlI,GAKjB,IAAK,MAAMA,KAAQtG,EAAKkG,UAAW,CAC/B,MAAME,EAAa5I,KAAKgd,QAAsB,CAC1ClU,KAAM8H,EAAc,EAAAhF,eAAeD,gCAAgC7C,EAAKM,OAAOwB,WAC/E8F,eAAgBA,EAChBE,cAAeA,EACfC,8BAA+BA,IAEnC+L,EAAgB9b,KAAK8H,EAAWE,K,CAIpC,IAAK,MAAMA,KAAQtG,EAAK8F,YAAa,CACjC,MAAMM,EAAa5I,KAAKgd,QAAsB,CAC1ClU,KAAM8H,EAAc,EAAAhF,eAAeD,gCAAgC7C,EAAKM,OAAOwB,WAC/E8F,eAAgBA,EAChBE,cAAeA,EACfC,8BAA+BA,IAGnCgM,EAAkB/T,EAAKM,OAAOwB,UAAYhC,EAAWE,I,CAGzD,MAAO,CACHrC,MAAOmW,EACPtU,YAAauU,EAErB,CAKQ,OAAAG,CAAkExa,GAMtE,IAAKA,EAAKsG,KACN,MAAM1H,MAAM,4CAGhB,MAAM6b,EAASjd,KAAKyc,cAAcjM,YAA0B,CACxDG,UAAWnO,EAAKsG,KAChB8H,cAAepO,EAAKoO,cACpBC,8BAA+B,GAC/BH,eAAgBlO,EAAKkO,iBAGzB,IAAKuM,EACD,MAAM7b,MAAM,4BAA4BoB,EAAKsG,KAAKA,KAAKM,OAAOwB,oBAElE,MAAO,CACH9B,KAAMmU,EAAOnU,KACb4H,eAAgBuM,EAAOvM,eACvBE,cAAeqM,EAAOrM,cACtBC,8BAA+BoM,EAAOpM,8BAE9C,CAEQ,iBAAAkM,CAAkBjU,G,QAiBtB,MAhBkC,CAC9B6B,SAAU,CAAC,EACXvB,OAAQ,CACJwB,SAAU9B,EAAKM,OAAOwB,SACtB2C,WAAYzE,EAAKM,OAAOmE,WACxB1C,GAAI/B,EAAKM,OAAOyB,GAChB4M,SAAU3O,EAAKM,OAAOqO,SACtB3M,aAAchC,EAAKM,OAAO2B,cAC1BvH,KAAMsF,EAAKM,OAAO5F,KAClBkV,iBAAkB5P,EAAKM,OAAOuP,kBAC9B1Q,KAAMa,EAAKM,OAAOnB,KAClB0P,aAAuC,QAAzB,EAAA7O,EAAKM,OAAOwO,qBAAa,QAAI,KAC3CF,SAA8B,QAApB,EAAA5O,EAAKM,OAAOsO,gBAAQ,QAAI,MAK9C,E,eC/KJ,IAAiB9R,E,qEAAjB,SAAiBA,GAGA,EAAAkG,eAAb,MAOI,WAAAzM,CAAmBmE,EAAqB9B,GACpC,GADe,KAAA8B,KAAAA,EAAqB,KAAA9B,MAAAA,GAC/B8B,EACD,MAAMpC,MAAM,yCAEpB,CAEA,QAAAsL,GACI,MAAO,GAAG1M,KAAKwD,QAAQxD,KAAK0B,OAChC,GAGS,EAAAmE,kBAAb,MAMI,WAAAxG,CAAmBqG,GAAA,KAAAA,iBAAAA,CAA6B,CAEhD,QAAAgH,GACI,MAAO,YAAY1M,KAAK6Z,iBAC5B,CAEQ,aAAAA,GACJ,OAAK7Z,KAAK0F,iBAIH1F,KAAK0F,iBACPN,IAAKb,IACF,IAAKA,EACD,MAAMnD,MAAM,2DAEhB,OAAOmD,EAAEmV,SAEZrK,KAAK,KA5CW,EA6CzB,GAGS,EAAAtJ,yBAAb,MAMI,WAAA1G,CAAmBqG,GAAA,KAAAA,iBAAAA,CAA6B,CAEhD,QAAAgH,GACI,MAAO,mBAAmB1M,KAAK6Z,iBACnC,CAEQ,aAAAA,GACJ,OAAK7Z,KAAK0F,iBAIH1F,KAAK0F,iBACPN,IAAKb,IACF,IAAKA,EACD,MAAMnD,MAAM,kEAEhB,OAAOmD,EAAEmV,SAEZrK,KAAK,KAxEW,EAyEzB,GAGS,EAAAnJ,eAAb,MAMI,WAAA7G,CAAmB4G,GACf,GADe,KAAAA,MAAAA,EACXA,GAAS,EACT,MAAM7E,MAAM,mDAEpB,CAEA,QAAAsL,GACI,MAAO,SAAS1M,KAAKiG,OACzB,GAGS,EAAAoH,2BAAb,MAKI,WAAAhO,GAAe,CAEf,QAAAqN,GACI,MAAO,wBACX,GAGS,EAAArG,cAAb,MAMI,WAAAhH,CAAmB+G,GACf,GADe,KAAAA,KAAAA,EACXA,EAAO,EACP,MAAMhF,MAAM,oEAEpB,CAEA,QAAAsL,GACI,MAAO,QAAQ1M,KAAKoG,MACxB,GAGS,EAAA8W,eAAb,MAOI,WAAA7d,CAAmB8R,EAAwBgM,GACvC,GADe,KAAAhM,QAAAA,EAAwB,KAAAgM,UAAAA,GAClChM,EACD,MAAM/P,MAAM,yDAEpB,CAEA,QAAAsL,GACI,MAAO,SAAS1M,KAAK6Z,iBACzB,CAEQ,aAAAA,GACJ,MAAO,GAAG7Z,KAAKmR,QAAQuI,UAAU1Z,KAAKmd,YAC1C,GAGS,EAAAtO,gBAAb,MACI,WAAAxP,CAAmBuP,GAAA,KAAAA,MAAAA,CAAgB,CAEnC,QAAAlC,GACI,OAAO1M,KAAK4O,KAChB,GAGS,EAAAhB,eAAb,MAQI,WAAAvO,CAAmBsO,GACf,GADe,KAAAA,MAAAA,EACXA,EAAQ,EACR,MAAMvM,MAAM,2DAEpB,CAEA,QAAAsL,GACI,MAAO,SAAS1M,KAAK2N,OACzB,GAGS,EAAAf,kBAAb,MAMI,WAAAvN,CAAmByO,GAAA,KAAAA,iBAAAA,CAA2B,CAE9C,QAAApB,GACI,MAAO,YAAY1M,KAAK8N,kBAC5B,EAEP,CAxLD,CAAiBlI,IAAU,aAAVA,EAAU,I,0FCJ3B,gBAGA,UAcA,UACA,UAGA,uBASI,WAAAvG,CAAsBC,GAClB,GADkB,KAAAA,OAAAA,GACbA,EACD,MAAM8B,MAAM,4CAGhBpB,KAAKP,eAAiB,IAAI,EAAA2d,eAAe9d,GACzCU,KAAK4E,aAAe,IAAI,EAAAgW,aACpBtb,EACAA,EAAOC,YAAcD,EAAOC,YAAc,IAAI,EAAA8d,YAC9C,CACI9Z,KAAM,EAAA/D,QAAQ+D,KACdC,KAAM,EAAAhE,QAAQgE,KACdC,QAAS,EAAAjE,QAAQiE,SAErBzD,KAAKP,eAEb,CAKA,SAAAoY,GACI,OAAO,IAAI,EAAAP,eAAetX,KAAKV,OAAQU,KAAK4E,aAChD,CAKA,KAAA8F,GACI,OAAO,IAAI,EAAAnF,kBAAkBvF,KAAKV,OAAQU,KAAK4E,aACnD,CAMA,IAAAqD,CAAKpD,GACD,OAAO,IAAI,EAAAuF,gBAAgBpK,KAAKV,OAAQU,KAAK4E,aAAcC,EAC/D,CAKA,KAAA4B,GAII,OAAO,IAAI,EAAAyG,mBAA+ClN,KAAKV,OAAQU,KAAK4E,aAChF,CAMA,IAAAkE,CACI8B,GAEA,OAAO,IAAI,EAAA0S,gBAA4Ctd,KAAKV,OAAQU,KAAK4E,aAAcgG,EAC3F,CAKA,SAAA2S,GAII,OAAO,IAAI,EAAAxF,eAA2C/X,KAAKV,OAAQU,KAAK4E,aAC5E,CAMA,QAAAsE,CAAS0B,GACL,OAAO,IAAI,EAAA4S,cAAcxd,KAAKV,OAAQU,KAAK4E,aAAcgG,EAC7D,CAKA,UAAApB,GACI,OAAO,IAAI,EAAAiU,gBAA8Bzd,KAAKV,OAAQU,KAAK4E,aAC/D,CAOA,OAAAuM,CACItM,EACAC,GAEA,OAAO,IAAI,EAAAJ,aAAa1E,KAAKV,OAAQU,KAAK4E,aAAcC,EAAcC,EAC1E,CASA,cAAA+T,GACI,OAAO,IAAI,EAAAD,oBAAoB5Y,KAAKV,OAAQU,KAAK4E,aACrD,CASA,WAAAgF,GACI,OAAO,IAAI,EAAAU,iBAAiBtK,KAAKV,OAAQU,KAAK4E,aAClD,CAKA,WAAA8Y,CAAYC,GACR,OAAO,IAAI,EAAAvP,YAAYpO,KAAKV,OAAQU,KAAK4E,aAAc,CAAE2J,OAAQ,QAAS3D,SAAU+S,GACxF,CAKA,UAAAC,CAAWC,GACP,OAAO,IAAI,EAAAzP,YAAYpO,KAAKV,OAAQU,KAAK4E,aAAc,CAAE2J,OAAQ,cAAe3D,SAAUiT,GAC9F,E,wJC7JJ,gBAEA,MAAaL,UAAwD,EAAA7Y,UAajE,WAAAtF,CACcC,EACAsF,EACFkZ,GAIR,GAFA/Y,MAAMzF,EAAQsF,GAJJ,KAAAtF,OAAAA,EACA,KAAAsF,aAAAA,EACF,KAAAkZ,iBAAAA,EAPO,KAAAC,mBAA6B,aAEtC,KAAA/Y,aAAqC,CAAC,GASvC8Y,EACD,MAAM1c,MAAM,gEAEpB,CAEA,SAAA6D,G,MAMI,OAAOjF,KAAK4E,aAAamW,YAAY/a,KAAKJ,SAA2B,QAAjB,EAAAI,KAAKgF,oBAAY,QAAI,CAAC,EAC9E,CAEA,MAAApF,GACI,MAAMC,EAAS,IAAMG,KAAK+d,mBAAqB,IAAM/d,KAAK8d,iBAE1D,OAAO/Y,MAAMI,mBAAmBtF,EACpC,CAEA,GAAAuF,CAAIC,GACA,OAAOrF,KAAK4E,aAAanF,eAAewJ,qBAAqB5D,EACjE,EA1CJ,iB,4fCNA,aACA,aACA,Y,2jBCFA,Y,gGCAA,gBAEA,UAWA,UAEA,MAAsB8H,UAMZ,EAAA3H,iBACN,WAAAnG,CAAsBC,EAAyCsF,GAC3DG,MAAMzF,EAAQsF,GADI,KAAAtF,OAAAA,EAAyC,KAAAsF,aAAAA,CAE/D,CAMA,WAAAoZ,CAAY7M,GAER,OADAnR,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQ0M,YAAYtI,IACtCnR,IACX,CAMA,cAAAie,CAAe9M,GAEX,OADAnR,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQ4M,eAAexI,IACzCnR,IACX,CAOA,YAAAke,CAAa/M,EAAiBzP,GAE1B,OADA1B,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQ6M,aAAazI,EAASzP,IAChD1B,IACX,CAOA,eAAAme,CAAgBhN,EAAiBzP,GAE7B,OADA1B,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQC,gBAAgBmE,EAASzP,IACnD1B,IACX,CAOA,SAAAoe,CAAUjN,EAAiB3I,GAEvB,OADAxI,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQ+M,UAAU3I,EAAS3I,IAC7CxI,IACX,CAOA,SAAAqe,CAAUlN,EAAiB3I,GAEvB,OADAxI,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQgN,UAAU5I,EAAS3I,IAC7CxI,IACX,CAOA,cAAAse,CAAenN,EAAiB3I,GAE5B,OADAxI,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQiN,eAAe7I,EAAS3I,IAClDxI,IACX,CAOA,iBAAAue,CAAkBpN,EAAiBzP,GAE/B,OADA1B,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQkN,kBAAkB9I,EAASzP,IACrD1B,IACX,CAOA,wBAAAwe,CAAyBrN,EAAiBzP,GAEtC,OADA1B,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQmN,yBAAyB/I,EAASzP,IAC5D1B,IACX,CAOA,QAAAye,CAAStN,EAAiB3I,GAEtB,OADAxI,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQoN,SAAShJ,EAAS3I,IAC5CxI,IACX,CAOA,WAAA0e,CAAYvN,EAAiB3I,GAEzB,OADAxI,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQqN,YAAYjJ,EAAS3I,IAC/CxI,IACX,CAOA,cAAA2e,CAAexN,EAAiBzP,GAE5B,OADA1B,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQsN,eAAelJ,EAASzP,IAClD1B,IACX,CAMA,qBAAA4e,CAAsBzN,EAAiBzP,GAEnC,OADA1B,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQuN,sBAAsBnJ,EAASzP,IACzD1B,IACX,CAOA,WAAA6e,CAAY1N,EAAiBqJ,EAA6BC,GAEtD,OADAza,KAAK2F,WAAW7E,KAAK,IAAI,EAAAiM,QAAQwN,YAAYpJ,EAASqJ,EAAYC,IAC3Dza,IACX,CAMA,cAAAgG,CAAeC,GAEX,OADAjG,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWM,eAAeD,IAC5CjG,IACX,CAOA,cAAA8e,CAAe3N,EAAiBgM,GAE5B,OADAnd,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWsX,eAAe/L,EAASgM,IACrDnd,IACX,CAMA,iBAAA+e,CAAkB5N,GAEd,OADAnR,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWsX,eAAe/L,EAAS,SACrDnR,IACX,CAMA,gBAAAgf,CAAiB7N,GAEb,OADAnR,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWsX,eAAe/L,EAAS,QACrDnR,IACX,CAMA,aAAAmG,CAAcC,GAEV,OADApG,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWS,cAAcD,IAC3CpG,IACX,CAEU,cAAAmO,CAAeF,GACrB,IAAK,MAAMnF,KAAQmF,EACf,IAAK,MAAMgR,KAAc1W,OAAOgN,KAAKzM,EAAK6B,UAAW,CACjD,MAAMwG,EAAUrI,EAAK6B,SAASsU,GAE9B,GAAI9N,EAAQlJ,OAAS,EAAAuJ,YAAYC,eAAgB,CAC7C,MAAMyN,EAAoB/N,EAIpBgO,EAAqC,GAE3C,IAAK,MAAMC,KAAsBF,EAAkBxd,MAAO,CACtD,IAAIsU,EAMAA,EAJwBkJ,EAAkB5W,YAAYhE,KACrDC,GAAMA,EAAE6E,OAAOwB,SAASpG,gBAAkB4a,EAAmB5a,gBAKjDyJ,EAAgB3J,KACxBC,GAAMA,EAAE6E,OAAOwB,SAASpG,gBAAkB4a,EAAmB5a,eAIlEwR,GACAmJ,EAAmBre,KAAKkV,E,CAKhCkJ,EAAkB5W,YAAc6W,C,CAGpC,GAAIhO,EAAQlJ,OAAS,EAAAuJ,YAAYa,SAAU,CACvC,MAAM8M,EAAqC,GAErCE,EAAkBlO,EAExB,IAAK,MAAMiO,KAAsBC,EAAgB3K,oBAAqB,CAClE,IAAIsB,EAMAA,EAJwBqJ,EAAgB/W,YAAYhE,KACnDC,GAAMA,EAAE6E,OAAOwB,SAASpG,gBAAkB4a,EAAmB5a,gBAKjDyJ,EAAgB3J,KACxBC,GAAMA,EAAE6E,OAAOwB,SAASpG,gBAAkB4a,EAAmB5a,eAIlEwR,GACAmJ,EAAmBre,KAAKkV,E,CAIhCqJ,EAAgB/W,YAAc6W,C,EAI9C,EAjQJ,wB,8FCZA,6BACI,UAAA1V,CAAWhH,GACP,IAAKA,EACD,MAAMrB,MAAM,wCAGhB,MAAM+P,EAAU1O,EAEhB,MAAO,CACHmI,SAAUuG,EAAQvG,SAClBpH,KAAM2N,EAAQ3N,KACdyE,KAAMkJ,EAAQlJ,KACdlI,QAASoR,EAAQpR,QAAUoR,EAAQpR,QAAU,GAC7CyL,cAAe2F,EAAQ1F,eAE/B,E,2jBClBJ,aACA,aACA,Y,gkBCFO,MAAM6T,EAMT,eAAAhf,CAAgBsB,EAAK7B,GAYjB,OAXIA,GACAA,EAAQkL,QAAQiD,IACRtM,EAAI2O,QAAQ,MAAQ,EACpB3O,GAAO,IAGPA,GAAO,IAEXA,GAAOsM,EAAOxB,aAGf9K,CACX,EAEG,MAAMvB,EAAY,IAAIif,ECrBtB,MAAMC,EACT,WAAAlgB,GAIIW,KAAKb,iBAAmB,YAC5B,CAIA,cAAA4B,CAAeye,GACX,MAAO,CACH/d,OAAQzB,KAAKb,iBACbuC,MAAO,GAAG8d,EAAKjc,QAAQic,EAAKhc,QAAQgc,EAAK/b,UAEjD,EAEG,MAAMgc,EAAe,IAAIF,ECjBzB,SAASG,EAAgCjd,GAC5C,MAAM5B,EAAU,GAChB,IAAK,MAAM8e,KAAapX,OAAOgN,KAAK9S,EAAS5B,SACzCA,EAAQC,KAAK,CACTW,OAAQke,EACRje,MAAOe,EAAS5B,QAAQ8e,KAGhC,OAAO9e,CACX,CCRO,MAAM+e,EACT,WAAAvgB,GACIW,KAAK6f,8BAAgC,oBACrC7f,KAAK8f,qBAAuB,cAC5B9f,KAAK+f,wBAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KACzD/f,KAAKggB,qBAAuB,CACxBC,WAAW,EACXC,eAAgB,IAChBC,YAAa,EACbC,cAAgBje,GAAUnC,KAAKqgB,qBAAqBle,GAE5D,CACA,mBAAAme,CAAoB9d,GAChB,IAAI+d,EAAIC,EAAIC,EACZ,GAAIje,EAAKL,OAASK,EAAKL,MAAM6B,SACrBxB,EAAKL,MAAM6B,QAAQ0c,WAAW1gB,KAAK6f,+BAEnC,MAAO,CACHc,UAAU,EACVC,UAAW,EACXC,WAAY,GAOxB,KAHsBre,EAAKN,cAAcke,cACnC5d,EAAKN,cAAcke,cAAc5d,EAAKL,OACtCnC,KAAKggB,qBAAqBI,cAAc5d,EAAKL,QAG/C,MAAO,CACHwe,UAAU,EACVC,UAAW,EACXC,WAAY,GAGpB,MAAMA,EAAwD,QAAzCN,EAAK/d,EAAKN,cAAcie,mBAAgC,IAAPI,EAAgBA,EAAKvgB,KAAKggB,qBAAqBG,YAErH,GAD0B3d,EAAKse,cAAgBD,EAG3C,MAAO,CACHF,UAAU,EACVC,UAAW,EACXC,WAAYA,GAIpB,MAAME,EAAc/gB,KAAKghB,8BAA8Bxe,EAAKL,OAC5D,OAAI4e,EAEO,CACHJ,UAAU,EACVC,UAAWG,EACXF,WAAYA,GAKb,CACHF,UAAU,EACVC,UAHe5gB,KAAKihB,kBAA0D,QAAvCT,EAAKhe,EAAKN,cAAc+d,iBAA8B,IAAPO,EAAgBA,EAAKxgB,KAAKggB,qBAAqBC,UAAwD,QAA5CQ,EAAKje,EAAKN,cAAcge,sBAAmC,IAAPO,EAAgBA,EAAKzgB,KAAKggB,qBAAqBE,eAAgB1d,EAAKse,cAIzQD,WAAYA,EAEpB,CACA,mCAAAK,CAAoCC,GAChC,OAAKA,GACMnhB,KAAKggB,oBAGpB,CACA,cAAAoB,CAAeC,EAAWC,GACtB,MAAMC,EAAQF,EAAUG,UAElBC,GADM,IAAIC,MAAOF,UACMD,EAC7B,MAAO,CACHZ,SAAUc,EAAiBH,EAC3BG,eAAgBA,EAExB,CACA,iBAAAR,CAAkBhB,EAAWC,EAAgByB,GACzC,IAAK1B,EACD,OAAOC,EAAiB0B,KAAKC,IAAI,EAAGF,GAExC,MAAMxO,EAAO,GAAM+M,EACb4B,EAAK,IAAM5B,EAAiB0B,KAAKC,IAAI,EAAGF,GAC9C,OAAO3hB,KAAK+hB,yBAAyB5O,EAAM2O,EAC/C,CACA,oBAAAzB,CAAqBle,GAEjB,IADmBnC,KAAKgiB,iBAAiB7f,GAGrC,OAAO,EAEX,MAAM8f,EAAajiB,KAAKkiB,uBAAuB/f,GAE/C,QAD2BnC,KAAKmiB,mBAAmBF,EAAYjiB,KAAK+f,wBAKxE,CACA,6BAAAiB,CAA8B7e,GAC1B,MAAMuB,EAAa1D,KAAKgiB,iBAAiB7f,GACzC,IAAKuB,IAAeA,EAAWjB,SAC3B,OAEJ,MACM2f,EADU1C,EAAgChc,EAAWjB,UAC1B6B,KAAMC,GAAMA,EAAE9C,OAAO+C,gBAAkBxE,KAAK8f,qBAAqBtb,eAClG,OAAK4d,EAImB,KADAA,EAAiB1gB,WAHzC,CAKJ,CACA,kBAAAygB,CAAmBF,EAAYI,GAC3B,OAAOA,EAAyB1V,SAASsV,EAC7C,CACA,sBAAAC,CAAuB/f,GACnB,MAAMuB,EAAa1D,KAAKgiB,iBAAiB7f,GACzC,OAAKuB,GAAeA,EAAWjB,SAGxBiB,EAAWjB,SAAS6f,OAFhB,CAGf,CACA,gBAAAN,CAAiB7f,GACb,IAAKA,EACD,OAEJ,GAAIA,EAAMwB,aACN,OAAOxB,EAEX,MAAMogB,EAAgBpgB,EAAMogB,cAC5B,OAAIA,GAAiBA,EAAc5e,aACxB4e,OADX,CAIJ,CAIA,wBAAAR,CAAyBS,EAAKC,GAC1B,OAAOb,KAAKc,MAAMd,KAAKe,UAAYF,EAAMD,EAAM,GAAKA,EACxD,EAEG,MAAMI,EAAc,IAAIhD,EC/IxB,IAAIha,ECEI,SAASid,EAAKC,EAAIC,GAC/B,OAAO,WACL,OAAOD,EAAGE,MAAMD,EAASE,UAC3B,CACF,EDLA,SAAWrd,GAsBPA,EAAWiJ,gBArBX,MAOI,WAAAxP,CAAYmE,EAAM9B,GAGd,GAFA1B,KAAKwD,KAAOA,EACZxD,KAAK0B,MAAQA,GACR8B,EACD,MAAMpC,MAAM,gDAEpB,CACA,QAAAsL,GACI,OAAO1M,KAAKwD,IAChB,CACA,aAAAqW,GACI,OAAO7Z,KAAK0B,KAChB,EAGP,CAvBD,CAuBGkE,IAAeA,EAAa,CAAC,IElBhC,MAAOnB,SAAQ,GAAI8D,OAAO2a,WACpB,eAACC,GAAkB5a,QACnB,SAAC6a,EAAQ,YAAEC,GAAeC,OAE1BC,GAAUC,EAGbjb,OAAOkb,OAAO,MAHQC,IACrB,MAAMC,EAAM,EAASC,KAAKF,GAC1B,OAAOF,EAAMG,KAASH,EAAMG,GAAOA,EAAIE,MAAM,GAAI,GAAGrf,iBAFzC,IAACgf,EAKhB,MAAMM,EAAc7b,IAClBA,EAAOA,EAAKzD,cACJkf,GAAUH,EAAOG,KAAWzb,GAGhC8b,EAAa9b,GAAQyb,UAAgBA,IAAUzb,GAS/C,QAACqD,GAAWD,MASZ2Y,EAAcD,EAAW,aAS/B,SAASE,EAASC,GAChB,OAAe,OAARA,IAAiBF,EAAYE,IAA4B,OAApBA,EAAI7kB,cAAyB2kB,EAAYE,EAAI7kB,cACpF8kB,EAAWD,EAAI7kB,YAAY4kB,WAAaC,EAAI7kB,YAAY4kB,SAASC,EACxE,CASA,MAAME,EAAgBN,EAAW,eA2B3BO,EAAWN,EAAW,UAQtBI,EAAaJ,EAAW,YASxBO,EAAWP,EAAW,UAStBQ,EAAYb,GAAoB,OAAVA,GAAmC,iBAAVA,EAiB/Cc,EAAiBN,IACrB,GAAoB,WAAhBX,EAAOW,GACT,OAAO,EAGT,MAAMhB,EAAYC,EAAee,GACjC,QAAsB,OAAdhB,GAAsBA,IAAc3a,OAAO2a,WAAkD,OAArC3a,OAAO4a,eAAeD,IAA0BG,KAAea,GAAUd,KAAYc,IA+BjJO,EAASX,EAAW,QASpBY,EAASZ,EAAW,QASpBa,EAASb,EAAW,QASpBc,EAAad,EAAW,YAsCxBe,EAAoBf,EAAW,oBAE9BgB,EAAkBC,EAAWC,EAAYC,GAAa,CAAC,iBAAkB,UAAW,WAAY,WAAW7f,IAAI0e,GA2BtH,SAAS7Y,EAAQia,EAAKpC,GAAI,WAACqC,GAAa,GAAS,CAAC,GAEhD,GAAID,QACF,OAGF,IAAI1L,EACA4L,EAQJ,GALmB,iBAARF,IAETA,EAAM,CAACA,IAGL5Z,EAAQ4Z,GAEV,IAAK1L,EAAI,EAAG4L,EAAIF,EAAI/L,OAAQK,EAAI4L,EAAG5L,IACjCsJ,EAAGc,KAAK,KAAMsB,EAAI1L,GAAIA,EAAG0L,OAEtB,CAEL,GAAIjB,EAASiB,GACX,OAIF,MAAM3P,EAAO4P,EAAa5c,OAAOyC,oBAAoBka,GAAO3c,OAAOgN,KAAK2P,GAClEG,EAAM9P,EAAK4D,OACjB,IAAI7V,EAEJ,IAAKkW,EAAI,EAAGA,EAAI6L,EAAK7L,IACnBlW,EAAMiS,EAAKiE,GACXsJ,EAAGc,KAAK,KAAMsB,EAAI5hB,GAAMA,EAAK4hB,EAEjC,CACF,CAEA,SAASI,EAAQJ,EAAK5hB,GACpB,GAAI2gB,EAASiB,GACX,OAAO,KAGT5hB,EAAMA,EAAIkB,cACV,MAAM+Q,EAAOhN,OAAOgN,KAAK2P,GACzB,IACIK,EADA/L,EAAIjE,EAAK4D,OAEb,KAAOK,KAAM,GAEX,GADA+L,EAAOhQ,EAAKiE,GACRlW,IAAQiiB,EAAK/gB,cACf,OAAO+gB,EAGX,OAAO,IACT,CAEA,MAAMC,EAEsB,oBAAfC,WAAmCA,WACvB,oBAATzmB,KAAuBA,KAA0B,oBAAX0mB,OAAyBA,OAASC,OAGlFC,EAAoBC,IAAa7B,EAAY6B,IAAYA,IAAYL,EAkLrEM,GAAgBC,EAKG,oBAAfC,YAA8B7C,EAAe6C,YAH9CtC,GACEqC,GAAcrC,aAAiBqC,GAHrB,IAACA,EAetB,MAiCME,EAAanC,EAAW,mBAWxB,EAAiB,GAAGoC,oBAAoB,CAAChB,EAAKiB,IAASD,EAAetC,KAAKsB,EAAKiB,GAA/D,CAAsE5d,OAAO2a,WAS9FkD,EAAWtC,EAAW,UAEtBuC,EAAoB,CAACnB,EAAKoB,KAC9B,MAAMC,EAAche,OAAOie,0BAA0BtB,GAC/CuB,EAAqB,CAAC,EAE5Bxb,EAAQsb,EAAa,CAACG,EAAYljB,KAChC,IAAImjB,GAC2C,KAA1CA,EAAML,EAAQI,EAAYljB,EAAM0hB,MACnCuB,EAAmBjjB,GAAQmjB,GAAOD,KAItCne,OAAOqe,iBAAiB1B,EAAKuB,IAqGzBI,EAAY/C,EAAW,iBAQvBgD,GAAkBC,EAkBE,mBAAjBC,aAlBsCC,EAmB7C9C,EAAWqB,EAAQ0B,aAlBfH,EACKC,aAGFC,GAAyBE,EAW7B,SAASvF,KAAKe,WAXsByE,GAWV,GAV3B5B,EAAQ6B,iBAAiB,UAAW,EAAEC,SAAQ9kB,WACxC8kB,IAAW9B,GAAWhjB,IAAS2kB,GACjCC,GAAUjO,QAAUiO,GAAUG,OAAVH,KAErB,GAEKI,IACNJ,GAAUtmB,KAAK0mB,GACfhC,EAAQ0B,YAAYC,EAAO,OAEKK,GAAOtL,WAAWsL,IAhBlC,IAAET,EAAuBE,EAKbE,EAAOC,GAiBzC,MAAMK,GAAiC,oBAAnBC,eAClBA,eAAe7E,KAAK2C,GAAgC,oBAAZmC,SAA2BA,QAAQC,UAAYd,EAQzF,IACExb,UACA8Y,gBACAH,WACA4D,WAlgBkBnE,IAClB,IAAIoE,EACJ,OAAOpE,IACgB,mBAAbqE,UAA2BrE,aAAiBqE,UAClD5D,EAAWT,EAAMsE,UACY,cAA1BF,EAAOvE,EAAOG,KAEL,WAAToE,GAAqB3D,EAAWT,EAAMjf,WAAkC,sBAArBif,EAAMjf,cA4fhEwjB,kBAjpBF,SAA2B/D,GACzB,IAAIjH,EAMJ,OAJEA,EAD0B,oBAAhBiL,aAAiCA,YAAkB,OACpDA,YAAYC,OAAOjE,GAEnB,GAAUA,EAAU,QAAME,EAAcF,EAAIkE,QAEhDnL,CACT,EA0oBEoH,WACAC,WACA+D,UAjmBgB3E,IAAmB,IAAVA,IAA4B,IAAVA,EAkmB3Ca,WACAC,gBACA8D,cA3kBqBpE,IAErB,IAAKK,EAASL,IAAQD,EAASC,GAC7B,OAAO,EAGT,IACE,OAAmC,IAA5B3b,OAAOgN,KAAK2O,GAAK/K,QAAgB5Q,OAAO4a,eAAee,KAAS3b,OAAO2a,SAChF,CAAE,MAAOqF,GAEP,OAAO,CACT,GAikBAzD,mBACAC,YACAC,aACAC,YACAjB,cACAS,SACAC,SACAC,SACAyB,WACAjC,aACAqE,SA7hBgBtE,GAAQK,EAASL,IAAQC,EAAWD,EAAIuE,MA8hBxD5D,oBACAiB,eACAlB,aACA3Z,UACAyd,MAtZF,SAASA,IACP,MAAM,SAACC,GAAY/C,EAAiB5lB,OAASA,MAAQ,CAAC,EAChDid,EAAS,CAAC,EACV2L,EAAc,CAAC1E,EAAK5gB,KACxB,MAAMulB,EAAYF,GAAYrD,EAAQrI,EAAQ3Z,IAAQA,EAClDkhB,EAAcvH,EAAO4L,KAAerE,EAAcN,GACpDjH,EAAO4L,GAAaH,EAAMzL,EAAO4L,GAAY3E,GACpCM,EAAcN,GACvBjH,EAAO4L,GAAaH,EAAM,CAAC,EAAGxE,GACrB5Y,EAAQ4Y,GACjBjH,EAAO4L,GAAa3E,EAAIL,QAExB5G,EAAO4L,GAAa3E,GAIxB,IAAK,IAAI1K,EAAI,EAAG4L,EAAInC,UAAU9J,OAAQK,EAAI4L,EAAG5L,IAC3CyJ,UAAUzJ,IAAMvO,EAAQgY,UAAUzJ,GAAIoP,GAExC,OAAO3L,CACT,EAmYE6L,OAvXa,CAACpV,EAAGC,EAAGoP,GAAUoC,cAAa,CAAC,KAC5Cla,EAAQ0I,EAAG,CAACuQ,EAAK5gB,KACXyf,GAAWoB,EAAWD,GACxBxQ,EAAEpQ,GAAOuf,EAAKqB,EAAKnB,GAEnBrP,EAAEpQ,GAAO4gB,GAEV,CAACiB,eACGzR,GAgXPgG,KA5fYiK,GAAQA,EAAIjK,KACxBiK,EAAIjK,OAASiK,EAAI9M,QAAQ,qCAAsC,IA4f/DkS,SAvWgBC,IACc,QAA1BA,EAAQC,WAAW,KACrBD,EAAUA,EAAQnF,MAAM,IAEnBmF,GAoWPE,SAxVe,CAAC7pB,EAAa8pB,EAAkBC,EAAO7C,KACtDlnB,EAAY6jB,UAAY3a,OAAOkb,OAAO0F,EAAiBjG,UAAWqD,GAClElnB,EAAY6jB,UAAU7jB,YAAcA,EACpCkJ,OAAO8gB,eAAehqB,EAAa,QAAS,CAC1CqC,MAAOynB,EAAiBjG,YAE1BkG,GAAS7gB,OAAO+gB,OAAOjqB,EAAY6jB,UAAWkG,IAmV9CG,aAvUmB,CAACC,EAAWC,EAASvb,EAAQwb,KAChD,IAAIN,EACA5P,EACA2M,EACJ,MAAMwD,EAAS,CAAC,EAIhB,GAFAF,EAAUA,GAAW,CAAC,EAEL,MAAbD,EAAmB,OAAOC,EAE9B,EAAG,CAGD,IAFAL,EAAQ7gB,OAAOyC,oBAAoBwe,GACnChQ,EAAI4P,EAAMjQ,OACHK,KAAM,GACX2M,EAAOiD,EAAM5P,GACPkQ,IAAcA,EAAWvD,EAAMqD,EAAWC,IAAcE,EAAOxD,KACnEsD,EAAQtD,GAAQqD,EAAUrD,GAC1BwD,EAAOxD,IAAQ,GAGnBqD,GAAuB,IAAXtb,GAAoBiV,EAAeqG,EACjD,OAASA,KAAetb,GAAUA,EAAOsb,EAAWC,KAAaD,IAAcjhB,OAAO2a,WAEtF,OAAOuG,GAiTPlG,SACAO,aACA8F,SAvSe,CAACjG,EAAKkG,EAAcC,KACnCnG,EAAMoG,OAAOpG,SACI7gB,IAAbgnB,GAA0BA,EAAWnG,EAAIxK,UAC3C2Q,EAAWnG,EAAIxK,QAEjB2Q,GAAYD,EAAa1Q,OACzB,MAAM6Q,EAAYrG,EAAIpT,QAAQsZ,EAAcC,GAC5C,OAAsB,IAAfE,GAAoBA,IAAcF,GAiSzCG,QAtRevG,IACf,IAAKA,EAAO,OAAO,KACnB,GAAIpY,EAAQoY,GAAQ,OAAOA,EAC3B,IAAIlK,EAAIkK,EAAMvK,OACd,IAAKmL,EAAS9K,GAAI,OAAO,KACzB,MAAM0Q,EAAM,IAAI7e,MAAMmO,GACtB,KAAOA,KAAM,GACX0Q,EAAI1Q,GAAKkK,EAAMlK,GAEjB,OAAO0Q,GA8QPC,aAnPmB,CAACjF,EAAKpC,KACzB,MAEMsH,GAFYlF,GAAOA,EAAI9B,IAEDQ,KAAKsB,GAEjC,IAAIjI,EAEJ,MAAQA,EAASmN,EAAUC,UAAYpN,EAAOqN,MAAM,CAClD,MAAMC,EAAOtN,EAAOvb,MACpBohB,EAAGc,KAAKsB,EAAKqF,EAAK,GAAIA,EAAK,GAC7B,GA0OAtX,SA/Ne,CAACuX,EAAQ7G,KACxB,IAAI8G,EACJ,MAAMP,EAAM,GAEZ,KAAwC,QAAhCO,EAAUD,EAAOE,KAAK/G,KAC5BuG,EAAIppB,KAAK2pB,GAGX,OAAOP,GAwNPjE,aACAC,eAAc,EACdyE,WAAY,EACZtE,oBACAuE,cA/KqB1F,IACrBmB,EAAkBnB,EAAK,CAACwB,EAAYljB,KAElC,GAAI2gB,EAAWe,KAA6D,IAArD,CAAC,YAAa,SAAU,UAAU3U,QAAQ/M,GAC/D,OAAO,EAGT,MAAM9B,EAAQwjB,EAAI1hB,GAEb2gB,EAAWziB,KAEhBglB,EAAWmE,YAAa,EAEpB,aAAcnE,EAChBA,EAAWoE,UAAW,EAInBpE,EAAWqE,MACdrE,EAAWqE,IAAM,KACf,MAAM3pB,MAAM,qCAAwCoC,EAAO,WA4JjEwnB,YAtJkB,CAACC,EAAeC,KAClC,MAAMhG,EAAM,CAAC,EAEPpmB,EAAUorB,IACdA,EAAIjf,QAAQvJ,IACVwjB,EAAIxjB,IAAS,KAMjB,OAFA4J,EAAQ2f,GAAiBnsB,EAAOmsB,GAAiBnsB,EAAOirB,OAAOkB,GAAeE,MAAMD,IAE7EhG,GA4IPkG,YAxNkBzH,GACXA,EAAInf,cAAcqS,QAAQ,wBAC/B,SAAkBtS,EAAG8mB,EAAIC,GACvB,OAAOD,EAAGE,cAAgBD,CAC5B,GAqNFE,KA1IW,OA2IXC,eAzIqB,CAAC/pB,EAAO4X,IACb,MAAT5X,GAAiBqQ,OAAO2Z,SAAShqB,GAASA,GAASA,EAAQ4X,EAyIlEgM,UACAK,OAAQH,EACRI,mBACA+F,oBAlIF,SAA6BjI,GAC3B,SAAUA,GAASS,EAAWT,EAAMsE,SAAkC,aAAvBtE,EAAML,IAA+BK,EAAMN,GAC5F,EAiIEwI,aA/HoB1G,IACpB,MAAM2G,EAAQ,IAAIxgB,MAAM,IAElBygB,EAAQ,CAACxE,EAAQ9N,KAErB,GAAI+K,EAAS+C,GAAS,CACpB,GAAIuE,EAAMtb,QAAQ+W,IAAW,EAC3B,OAIF,GAAIrD,EAASqD,GACX,OAAOA,EAGT,KAAK,WAAYA,GAAS,CACxBuE,EAAMrS,GAAK8N,EACX,MAAMyE,EAASzgB,EAAQgc,GAAU,GAAK,CAAC,EASvC,OAPArc,EAAQqc,EAAQ,CAAC5lB,EAAO4B,KACtB,MAAM0oB,EAAeF,EAAMpqB,EAAO8X,EAAI,IACrCwK,EAAYgI,KAAkBD,EAAOzoB,GAAO0oB,KAG/CH,EAAMrS,QAAK1W,EAEJipB,CACT,CACF,CAEA,OAAOzE,GAGT,OAAOwE,EAAM5G,EAAK,IA+FlB2B,YACAoF,WA3FkBvI,GAClBA,IAAUa,EAASb,IAAUS,EAAWT,KAAWS,EAAWT,EAAMwI,OAAS/H,EAAWT,EAAMyI,OA2F9FnF,aAAcF,EACdW,QACA2E,WA5DkB1I,GAAmB,MAATA,GAAiBS,EAAWT,EAAMN,KC/rBhE,SAASiJ,GAAWroB,EAASsoB,EAAMhtB,EAAQitB,EAAS9pB,GAClDrB,MAAMwiB,KAAK5jB,MAEPoB,MAAMorB,kBACRprB,MAAMorB,kBAAkBxsB,KAAMA,KAAKX,aAEnCW,KAAK6rB,OAAQ,IAAKzqB,OAASyqB,MAG7B7rB,KAAKgE,QAAUA,EACfhE,KAAKwD,KAAO,aACZ8oB,IAAStsB,KAAKssB,KAAOA,GACrBhtB,IAAWU,KAAKV,OAASA,GACzBitB,IAAYvsB,KAAKusB,QAAUA,GACvB9pB,IACFzC,KAAKyC,SAAWA,EAChBzC,KAAKsiB,OAAS7f,EAAS6f,OAAS7f,EAAS6f,OAAS,KAEtD,CAEAmK,GAAMvD,SAASmD,GAAYjrB,MAAO,CAChCsrB,OAAQ,WACN,MAAO,CAEL1oB,QAAShE,KAAKgE,QACdR,KAAMxD,KAAKwD,KAEX0T,YAAalX,KAAKkX,YAClByV,OAAQ3sB,KAAK2sB,OAEbC,SAAU5sB,KAAK4sB,SACfC,WAAY7sB,KAAK6sB,WACjBC,aAAc9sB,KAAK8sB,aACnBjB,MAAO7rB,KAAK6rB,MAEZvsB,OAAQmtB,GAAMb,aAAa5rB,KAAKV,QAChCgtB,KAAMtsB,KAAKssB,KACXhK,OAAQtiB,KAAKsiB,OAEjB,IAGF,MAAM,GAAY+J,GAAWnJ,UACvBqD,GAAc,CAAC,EAErB,CACE,uBACA,iBACA,eACA,YACA,cACA,4BACA,iBACA,mBACA,kBACA,eACA,kBACA,mBAEAtb,QAAQqhB,IACR/F,GAAY+F,GAAQ,CAAC5qB,MAAO4qB,KAG9B/jB,OAAOqe,iBAAiByF,GAAY9F,IACpChe,OAAO8gB,eAAe,GAAW,eAAgB,CAAC3nB,OAAO,IAGzD2qB,GAAWlZ,KAAO,CAAChR,EAAOmqB,EAAMhtB,EAAQitB,EAAS9pB,EAAUsqB,KACzD,MAAMrpB,EAAa6E,OAAOkb,OAAO,IAgBjC,OAdAgJ,GAAMlD,aAAapnB,EAAOuB,EAAY,SAAgBwhB,GACpD,OAAOA,IAAQ9jB,MAAM8hB,SACvB,EAAGiD,GACe,iBAATA,GAGTkG,GAAWzI,KAAKlgB,EAAYvB,EAAM6B,QAASsoB,EAAMhtB,EAAQitB,EAAS9pB,GAElEiB,EAAWspB,MAAQ7qB,EAEnBuB,EAAWF,KAAOrB,EAAMqB,KAExBupB,GAAexkB,OAAO+gB,OAAO5lB,EAAYqpB,GAElCrpB,GAGT,YCxFA,SAASupB,GAAYvJ,GACnB,OAAO+I,GAAMjI,cAAcd,IAAU+I,GAAMnhB,QAAQoY,EACrD,CASA,SAASwJ,GAAe5pB,GACtB,OAAOmpB,GAAM7C,SAAStmB,EAAK,MAAQA,EAAIugB,MAAM,GAAI,GAAKvgB,CACxD,CAWA,SAAS6pB,GAAUC,EAAM9pB,EAAK+pB,GAC5B,OAAKD,EACEA,EAAKE,OAAOhqB,GAAK8B,IAAI,SAAc+hB,EAAO3N,GAG/C,OADA2N,EAAQ+F,GAAe/F,IACfkG,GAAQ7T,EAAI,IAAM2N,EAAQ,IAAMA,CAC1C,GAAG9X,KAAKge,EAAO,IAAM,IALH/pB,CAMpB,CAaA,MAAMiqB,GAAad,GAAMlD,aAAakD,GAAO,CAAC,EAAG,KAAM,SAAgBtG,GACrE,MAAO,WAAWqH,KAAKrH,EACzB,GAkKA,GAzIA,SAAoBjB,EAAKuI,EAAU1tB,GACjC,IAAK0sB,GAAMlI,SAASW,GAClB,MAAM,IAAIwI,UAAU,4BAItBD,EAAWA,GAAY,IAAyB1F,SAYhD,MAAM4F,GATN5tB,EAAU0sB,GAAMlD,aAAaxpB,EAAS,CACpC4tB,YAAY,EACZN,MAAM,EACNO,SAAS,IACR,EAAO,SAAiBC,EAAQvG,GAEjC,OAAQmF,GAAMzI,YAAYsD,EAAOuG,GACnC,IAE2BF,WAErBG,EAAU/tB,EAAQ+tB,SAAWC,EAC7BV,EAAOttB,EAAQstB,KACfO,EAAU7tB,EAAQ6tB,QAElBI,GADQjuB,EAAQkuB,MAAwB,oBAATA,MAAwBA,OACpCxB,GAAMd,oBAAoB8B,GAEnD,IAAKhB,GAAMtI,WAAW2J,GACpB,MAAM,IAAIJ,UAAU,8BAGtB,SAASQ,EAAaxsB,GACpB,GAAc,OAAVA,EAAgB,MAAO,GAE3B,GAAI+qB,GAAMhI,OAAO/iB,GACf,OAAOA,EAAMysB,cAGf,GAAI1B,GAAMpE,UAAU3mB,GAClB,OAAOA,EAAM+C,WAGf,IAAKupB,GAAWvB,GAAM9H,OAAOjjB,GAC3B,MAAM,IAAI,GAAW,gDAGvB,OAAI+qB,GAAMrI,cAAc1iB,IAAU+qB,GAAM3G,aAAapkB,GAC5CssB,GAA2B,mBAATC,KAAsB,IAAIA,KAAK,CAACvsB,IAAU0sB,OAAOjb,KAAKzR,GAG1EA,CACT,CAYA,SAASqsB,EAAersB,EAAO4B,EAAK8pB,GAClC,IAAIlD,EAAMxoB,EAEV,GAAIA,IAAU0rB,GAAyB,iBAAV1rB,EAC3B,GAAI+qB,GAAM7C,SAAStmB,EAAK,MAEtBA,EAAMqqB,EAAarqB,EAAMA,EAAIugB,MAAM,GAAI,GAEvCniB,EAAQ2sB,KAAKC,UAAU5sB,QAClB,GACJ+qB,GAAMnhB,QAAQ5J,IAvGvB,SAAqBwoB,GACnB,OAAOuC,GAAMnhB,QAAQ4e,KAASA,EAAIqE,KAAKtB,GACzC,CAqGiCuB,CAAY9sB,KACnC+qB,GAAM7H,WAAWljB,IAAU+qB,GAAM7C,SAAStmB,EAAK,SAAW4mB,EAAMuC,GAAMxC,QAAQvoB,IAYhF,OATA4B,EAAM4pB,GAAe5pB,GAErB4mB,EAAIjf,QAAQ,SAAcwjB,EAAIC,IAC1BjC,GAAMzI,YAAYyK,IAAc,OAAPA,GAAgBhB,EAASzF,QAEtC,IAAZ4F,EAAmBT,GAAU,CAAC7pB,GAAMorB,EAAOrB,GAAqB,OAAZO,EAAmBtqB,EAAMA,EAAM,KACnF4qB,EAAaO,GAEjB,IACO,EAIX,QAAIxB,GAAYvrB,KAIhB+rB,EAASzF,OAAOmF,GAAUC,EAAM9pB,EAAK+pB,GAAOa,EAAaxsB,KAElD,EACT,CAEA,MAAMmqB,EAAQ,GAER8C,EAAiBpmB,OAAO+gB,OAAOiE,GAAY,CAC/CQ,iBACAG,eACAjB,iBAyBF,IAAKR,GAAMlI,SAASW,GAClB,MAAM,IAAIwI,UAAU,0BAKtB,OA5BA,SAASkB,EAAMltB,EAAO0rB,GACpB,IAAIX,GAAMzI,YAAYtiB,GAAtB,CAEA,IAA8B,IAA1BmqB,EAAMtb,QAAQ7O,GAChB,MAAMN,MAAM,kCAAoCgsB,EAAK/d,KAAK,MAG5Dwc,EAAM/qB,KAAKY,GAEX+qB,GAAMxhB,QAAQvJ,EAAO,SAAc+sB,EAAInrB,IAKtB,OAJEmpB,GAAMzI,YAAYyK,IAAc,OAAPA,IAAgBX,EAAQlK,KAChE6J,EAAUgB,EAAIhC,GAAMpI,SAAS/gB,GAAOA,EAAIoW,OAASpW,EAAK8pB,EAAMuB,KAI5DC,EAAMH,EAAIrB,EAAOA,EAAKE,OAAOhqB,GAAO,CAACA,GAEzC,GAEAuoB,EAAMgD,KAlB8B,CAmBtC,CAMAD,CAAM1J,GAECuI,CACT,EChNA,SAASqB,GAAOnL,GACd,MAAMoL,EAAU,CACd,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,MAAO,IACP,MAAO,MAET,OAAOC,mBAAmBrL,GAAK9M,QAAQ,mBAAoB,SAAkBvD,GAC3E,OAAOyb,EAAQzb,EACjB,EACF,CAUA,SAAS2b,GAAqBC,EAAQnvB,GACpCC,KAAKmvB,OAAS,GAEdD,GAAU,GAAWA,EAAQlvB,KAAMD,EACrC,CAEA,MAAM,GAAYkvB,GAAqB/L,UAEvC,GAAU8E,OAAS,SAAgBxkB,EAAM9B,GACvC1B,KAAKmvB,OAAOruB,KAAK,CAAC0C,EAAM9B,GAC1B,EAEA,GAAU+C,SAAW,SAAkB2qB,GACrC,MAAMC,EAAUD,EAAU,SAAS1tB,GACjC,OAAO0tB,EAAQxL,KAAK5jB,KAAM0B,EAAOotB,GACnC,EAAIA,GAEJ,OAAO9uB,KAAKmvB,OAAO/pB,IAAI,SAAcmlB,GACnC,OAAO8E,EAAQ9E,EAAK,IAAM,IAAM8E,EAAQ9E,EAAK,GAC/C,EAAG,IAAIlb,KAAK,IACd,EAEA,YC5CA,SAAS,GAAO6U,GACd,OAAO8K,mBAAmB9K,GACxBrN,QAAQ,QAAS,KACjBA,QAAQ,OAAQ,KAChBA,QAAQ,QAAS,KACjBA,QAAQ,OAAQ,KAChBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,IACrB,CAWe,SAASyY,GAAS1tB,EAAKstB,EAAQnvB,GAE5C,IAAKmvB,EACH,OAAOttB,EAGT,MAAMytB,EAAUtvB,GAAWA,EAAQ+uB,QAAU,GAEzCrC,GAAMtI,WAAWpkB,KACnBA,EAAU,CACRwvB,UAAWxvB,IAIf,MAAMyvB,EAAczvB,GAAWA,EAAQwvB,UAEvC,IAAIE,EAUJ,GAPEA,EADED,EACiBA,EAAYN,EAAQnvB,GAEpB0sB,GAAM5H,kBAAkBqK,GACzCA,EAAOzqB,WACP,IAAI,GAAqByqB,EAAQnvB,GAAS0E,SAAS4qB,GAGnDI,EAAkB,CACpB,MAAMC,EAAgB9tB,EAAI2O,QAAQ,MAEX,IAAnBmf,IACF9tB,EAAMA,EAAIiiB,MAAM,EAAG6L,IAErB9tB,KAA8B,IAAtBA,EAAI2O,QAAQ,KAAc,IAAM,KAAOkf,CACjD,CAEA,OAAO7tB,CACT,CCEA,SAlEA,MACE,WAAAvC,GACEW,KAAK2vB,SAAW,EAClB,CAUA,GAAAC,CAAIC,EAAWC,EAAU/vB,GAOvB,OANAC,KAAK2vB,SAAS7uB,KAAK,CACjB+uB,YACAC,WACAC,cAAahwB,GAAUA,EAAQgwB,YAC/BC,QAASjwB,EAAUA,EAAQiwB,QAAU,OAEhChwB,KAAK2vB,SAASxW,OAAS,CAChC,CASA,KAAA8W,CAAMplB,GACA7K,KAAK2vB,SAAS9kB,KAChB7K,KAAK2vB,SAAS9kB,GAAM,KAExB,CAOA,KAAAqlB,GACMlwB,KAAK2vB,WACP3vB,KAAK2vB,SAAW,GAEpB,CAYA,OAAA1kB,CAAQ6X,GACN2J,GAAMxhB,QAAQjL,KAAK2vB,SAAU,SAAwBQ,GACzC,OAANA,GACFrN,EAAGqN,EAEP,EACF,GCjEF,IACEC,mBAAmB,EACnBC,mBAAmB,EACnBC,qBAAqB,GCDvB,IACEC,WAAW,EACXC,QAAS,CACPC,gBCJsC,oBAApBA,gBAAkCA,gBAAkB,GDKtE1I,SEN+B,oBAAbA,SAA2BA,SAAW,KFOxDkG,KGP2B,oBAATA,KAAuBA,KAAO,MHSlDyC,UAAW,CAAC,OAAQ,QAAS,OAAQ,OAAQ,MAAO,SIXhDC,GAAkC,oBAAXjL,QAA8C,oBAAbkL,SAExDC,GAAkC,iBAAdC,WAA0BA,gBAAahuB,EAmB3DiuB,GAAwBJ,MAC1BE,IAAc,CAAC,cAAe,eAAgB,MAAMtgB,QAAQsgB,GAAWG,SAAW,GAWhFC,GAE2B,oBAAtBC,mBAEPlyB,gBAAgBkyB,mBACc,mBAAvBlyB,KAAKmyB,cAIVC,GAAST,IAAiBjL,OAAO2L,SAASC,MAAQ,mBCvCxD,OACK,KACA,ICyFL,GA9CA,SAAwB7D,GACtB,SAAS8D,EAAUnE,EAAM1rB,EAAOqqB,EAAQ2C,GACtC,IAAIlrB,EAAO4pB,EAAKsB,KAEhB,GAAa,cAATlrB,EAAsB,OAAO,EAEjC,MAAMguB,EAAezf,OAAO2Z,UAAUloB,GAChCiuB,EAAS/C,GAAStB,EAAKjU,OAG7B,OAFA3V,GAAQA,GAAQipB,GAAMnhB,QAAQygB,GAAUA,EAAO5S,OAAS3V,EAEpDiuB,GACEhF,GAAM9B,WAAWoB,EAAQvoB,GAC3BuoB,EAAOvoB,GAAQ,CAACuoB,EAAOvoB,GAAO9B,GAE9BqqB,EAAOvoB,GAAQ9B,GAGT8vB,IAGLzF,EAAOvoB,IAAUipB,GAAMlI,SAASwH,EAAOvoB,MAC1CuoB,EAAOvoB,GAAQ,IAGF+tB,EAAUnE,EAAM1rB,EAAOqqB,EAAOvoB,GAAOkrB,IAEtCjC,GAAMnhB,QAAQygB,EAAOvoB,MACjCuoB,EAAOvoB,GA/Cb,SAAuB0mB,GACrB,MAAMhF,EAAM,CAAC,EACP3P,EAAOhN,OAAOgN,KAAK2U,GACzB,IAAI1Q,EACJ,MAAM6L,EAAM9P,EAAK4D,OACjB,IAAI7V,EACJ,IAAKkW,EAAI,EAAGA,EAAI6L,EAAK7L,IACnBlW,EAAMiS,EAAKiE,GACX0L,EAAI5hB,GAAO4mB,EAAI5mB,GAEjB,OAAO4hB,CACT,CAoCqBwM,CAAc3F,EAAOvoB,MAG9BguB,EACV,CAEA,GAAI/E,GAAM5E,WAAW4F,IAAahB,GAAMtI,WAAWsJ,EAASkE,SAAU,CACpE,MAAMzM,EAAM,CAAC,EAMb,OAJAuH,GAAMtC,aAAasD,EAAU,CAACjqB,EAAM9B,KAClC6vB,EA1EN,SAAuB/tB,GAKrB,OAAOipB,GAAMxZ,SAAS,gBAAiBzP,GAAM4B,IAAIkO,GAC3B,OAAbA,EAAM,GAAc,GAAKA,EAAM,IAAMA,EAAM,GAEtD,CAkEgBse,CAAcpuB,GAAO9B,EAAOwjB,EAAK,KAGtCA,CACT,CAEA,OAAO,IACT,ECzDM2M,GAAW,CAEfC,aAAc,GAEdC,QAAS,CAAC,MAAO,OAAQ,SAEzBC,iBAAkB,CAAC,SAA0BxvB,EAAM3B,GACjD,MAAMoxB,EAAcpxB,EAAQqxB,kBAAoB,GAC1CC,EAAqBF,EAAY1hB,QAAQ,qBAAuB,EAChE6hB,EAAkB3F,GAAMlI,SAAS/hB,GAQvC,GANI4vB,GAAmB3F,GAAMxG,WAAWzjB,KACtCA,EAAO,IAAIulB,SAASvlB,IAGHiqB,GAAM5E,WAAWrlB,GAGlC,OAAO2vB,EAAqB9D,KAAKC,UAAU,GAAe9rB,IAASA,EAGrE,GAAIiqB,GAAMrI,cAAc5hB,IACtBiqB,GAAMxI,SAASzhB,IACfiqB,GAAMjE,SAAShmB,IACfiqB,GAAM/H,OAAOliB,IACbiqB,GAAM9H,OAAOniB,IACbiqB,GAAM3H,iBAAiBtiB,GAEvB,OAAOA,EAET,GAAIiqB,GAAMxE,kBAAkBzlB,GAC1B,OAAOA,EAAK4lB,OAEd,GAAIqE,GAAM5H,kBAAkBriB,GAE1B,OADA3B,EAAQwxB,eAAe,mDAAmD,GACnE7vB,EAAKiC,WAGd,IAAImgB,EAEJ,GAAIwN,EAAiB,CACnB,GAAIH,EAAY1hB,QAAQ,sCAAwC,EAC9D,OCvEO,SAA0B/N,EAAMzC,GAC7C,OAAO,GAAWyC,EAAM,IAAI8vB,GAAS9B,QAAQC,gBAAmB,CAC9D3C,QAAS,SAASpsB,EAAO4B,EAAK8pB,EAAMmF,GAClC,OAAID,GAASE,QAAU/F,GAAMxI,SAASviB,IACpC1B,KAAKgoB,OAAO1kB,EAAK5B,EAAM+C,SAAS,YACzB,GAGF8tB,EAAQxE,eAAe/K,MAAMhjB,KAAMijB,UAC5C,KACGljB,GAEP,CD2De0yB,CAAiBjwB,EAAMxC,KAAK0yB,gBAAgBjuB,WAGrD,IAAKmgB,EAAa6H,GAAM7H,WAAWpiB,KAAUyvB,EAAY1hB,QAAQ,wBAA0B,EAAG,CAC5F,MAAMoiB,EAAY3yB,KAAK4yB,KAAO5yB,KAAK4yB,IAAI7K,SAEvC,OAAO,GACLnD,EAAa,CAAC,UAAWpiB,GAAQA,EACjCmwB,GAAa,IAAIA,EACjB3yB,KAAK0yB,eAET,CACF,CAEA,OAAIN,GAAmBD,GACrBtxB,EAAQwxB,eAAe,oBAAoB,GAxEjD,SAAyBQ,GACvB,GAAIpG,GAAMpI,SAASwO,GACjB,IAEE,OADA,EAAWxE,KAAKyE,OAAOD,GAChBpG,GAAM/S,KAAKmZ,EACpB,CAAE,MAAOtK,GACP,GAAe,gBAAXA,EAAE/kB,KACJ,MAAM+kB,CAEV,CAGF,OAAO,EAAY8F,KAAKC,WAAWuE,EACrC,CA4DaE,CAAgBvwB,IAGlBA,CACT,GAEAwwB,kBAAmB,CAAC,SAA2BxwB,GAC7C,MAAMsvB,EAAe9xB,KAAK8xB,cAAgBD,GAASC,aAC7CzB,EAAoByB,GAAgBA,EAAazB,kBACjD4C,EAAsC,SAAtBjzB,KAAKiC,aAE3B,GAAIwqB,GAAMzH,WAAWxiB,IAASiqB,GAAM3H,iBAAiBtiB,GACnD,OAAOA,EAGT,GAAIA,GAAQiqB,GAAMpI,SAAS7hB,KAAW6tB,IAAsBrwB,KAAKiC,cAAiBgxB,GAAgB,CAChG,MACMC,IADoBpB,GAAgBA,EAAa1B,oBACP6C,EAEhD,IACE,OAAO5E,KAAKyE,MAAMtwB,EACpB,CAAE,MAAO+lB,GACP,GAAI2K,EAAmB,CACrB,GAAe,gBAAX3K,EAAE/kB,KACJ,MAAM,GAAW2P,KAAKoV,EAAG,GAAW4K,iBAAkBnzB,KAAM,KAAMA,KAAKyC,UAEzE,MAAM8lB,CACR,CACF,CACF,CAEA,OAAO/lB,CACT,GAMA4wB,QAAS,EAETC,eAAgB,aAChBC,eAAgB,eAEhBC,kBAAmB,EACnBC,eAAgB,EAEhBZ,IAAK,CACH7K,SAAUuK,GAAS9B,QAAQzI,SAC3BkG,KAAMqE,GAAS9B,QAAQvC,MAGzBwF,eAAgB,SAAwBnR,GACtC,OAAOA,GAAU,KAAOA,EAAS,GACnC,EAEAzhB,QAAS,CACP6yB,OAAQ,CACN,OAAU,oCACV,oBAAgB5wB,KAKtB2pB,GAAMxhB,QAAQ,CAAC,SAAU,MAAO,OAAQ,OAAQ,MAAO,SAAW0oB,IAChE9B,GAAShxB,QAAQ8yB,GAAU,CAAC,IAG9B,YE1JMC,GAAoBnH,GAAMzB,YAAY,CAC1C,MAAO,gBAAiB,iBAAkB,eAAgB,OAC1D,UAAW,OAAQ,OAAQ,oBAAqB,sBAChD,gBAAiB,WAAY,eAAgB,sBAC7C,UAAW,cAAe,eCLtB6I,GAAavQ,OAAO,aAE1B,SAASwQ,GAAgBryB,GACvB,OAAOA,GAAUsoB,OAAOtoB,GAAQiY,OAAOlV,aACzC,CAEA,SAASuvB,GAAeryB,GACtB,OAAc,IAAVA,GAA4B,MAATA,EACdA,EAGF+qB,GAAMnhB,QAAQ5J,GAASA,EAAM0D,IAAI2uB,IAAkBhK,OAAOroB,EACnE,CAgBA,SAASsyB,GAAiBnO,EAASnkB,EAAOD,EAAQyM,EAAQ+lB,GACxD,OAAIxH,GAAMtI,WAAWjW,GACZA,EAAO0V,KAAK5jB,KAAM0B,EAAOD,IAG9BwyB,IACFvyB,EAAQD,GAGLgrB,GAAMpI,SAAS3iB,GAEhB+qB,GAAMpI,SAASnW,IACiB,IAA3BxM,EAAM6O,QAAQrC,GAGnBue,GAAMrG,SAASlY,GACVA,EAAOsf,KAAK9rB,QADrB,OANA,EASF,CAsBA,MAAMwyB,GACJ,WAAA70B,CAAYwB,GACVA,GAAWb,KAAK+qB,IAAIlqB,EACtB,CAEA,GAAAkqB,CAAItpB,EAAQ0yB,EAAgBC,GAC1B,MAAMp1B,EAAOgB,KAEb,SAASq0B,EAAUC,EAAQC,EAASC,GAClC,MAAMC,EAAUX,GAAgBS,GAEhC,IAAKE,EACH,MAAM,IAAIrzB,MAAM,0CAGlB,MAAMkC,EAAMmpB,GAAMnH,QAAQtmB,EAAMy1B,KAE5BnxB,QAAqBR,IAAd9D,EAAKsE,KAAmC,IAAbkxB,QAAmC1xB,IAAb0xB,IAAwC,IAAdx1B,EAAKsE,MACzFtE,EAAKsE,GAAOixB,GAAWR,GAAeO,GAE1C,CAEA,MAAMI,EAAa,CAAC7zB,EAAS2zB,IAC3B/H,GAAMxhB,QAAQpK,EAAS,CAACyzB,EAAQC,IAAYF,EAAUC,EAAQC,EAASC,IAEzE,GAAI/H,GAAMjI,cAAc/iB,IAAWA,aAAkBzB,KAAKX,YACxDq1B,EAAWjzB,EAAQ0yB,QACd,GAAG1H,GAAMpI,SAAS5iB,KAAYA,EAASA,EAAOiY,UArEtB,iCAAiC8T,KAqEmB/rB,EArEViY,QAsEvEgb,ED1EN,CAAeC,IACb,MAAMC,EAAS,CAAC,EAChB,IAAItxB,EACA4gB,EACA1K,EAsBJ,OApBAmb,GAAcA,EAAWxJ,MAAM,MAAMlgB,QAAQ,SAAgB4pB,GAC3Drb,EAAIqb,EAAKtkB,QAAQ,KACjBjN,EAAMuxB,EAAKC,UAAU,EAAGtb,GAAGE,OAAOlV,cAClC0f,EAAM2Q,EAAKC,UAAUtb,EAAI,GAAGE,QAEvBpW,GAAQsxB,EAAOtxB,IAAQswB,GAAkBtwB,KAIlC,eAARA,EACEsxB,EAAOtxB,GACTsxB,EAAOtxB,GAAKxC,KAAKojB,GAEjB0Q,EAAOtxB,GAAO,CAAC4gB,GAGjB0Q,EAAOtxB,GAAOsxB,EAAOtxB,GAAOsxB,EAAOtxB,GAAO,KAAO4gB,EAAMA,EAE3D,GAEO0Q,CACR,EC+CgBG,CAAatzB,GAAS0yB,QAC5B,GAAI1H,GAAMlI,SAAS9iB,IAAWgrB,GAAML,WAAW3qB,GAAS,CAC7D,IAAcuzB,EAAM1xB,EAAhB4hB,EAAM,CAAC,EACX,IAAK,MAAM+P,KAASxzB,EAAQ,CAC1B,IAAKgrB,GAAMnhB,QAAQ2pB,GACjB,MAAMvH,UAAU,gDAGlBxI,EAAI5hB,EAAM2xB,EAAM,KAAOD,EAAO9P,EAAI5hB,IAC/BmpB,GAAMnhB,QAAQ0pB,GAAQ,IAAIA,EAAMC,EAAM,IAAM,CAACD,EAAMC,EAAM,IAAOA,EAAM,EAC3E,CAEAP,EAAWxP,EAAKiP,EAClB,MACY,MAAV1yB,GAAkB4yB,EAAUF,EAAgB1yB,EAAQ2yB,GAGtD,OAAOp0B,IACT,CAEA,GAAAk1B,CAAIzzB,EAAQ0zB,GAGV,GAFA1zB,EAASqyB,GAAgBryB,GAEb,CACV,MAAM6B,EAAMmpB,GAAMnH,QAAQtlB,KAAMyB,GAEhC,GAAI6B,EAAK,CACP,MAAM5B,EAAQ1B,KAAKsD,GAEnB,IAAK6xB,EACH,OAAOzzB,EAGT,IAAe,IAAXyzB,EACF,OApHV,SAAqBxR,GACnB,MAAMyR,EAAS7sB,OAAOkb,OAAO,MACvB4R,EAAW,mCACjB,IAAI/hB,EAEJ,KAAQA,EAAQ+hB,EAAS3K,KAAK/G,IAC5ByR,EAAO9hB,EAAM,IAAMA,EAAM,GAG3B,OAAO8hB,CACT,CA0GiBE,CAAY5zB,GAGrB,GAAI+qB,GAAMtI,WAAWgR,GACnB,OAAOA,EAAOvR,KAAK5jB,KAAM0B,EAAO4B,GAGlC,GAAImpB,GAAMrG,SAAS+O,GACjB,OAAOA,EAAOzK,KAAKhpB,GAGrB,MAAM,IAAIgsB,UAAU,yCACtB,CACF,CACF,CAEA,GAAA6H,CAAI9zB,EAAQ+zB,GAGV,GAFA/zB,EAASqyB,GAAgBryB,GAEb,CACV,MAAM6B,EAAMmpB,GAAMnH,QAAQtlB,KAAMyB,GAEhC,SAAU6B,QAAqBR,IAAd9C,KAAKsD,IAAwBkyB,IAAWxB,GAAiBh0B,EAAMA,KAAKsD,GAAMA,EAAKkyB,GAClG,CAEA,OAAO,CACT,CAEA,OAAO/zB,EAAQ+zB,GACb,MAAMx2B,EAAOgB,KACb,IAAIy1B,GAAU,EAEd,SAASC,EAAanB,GAGpB,GAFAA,EAAUT,GAAgBS,GAEb,CACX,MAAMjxB,EAAMmpB,GAAMnH,QAAQtmB,EAAMu1B,IAE5BjxB,GAASkyB,IAAWxB,GAAiBh1B,EAAMA,EAAKsE,GAAMA,EAAKkyB,YACtDx2B,EAAKsE,GAEZmyB,GAAU,EAEd,CACF,CAQA,OANIhJ,GAAMnhB,QAAQ7J,GAChBA,EAAOwJ,QAAQyqB,GAEfA,EAAaj0B,GAGRg0B,CACT,CAEA,KAAAvF,CAAMsF,GACJ,MAAMjgB,EAAOhN,OAAOgN,KAAKvV,MACzB,IAAIwZ,EAAIjE,EAAK4D,OACTsc,GAAU,EAEd,KAAOjc,KAAK,CACV,MAAMlW,EAAMiS,EAAKiE,GACbgc,IAAWxB,GAAiBh0B,EAAMA,KAAKsD,GAAMA,EAAKkyB,GAAS,YACtDx1B,KAAKsD,GACZmyB,GAAU,EAEd,CAEA,OAAOA,CACT,CAEA,SAAAE,CAAU1lB,GACR,MAAMjR,EAAOgB,KACPa,EAAU,CAAC,EAsBjB,OApBA4rB,GAAMxhB,QAAQjL,KAAM,CAAC0B,EAAOD,KAC1B,MAAM6B,EAAMmpB,GAAMnH,QAAQzkB,EAASY,GAEnC,GAAI6B,EAGF,OAFAtE,EAAKsE,GAAOywB,GAAeryB,eACpB1C,EAAKyC,GAId,MAAMm0B,EAAa3lB,EAtKzB,SAAsBxO,GACpB,OAAOA,EAAOiY,OACXlV,cAAcqS,QAAQ,kBAAmB,CAACgf,EAAGC,EAAMnS,IAC3CmS,EAAKvK,cAAgB5H,EAElC,CAiKkCoS,CAAat0B,GAAUsoB,OAAOtoB,GAAQiY,OAE9Dkc,IAAen0B,UACVzC,EAAKyC,GAGdzC,EAAK42B,GAAc7B,GAAeryB,GAElCb,EAAQ+0B,IAAc,IAGjB51B,IACT,CAEA,MAAAstB,IAAU0I,GACR,OAAOh2B,KAAKX,YAAYiuB,OAAOttB,QAASg2B,EAC1C,CAEA,MAAAtJ,CAAOuJ,GACL,MAAM/Q,EAAM3c,OAAOkb,OAAO,MAM1B,OAJAgJ,GAAMxhB,QAAQjL,KAAM,CAAC0B,EAAOD,KACjB,MAATC,IAA2B,IAAVA,IAAoBwjB,EAAIzjB,GAAUw0B,GAAaxJ,GAAMnhB,QAAQ5J,GAASA,EAAM2N,KAAK,MAAQ3N,KAGrGwjB,CACT,CAEA,CAAC5B,OAAOF,YACN,OAAO7a,OAAOopB,QAAQ3xB,KAAK0sB,UAAUpJ,OAAOF,WAC9C,CAEA,QAAA3e,GACE,OAAO8D,OAAOopB,QAAQ3xB,KAAK0sB,UAAUtnB,IAAI,EAAE3D,EAAQC,KAAWD,EAAS,KAAOC,GAAO2N,KAAK,KAC5F,CAEA,YAAA6mB,GACE,OAAOl2B,KAAKk1B,IAAI,eAAiB,EACnC,CAEA,IAAK5R,OAAOD,eACV,MAAO,cACT,CAEA,WAAOlQ,CAAKuQ,GACV,OAAOA,aAAiB1jB,KAAO0jB,EAAQ,IAAI1jB,KAAK0jB,EAClD,CAEA,aAAO4J,CAAO6I,KAAUH,GACtB,MAAMI,EAAW,IAAIp2B,KAAKm2B,GAI1B,OAFAH,EAAQ/qB,QAAS8gB,GAAWqK,EAASrL,IAAIgB,IAElCqK,CACT,CAEA,eAAOC,CAAS50B,GACd,MAIM60B,GAJYt2B,KAAK6zB,IAAe7zB,KAAK6zB,IAAc,CACvDyC,UAAW,CAAC,IAGcA,UACtBpT,EAAYljB,KAAKkjB,UAEvB,SAASqT,EAAehC,GACtB,MAAME,EAAUX,GAAgBS,GAE3B+B,EAAU7B,KAlOrB,SAAwBvP,EAAKzjB,GAC3B,MAAM+0B,EAAe/J,GAAMrB,YAAY,IAAM3pB,GAE7C,CAAC,MAAO,MAAO,OAAOwJ,QAAQwrB,IAC5BluB,OAAO8gB,eAAenE,EAAKuR,EAAaD,EAAc,CACpD90B,MAAO,SAASg1B,EAAMC,EAAMC,GAC1B,OAAO52B,KAAKy2B,GAAY7S,KAAK5jB,KAAMyB,EAAQi1B,EAAMC,EAAMC,EACzD,EACAC,cAAc,KAGpB,CAwNQC,CAAe5T,EAAWqR,GAC1B+B,EAAU7B,IAAW,EAEzB,CAIA,OAFAhI,GAAMnhB,QAAQ7J,GAAUA,EAAOwJ,QAAQsrB,GAAkBA,EAAe90B,GAEjEzB,IACT,EAGFk0B,GAAamC,SAAS,CAAC,eAAgB,iBAAkB,SAAU,kBAAmB,aAAc,kBAGpG5J,GAAMpG,kBAAkB6N,GAAahR,UAAW,EAAExhB,SAAQ4B,KACxD,IAAIyzB,EAASzzB,EAAI,GAAGioB,cAAgBjoB,EAAIugB,MAAM,GAC9C,MAAO,CACLqR,IAAK,IAAMxzB,EACX,GAAAqpB,CAAIiM,GACFh3B,KAAK+2B,GAAUC,CACjB,KAIJvK,GAAM7B,cAAcsJ,IAEpB,YC3Se,SAAS+C,GAAcC,EAAKz0B,GACzC,MAAMnD,EAASU,MAAQ,GACjB6lB,EAAUpjB,GAAYnD,EACtBuB,EAAU,GAAasS,KAAK0S,EAAQhlB,SAC1C,IAAI2B,EAAOqjB,EAAQrjB,KAQnB,OANAiqB,GAAMxhB,QAAQisB,EAAK,SAAmBpU,GACpCtgB,EAAOsgB,EAAGc,KAAKtkB,EAAQkD,EAAM3B,EAAQ80B,YAAalzB,EAAWA,EAAS6f,YAASxf,EACjF,GAEAjC,EAAQ80B,YAEDnzB,CACT,CCzBe,SAAS20B,GAASz1B,GAC/B,SAAUA,IAASA,EAAM01B,WAC3B,CCUA,SAASC,GAAcrzB,EAAS1E,EAAQitB,GAEtC,GAAW3I,KAAK5jB,KAAiB,MAAXgE,EAAkB,WAAaA,EAAS,GAAWszB,aAAch4B,EAAQitB,GAC/FvsB,KAAKwD,KAAO,eACd,CAEAipB,GAAMvD,SAASmO,GAAe,GAAY,CACxCD,YAAY,IAGd,YCXe,SAASG,GAAOtb,EAASub,EAAQ/0B,GAC9C,MAAMgxB,EAAiBhxB,EAASnD,OAAOm0B,eAClChxB,EAAS6f,QAAWmR,IAAkBA,EAAehxB,EAAS6f,QAGjEkV,EAAO,IAAI,GACT,mCAAqC/0B,EAAS6f,OAC9C,CAAC,GAAWmV,gBAAiB,GAAWtE,kBAAkBvR,KAAKc,MAAMjgB,EAAS6f,OAAS,KAAO,GAC9F7f,EAASnD,OACTmD,EAAS8pB,QACT9pB,IAPFwZ,EAAQxZ,EAUZ,CC4BA,MClDai1B,GAAuB,CAACC,EAAUC,EAAkBC,EAAO,KACtE,IAAIC,EAAgB,EACpB,MAAMC,EDER,SAAqBC,EAAcxV,GACjCwV,EAAeA,GAAgB,GAC/B,MAAMC,EAAQ,IAAI5sB,MAAM2sB,GAClBE,EAAa,IAAI7sB,MAAM2sB,GAC7B,IAEIG,EAFAC,EAAO,EACPC,EAAO,EAKX,OAFA7V,OAAc1f,IAAR0f,EAAoBA,EAAM,IAEzB,SAAc8V,GACnB,MAAMC,EAAM7W,KAAK6W,MAEXC,EAAYN,EAAWG,GAExBF,IACHA,EAAgBI,GAGlBN,EAAMG,GAAQE,EACdJ,EAAWE,GAAQG,EAEnB,IAAI/e,EAAI6e,EACJI,EAAa,EAEjB,KAAOjf,IAAM4e,GACXK,GAAcR,EAAMze,KACpBA,GAAQwe,EASV,GANAI,GAAQA,EAAO,GAAKJ,EAEhBI,IAASC,IACXA,GAAQA,EAAO,GAAKL,GAGlBO,EAAMJ,EAAgB3V,EACxB,OAGF,MAAMkW,EAASF,GAAaD,EAAMC,EAElC,OAAOE,EAAS9W,KAAK+W,MAAmB,IAAbF,EAAoBC,QAAU51B,CAC3D,CACF,CC9CuB,CAAY,GAAI,KAErC,OCFF,SAAkBggB,EAAI+U,GACpB,IAEIe,EACAC,EAHApgB,EAAY,EACZqgB,EAAY,IAAOjB,EAIvB,MAAMkB,EAAS,CAACC,EAAMT,EAAM7W,KAAK6W,SAC/B9f,EAAY8f,EACZK,EAAW,KACPC,IACFI,aAAaJ,GACbA,EAAQ,MAEV/V,KAAMkW,IAqBR,MAAO,CAlBW,IAAIA,KACpB,MAAMT,EAAM7W,KAAK6W,MACXG,EAASH,EAAM9f,EAChBigB,GAAUI,EACbC,EAAOC,EAAMT,IAEbK,EAAWI,EACNH,IACHA,EAAQ3c,WAAW,KACjB2c,EAAQ,KACRE,EAAOH,IACNE,EAAYJ,MAKP,IAAME,GAAYG,EAAOH,GAGzC,CDjCS,CAASrQ,IACd,MAAM2Q,EAAS3Q,EAAE2Q,OACXC,EAAQ5Q,EAAE6Q,iBAAmB7Q,EAAE4Q,WAAQr2B,EACvCu2B,EAAgBH,EAASpB,EACzBwB,EAAOvB,EAAasB,GAG1BvB,EAAgBoB,EAchBvB,EAZa,CACXuB,SACAC,QACAI,SAAUJ,EAASD,EAASC,OAASr2B,EACrCm1B,MAAOoB,EACPC,KAAMA,QAAcx2B,EACpB02B,UAAWF,GAAQH,GAVLD,GAAUC,GAUeA,EAAQD,GAAUI,OAAOx2B,EAChE22B,MAAOlR,EACP6Q,iBAA2B,MAATD,EAClB,CAACvB,EAAmB,WAAa,WAAW,KAI7CC,IAGQ6B,GAAyB,CAACP,EAAOQ,KAC5C,MAAMP,EAA4B,MAATD,EAEzB,MAAO,CAAED,GAAWS,EAAU,GAAG,CAC/BP,mBACAD,QACAD,WACES,EAAU,KAGHC,GAAkB9W,GAAO,IAAIkW,IAASvM,GAAMhF,KAAK,IAAM3E,KAAMkW,IEzC1E,GAAe1G,GAASvB,sBAAwB,EAAEK,EAAQyI,IAAYj4B,IACpEA,EAAM,IAAI2a,IAAI3a,EAAK0wB,GAASlB,QAG1BA,EAAO0I,WAAal4B,EAAIk4B,UACxB1I,EAAO7tB,OAAS3B,EAAI2B,OACnBs2B,GAAUzI,EAAO2I,OAASn4B,EAAIm4B,OANa,CAS9C,IAAIxd,IAAI+V,GAASlB,QACjBkB,GAASxB,WAAa,kBAAkBtD,KAAK8E,GAASxB,UAAUkJ,YAC9D,KAAM,ECVV,GAAe1H,GAASvB,sBAGtB,CACE,KAAAkJ,CAAMz2B,EAAM9B,EAAOw4B,EAAS9M,EAAM7sB,EAAQ45B,GACxC,MAAMC,EAAS,CAAC52B,EAAO,IAAMwrB,mBAAmBttB,IAEhD+qB,GAAMnI,SAAS4V,IAAYE,EAAOt5B,KAAK,WAAa,IAAI4gB,KAAKwY,GAASG,eAEtE5N,GAAMpI,SAAS+I,IAASgN,EAAOt5B,KAAK,QAAUssB,GAE9CX,GAAMpI,SAAS9jB,IAAW65B,EAAOt5B,KAAK,UAAYP,IAEvC,IAAX45B,GAAmBC,EAAOt5B,KAAK,UAE/B8vB,SAASwJ,OAASA,EAAO/qB,KAAK,KAChC,EAEA,IAAAirB,CAAK92B,GACH,MAAM8P,EAAQsd,SAASwJ,OAAO9mB,MAAM,IAAIwD,OAAO,aAAetT,EAAO,cACrE,OAAQ8P,EAAQinB,mBAAmBjnB,EAAM,IAAM,IACjD,EAEA,MAAAknB,CAAOh3B,GACLxD,KAAKi6B,MAAMz2B,EAAM,GAAIke,KAAK6W,MAAQ,MACpC,GAMF,CACE,KAAA0B,GAAS,EACTK,KAAI,IACK,KAET,MAAAE,GAAU,GCxBC,SAASC,GAAcC,EAASC,EAAcC,GAC3D,IAAIC,GCHG,8BAA8BrN,KDGFmN,GACnC,OAAID,IAAYG,GAAsC,GAArBD,GEPpB,SAAqBF,EAASI,GAC3C,OAAOA,EACHJ,EAAQ7jB,QAAQ,SAAU,IAAM,IAAMikB,EAAYjkB,QAAQ,OAAQ,IAClE6jB,CACN,CFIWK,CAAYL,EAASC,GAEvBA,CACT,CGhBA,MAAMK,GAAmBtX,GAAUA,aAAiB,GAAe,IAAKA,GAAUA,EAWnE,SAASuX,GAAYC,EAASC,GAE3CA,EAAUA,GAAW,CAAC,EACtB,MAAM77B,EAAS,CAAC,EAEhB,SAAS87B,EAAerP,EAAQzE,EAAQnB,EAAMwC,GAC5C,OAAI8D,GAAMjI,cAAcuH,IAAWU,GAAMjI,cAAc8C,GAC9CmF,GAAM/D,MAAM9E,KAAK,CAAC+E,YAAWoD,EAAQzE,GACnCmF,GAAMjI,cAAc8C,GACtBmF,GAAM/D,MAAM,CAAC,EAAGpB,GACdmF,GAAMnhB,QAAQgc,GAChBA,EAAOzD,QAETyD,CACT,CAGA,SAAS+T,EAAoB3nB,EAAGC,EAAGwS,EAAOwC,GACxC,OAAK8D,GAAMzI,YAAYrQ,GAEX8Y,GAAMzI,YAAYtQ,QAAvB,EACE0nB,OAAet4B,EAAW4Q,EAAGyS,EAAOwC,GAFpCyS,EAAe1nB,EAAGC,EAAGwS,EAAOwC,EAIvC,CAGA,SAAS2S,EAAiB5nB,EAAGC,GAC3B,IAAK8Y,GAAMzI,YAAYrQ,GACrB,OAAOynB,OAAet4B,EAAW6Q,EAErC,CAGA,SAAS4nB,EAAiB7nB,EAAGC,GAC3B,OAAK8Y,GAAMzI,YAAYrQ,GAEX8Y,GAAMzI,YAAYtQ,QAAvB,EACE0nB,OAAet4B,EAAW4Q,GAF1B0nB,OAAet4B,EAAW6Q,EAIrC,CAGA,SAAS6nB,EAAgB9nB,EAAGC,EAAGwS,GAC7B,OAAIA,KAAQgV,EACHC,EAAe1nB,EAAGC,GAChBwS,KAAQ+U,EACVE,OAAet4B,EAAW4Q,QAD5B,CAGT,CAEA,MAAM+nB,EAAW,CACf75B,IAAK05B,EACL3H,OAAQ2H,EACR94B,KAAM84B,EACNZ,QAASa,EACTvJ,iBAAkBuJ,EAClBvI,kBAAmBuI,EACnBG,iBAAkBH,EAClBnI,QAASmI,EACTI,eAAgBJ,EAChBK,gBAAiBL,EACjBM,cAAeN,EACfxJ,QAASwJ,EACTt5B,aAAcs5B,EACdlI,eAAgBkI,EAChBjI,eAAgBiI,EAChBO,iBAAkBP,EAClBQ,mBAAoBR,EACpBS,WAAYT,EACZhI,iBAAkBgI,EAClB/H,cAAe+H,EACfU,eAAgBV,EAChBW,UAAWX,EACXY,UAAWZ,EACXa,WAAYb,EACZv5B,YAAau5B,EACbc,WAAYd,EACZe,iBAAkBf,EAClB9H,eAAgB+H,EAChB36B,QAAS,CAAC6S,EAAGC,EAAIwS,IAASkV,EAAoBL,GAAgBtnB,GAAIsnB,GAAgBrnB,GAAGwS,GAAM,IAS7F,OANAsG,GAAMxhB,QAAQ1C,OAAOgN,KAAK,IAAI2lB,KAAYC,IAAW,SAA4BhV,GAC/E,MAAMuC,EAAQ+S,EAAStV,IAASkV,EAC1BkB,EAAc7T,EAAMwS,EAAQ/U,GAAOgV,EAAQhV,GAAOA,GACvDsG,GAAMzI,YAAYuY,IAAgB7T,IAAU8S,IAAqBl8B,EAAO6mB,GAAQoW,EACnF,GAEOj9B,CACT,CChGA,SAAgBA,IACd,MAAMk9B,EAAYvB,GAAY,CAAC,EAAG37B,GAElC,IAaI2yB,GAbA,KAACzvB,EAAI,cAAEq5B,EAAa,eAAEvI,EAAc,eAAED,EAAc,QAAExyB,EAAO,KAAE47B,GAAQD,EAe3E,GAbAA,EAAU37B,QAAUA,EAAU,GAAasS,KAAKtS,GAEhD27B,EAAU56B,IAAM0tB,GAASmL,GAAc+B,EAAU9B,QAAS8B,EAAU56B,IAAK46B,EAAU5B,mBAAoBt7B,EAAO4vB,OAAQ5vB,EAAOo8B,kBAGzHe,GACF57B,EAAQkqB,IAAI,gBAAiB,SAC3B2R,MAAMD,EAAKE,UAAY,IAAM,KAAOF,EAAKG,SAAWC,SAAS7N,mBAAmByN,EAAKG,WAAa,MAMlGnQ,GAAM5E,WAAWrlB,GACnB,GAAI8vB,GAASvB,uBAAyBuB,GAASrB,+BAC7CpwB,EAAQwxB,oBAAevvB,QAClB,IAAiD,KAA5CmvB,EAAcpxB,EAAQqxB,kBAA6B,CAE7D,MAAOjqB,KAASmtB,GAAUnD,EAAcA,EAAY9G,MAAM,KAAK/lB,IAAI+hB,GAASA,EAAMzN,QAAQxL,OAAO4uB,SAAW,GAC5Gj8B,EAAQwxB,eAAe,CAACpqB,GAAQ,yBAA0BmtB,GAAQ/lB,KAAK,MACzE,CAOF,GAAIijB,GAASvB,wBACX8K,GAAiBpP,GAAMtI,WAAW0X,KAAmBA,EAAgBA,EAAcW,IAE/EX,IAAoC,IAAlBA,GAA2BkB,GAAgBP,EAAU56B,MAAO,CAEhF,MAAMo7B,EAAY1J,GAAkBD,GAAkB4J,GAAQ3C,KAAKjH,GAE/D2J,GACFn8B,EAAQkqB,IAAIuI,EAAgB0J,EAEhC,CAGF,OAAOR,CACR,EC1CD,GAFwD,oBAAnBU,gBAEG,SAAU59B,GAChD,OAAO,IAAI0c,QAAQ,SAA4BC,EAASub,GACtD,MAAM2F,EAAUC,GAAc99B,GAC9B,IAAI+9B,EAAcF,EAAQ36B,KAC1B,MAAM86B,EAAiB,GAAanqB,KAAKgqB,EAAQt8B,SAAS80B,YAC1D,IACI4H,EACAC,EAAiBC,EACjBC,EAAaC,GAHb,aAAC17B,EAAY,iBAAE65B,EAAgB,mBAAEC,GAAsBoB,EAK3D,SAAS7S,IACPoT,GAAeA,IACfC,GAAiBA,IAEjBR,EAAQn7B,aAAem7B,EAAQn7B,YAAY47B,YAAYL,GAEvDJ,EAAQU,QAAUV,EAAQU,OAAOC,oBAAoB,QAASP,EAChE,CAEA,IAAIhR,EAAU,IAAI2Q,eAOlB,SAASa,IACP,IAAKxR,EACH,OAGF,MAAMyR,EAAkB,GAAa7qB,KACnC,0BAA2BoZ,GAAWA,EAAQ0R,yBAahD1G,GAAO,SAAkB71B,GACvBua,EAAQva,GACR4oB,GACF,EAAG,SAAiB4T,GAClB1G,EAAO0G,GACP5T,GACF,EAfiB,CACf9nB,KAHoBP,GAAiC,SAAjBA,GAA4C,SAAjBA,EACxCsqB,EAAQ9pB,SAA/B8pB,EAAQ4R,aAGR7b,OAAQiK,EAAQjK,OAChB8b,WAAY7R,EAAQ6R,WACpBv9B,QAASm9B,EACT1+B,SACAitB,YAYFA,EAAU,IACZ,CAlCAA,EAAQ8R,KAAKlB,EAAQxJ,OAAOpI,cAAe4R,EAAQv7B,KAAK,GAGxD2qB,EAAQ6G,QAAU+J,EAAQ/J,QAiCtB,cAAe7G,EAEjBA,EAAQwR,UAAYA,EAGpBxR,EAAQ+R,mBAAqB,WACtB/R,GAAkC,IAAvBA,EAAQgS,aAQD,IAAnBhS,EAAQjK,QAAkBiK,EAAQiS,aAAwD,IAAzCjS,EAAQiS,YAAYjuB,QAAQ,WAKjF2L,WAAW6hB,EACb,EAIFxR,EAAQkS,QAAU,WACXlS,IAILiL,EAAO,IAAI,GAAW,kBAAmB,GAAWkH,aAAcp/B,EAAQitB,IAG1EA,EAAU,KACZ,EAGAA,EAAQoS,QAAU,WAGhBnH,EAAO,IAAI,GAAW,gBAAiB,GAAWoH,YAAat/B,EAAQitB,IAGvEA,EAAU,IACZ,EAGAA,EAAQsS,UAAY,WAClB,IAAIC,EAAsB3B,EAAQ/J,QAAU,cAAgB+J,EAAQ/J,QAAU,cAAgB,mBAC9F,MAAMtB,EAAeqL,EAAQrL,cAAgB,GACzCqL,EAAQ2B,sBACVA,EAAsB3B,EAAQ2B,qBAEhCtH,EAAO,IAAI,GACTsH,EACAhN,EAAaxB,oBAAsB,GAAWyO,UAAY,GAAWL,aACrEp/B,EACAitB,IAGFA,EAAU,IACZ,OAGgBzpB,IAAhBu6B,GAA6BC,EAAejL,eAAe,MAGvD,qBAAsB9F,GACxBE,GAAMxhB,QAAQqyB,EAAe5Q,SAAU,SAA0BxI,EAAK5gB,GACpEipB,EAAQyS,iBAAiB17B,EAAK4gB,EAChC,GAIGuI,GAAMzI,YAAYmZ,EAAQvB,mBAC7BrP,EAAQqP,kBAAoBuB,EAAQvB,iBAIlC35B,GAAiC,SAAjBA,IAClBsqB,EAAQtqB,aAAek7B,EAAQl7B,cAI7B85B,KACA0B,EAAmBE,GAAiBjG,GAAqBqE,GAAoB,GAC/ExP,EAAQlF,iBAAiB,WAAYoW,IAInC3B,GAAoBvP,EAAQ0S,UAC5BzB,EAAiBE,GAAehG,GAAqBoE,GAEvDvP,EAAQ0S,OAAO5X,iBAAiB,WAAYmW,GAE5CjR,EAAQ0S,OAAO5X,iBAAiB,UAAWqW,KAGzCP,EAAQn7B,aAAem7B,EAAQU,UAGjCN,EAAa2B,IACN3S,IAGLiL,GAAQ0H,GAAUA,EAAOj3B,KAAO,IAAI,GAAc,KAAM3I,EAAQitB,GAAW2S,GAC3E3S,EAAQ4S,QACR5S,EAAU,OAGZ4Q,EAAQn7B,aAAem7B,EAAQn7B,YAAYo9B,UAAU7B,GACjDJ,EAAQU,SACVV,EAAQU,OAAOwB,QAAU9B,IAAeJ,EAAQU,OAAOxW,iBAAiB,QAASkW,KAIrF,MAAMzD,ECvLK,SAAuBl4B,GACpC,MAAM0R,EAAQ,4BAA4BoX,KAAK9oB,GAC/C,OAAO0R,GAASA,EAAM,IAAM,EAC9B,CDoLqBgsB,CAAcnC,EAAQv7B,KAEnCk4B,IAAsD,IAA1CxH,GAAS5B,UAAUngB,QAAQupB,GACzCtC,EAAO,IAAI,GAAW,wBAA0BsC,EAAW,IAAK,GAAWrC,gBAAiBn4B,IAM9FitB,EAAQgT,KAAKlC,GAAe,KAC9B,EACF,EErJA,GA3CuB,CAACmC,EAASpM,KAC/B,MAAM,OAACja,GAAWqmB,EAAUA,EAAUA,EAAQtxB,OAAO4uB,SAAW,GAEhE,GAAI1J,GAAWja,EAAQ,CACrB,IAEIkmB,EAFAI,EAAa,IAAIC,gBAIrB,MAAMjB,EAAU,SAAUkB,GACxB,IAAKN,EAAS,CACZA,GAAU,EACVzB,IACA,MAAMM,EAAMyB,aAAkBv+B,MAAQu+B,EAAS3/B,KAAK2/B,OACpDF,EAAWN,MAAMjB,aAAe,GAAaA,EAAM,IAAI,GAAcA,aAAe98B,MAAQ88B,EAAIl6B,QAAUk6B,GAC5G,CACF,EAEA,IAAIrF,EAAQzF,GAAWlX,WAAW,KAChC2c,EAAQ,KACR4F,EAAQ,IAAI,GAAW,WAAWrL,mBAA0B,GAAW2L,aACtE3L,GAEH,MAAMwK,EAAc,KACd4B,IACF3G,GAASI,aAAaJ,GACtBA,EAAQ,KACR2G,EAAQv0B,QAAQ4yB,IACdA,EAAOD,YAAcC,EAAOD,YAAYa,GAAWZ,EAAOC,oBAAoB,QAASW,KAEzFe,EAAU,OAIdA,EAAQv0B,QAAS4yB,GAAWA,EAAOxW,iBAAiB,QAASoX,IAE7D,MAAM,OAACZ,GAAU4B,EAIjB,OAFA5B,EAAOD,YAAc,IAAMnR,GAAMhF,KAAKmW,GAE/BC,CACT,GC3CW+B,GAAc,UAAWC,EAAOC,GAC3C,IAAIza,EAAMwa,EAAME,WAEhB,IAAKD,GAAaza,EAAMya,EAEtB,kBADMD,GAIR,IACIG,EADAC,EAAM,EAGV,KAAOA,EAAM5a,GACX2a,EAAMC,EAAMH,QACND,EAAMhc,MAAMoc,EAAKD,GACvBC,EAAMD,CAEV,EA4BaE,GAAc,CAACC,EAAQL,EAAWM,EAAYC,KACzD,MAAMjd,EA3BiBkd,gBAAiBC,EAAUT,GAClD,UAAW,MAAMD,KAKAS,gBAAiBH,GAClC,GAAIA,EAAO7c,OAAOkd,eAEhB,kBADOL,GAIT,MAAMM,EAASN,EAAOO,YACtB,IACE,OAAS,CACP,MAAM,KAACpW,EAAI,MAAE5oB,SAAe++B,EAAOnG,OACnC,GAAIhQ,EACF,YAEI5oB,CACR,CACF,CAAE,cACM++B,EAAOvB,QACf,CACF,CAvB4ByB,CAAWJ,SAC5BX,GAAYC,EAAOC,EAE9B,CAuBmBc,CAAUT,EAAQL,GAEnC,IACIxV,EADA2N,EAAQ,EAER4I,EAAatY,IACV+B,IACHA,GAAO,EACP+V,GAAYA,EAAS9X,KAIzB,OAAO,IAAIuY,eAAe,CACxB,UAAMC,CAAKtB,GACT,IACE,MAAM,KAACnV,EAAI,MAAE5oB,SAAe0hB,EAASiH,OAErC,GAAIC,EAGF,OAFDuW,SACCpB,EAAWuB,QAIb,IAAI3b,EAAM3jB,EAAMq+B,WAChB,GAAIK,EAAY,CACd,IAAIa,EAAchJ,GAAS5S,EAC3B+a,EAAWa,EACb,CACAxB,EAAWyB,QAAQ,IAAIlb,WAAWtkB,GACpC,CAAE,MAAOw8B,GAEP,MADA2C,EAAU3C,GACJA,CACR,CACF,EACAgB,OAAOS,IACLkB,EAAUlB,GACHvc,EAAS+d,WAEjB,CACDC,cAAe,KC1EbC,GAAoC,mBAAVC,OAA2C,mBAAZC,SAA8C,mBAAbC,SAC1FC,GAA4BJ,IAA8C,mBAAnBP,eAGvDY,GAAaL,KAA4C,mBAAhBM,aACzCvS,GAA0C,IAAIuS,YAAjChe,GAAQyL,GAAQN,OAAOnL,IACtC2c,MAAO3c,GAAQ,IAAIqC,iBAAiB,IAAIwb,SAAS7d,GAAKie,gBADtD,IAAExS,GAIN,MAAM5B,GAAO,CAAC1K,KAAOkW,KACnB,IACE,QAASlW,KAAMkW,EACjB,CAAE,MAAOzQ,GACP,OAAO,CACT,GAGIsZ,GAAwBJ,IAA6BjU,GAAK,KAC9D,IAAIsU,GAAiB,EAErB,MAAMC,EAAiB,IAAIR,QAAQjP,GAASlB,OAAQ,CAClDvvB,KAAM,IAAIi/B,eACVnN,OAAQ,OACR,UAAIqO,GAEF,OADAF,GAAiB,EACV,MACT,IACCjhC,QAAQ00B,IAAI,gBAEf,OAAOuM,IAAmBC,IAKtBE,GAAyBR,IAC7BjU,GAAK,IAAMf,GAAM3H,iBAAiB,IAAI0c,SAAS,IAAI3/B,OAG/CqgC,GAAY,CAChB/B,OAAQ8B,IAA0B,CAAEE,GAAQA,EAAItgC,OAG7B,IAAEsgC,GAAvBd,KAAuBc,GAOpB,IAAIX,SANL,CAAC,OAAQ,cAAe,OAAQ,WAAY,UAAUv2B,QAAQhD,KAC3Di6B,GAAUj6B,KAAUi6B,GAAUj6B,GAAQwkB,GAAMtI,WAAWge,GAAIl6B,IAAUk6B,GAAQA,EAAIl6B,KAChF,CAACm6B,EAAG9iC,KACF,MAAM,IAAI,GAAW,kBAAkB2I,sBAA0B,GAAWo6B,gBAAiB/iC,QAKrG,MCvDMgjC,GAAgB,CACpBC,KCNF,KDOEC,IAAKA,GACLlB,MDwFaD,IAAoB,OAAQ/hC,IACzC,IAAI,IACFsC,EAAG,OACH+xB,EAAM,KACNnxB,EAAI,OACJq7B,EAAM,YACN77B,EAAW,QACXoxB,EAAO,mBACP2I,EAAkB,iBAClBD,EAAgB,aAChB75B,EAAY,QACZpB,EAAO,gBACP+6B,EAAkB,cAAa,aAC/B6G,GACErF,GAAc99B,GAElB2C,EAAeA,GAAgBA,EAAe,IAAIuC,cAAgB,OAElE,IAEI+nB,EAFAmW,EAAiB,GAAe,CAAC7E,EAAQ77B,GAAeA,EAAY2gC,iBAAkBvP,GAI1F,MAAMwK,EAAc8E,GAAkBA,EAAe9E,aAAe,MAChE8E,EAAe9E,aAClB,GAED,IAAIgF,EAEJ,IACE,GACE9G,GAAoB+F,IAAoC,QAAXlO,GAA+B,SAAXA,GACG,KAAnEiP,OArCmBtC,OAAOz/B,EAASgB,KACxC,MAAMsX,EAASsT,GAAMhB,eAAe5qB,EAAQgiC,oBAE5C,OAAiB,MAAV1pB,EAjCamnB,OAAOz+B,IAC3B,GAAY,MAARA,EACF,OAAO,EAGT,GAAG4qB,GAAM9H,OAAO9iB,GACd,OAAOA,EAAKihC,KAGd,GAAGrW,GAAMd,oBAAoB9pB,GAAO,CAClC,MAAMkhC,EAAW,IAAIxB,QAAQjP,GAASlB,OAAQ,CAC5CuC,OAAQ,OACR9xB,SAEF,aAAckhC,EAASnB,eAAe7B,UACxC,CAEA,OAAGtT,GAAMxE,kBAAkBpmB,IAAS4qB,GAAMrI,cAAcviB,GAC/CA,EAAKk+B,YAGXtT,GAAM5H,kBAAkBhjB,KACzBA,GAAc,IAGb4qB,GAAMpI,SAASxiB,UACF6/B,GAAW7/B,IAAOk+B,gBADlC,IAQwBiD,CAAcnhC,GAAQsX,GAkCZ8pB,CAAkBpiC,EAAS2B,IACzD,CACA,IAMI0gC,EANAH,EAAW,IAAIxB,QAAQ3/B,EAAK,CAC9B+xB,OAAQ,OACR9xB,KAAMW,EACNw/B,OAAQ,SASV,GAJIvV,GAAM5E,WAAWrlB,KAAU0gC,EAAoBH,EAASliC,QAAQq0B,IAAI,kBACtEr0B,EAAQwxB,eAAe6Q,GAGrBH,EAASlhC,KAAM,CACjB,MAAOu+B,EAAY+C,GAASzJ,GAC1BkJ,EACAlL,GAAqBkC,GAAekC,KAGtCt5B,EAAO09B,GAAY6C,EAASlhC,KA1GT,MA0GmCu+B,EAAY+C,EACpE,CACF,CAEK1W,GAAMpI,SAASuX,KAClBA,EAAkBA,EAAkB,UAAY,QAKlD,MAAMwH,EAAyB,gBAAiB7B,QAAQre,UACxDqJ,EAAU,IAAIgV,QAAQ3/B,EAAK,IACtB6gC,EACH5E,OAAQ6E,EACR/O,OAAQA,EAAOpI,cACf1qB,QAASA,EAAQ80B,YAAYjJ,SAC7B7qB,KAAMW,EACNw/B,OAAQ,OACRqB,YAAaD,EAAyBxH,OAAkB94B,IAG1D,IAAIL,QAAiB6+B,MAAM/U,EAASkW,GAEpC,MAAMa,EAAmBrB,KAA4C,WAAjBhgC,GAA8C,aAAjBA,GAEjF,GAAIggC,KAA2BlG,GAAuBuH,GAAoB1F,GAAe,CACvF,MAAM79B,EAAU,CAAC,EAEjB,CAAC,SAAU,aAAc,WAAWkL,QAAQkb,IAC1CpmB,EAAQomB,GAAQ1jB,EAAS0jB,KAG3B,MAAMod,EAAwB9W,GAAMhB,eAAehpB,EAAS5B,QAAQq0B,IAAI,oBAEjEkL,EAAY+C,GAASpH,GAAsBrC,GAChD6J,EACA7L,GAAqBkC,GAAemC,IAAqB,KACtD,GAELt5B,EAAW,IAAI++B,SACbtB,GAAYz9B,EAASZ,KAlJF,MAkJ4Bu+B,EAAY,KACzD+C,GAASA,IACTvF,GAAeA,MAEjB79B,EAEJ,CAEAkC,EAAeA,GAAgB,OAE/B,IAAIuhC,QAAqBtB,GAAUzV,GAAMnH,QAAQ4c,GAAWjgC,IAAiB,QAAQQ,EAAUnD,GAI/F,OAFCgkC,GAAoB1F,GAAeA,UAEvB,IAAI5hB,QAAQ,CAACC,EAASub,KACjCD,GAAOtb,EAASub,EAAQ,CACtBh1B,KAAMghC,EACN3iC,QAAS,GAAasS,KAAK1Q,EAAS5B,SACpCyhB,OAAQ7f,EAAS6f,OACjB8b,WAAY37B,EAAS27B,WACrB9+B,SACAitB,aAGN,CAAE,MAAO2R,GAGP,GAFAN,GAAeA,IAEXM,GAAoB,cAAbA,EAAI16B,MAAwB,qBAAqBgqB,KAAK0Q,EAAIl6B,SACnE,MAAMuE,OAAO+gB,OACX,IAAI,GAAW,gBAAiB,GAAWsV,YAAat/B,EAAQitB,GAChE,CACES,MAAOkR,EAAIlR,OAASkR,IAK1B,MAAM,GAAW/qB,KAAK+qB,EAAKA,GAAOA,EAAI5R,KAAMhtB,EAAQitB,EACtD,CACD,ICtNDE,GAAMxhB,QAAQq3B,GAAe,CAACxf,EAAIphB,KAChC,GAAIohB,EAAI,CACN,IACEva,OAAO8gB,eAAevG,EAAI,OAAQ,CAACphB,SACrC,CAAE,MAAO6mB,GAET,CACAhgB,OAAO8gB,eAAevG,EAAI,cAAe,CAACphB,SAC5C,IAGF,MAAM+hC,GAAgB9D,GAAW,KAAKA,IAEhC+D,GAAoB3R,GAAYtF,GAAMtI,WAAW4N,IAAwB,OAAZA,IAAgC,IAAZA,EAEvF,GACe4R,IACXA,EAAWlX,GAAMnhB,QAAQq4B,GAAYA,EAAW,CAACA,GAEjD,MAAM,OAACxqB,GAAUwqB,EACjB,IAAIC,EACA7R,EAEJ,MAAM8R,EAAkB,CAAC,EAEzB,IAAK,IAAIrqB,EAAI,EAAGA,EAAIL,EAAQK,IAAK,CAE/B,IAAI3O,EAIJ,GALA+4B,EAAgBD,EAASnqB,GAGzBuY,EAAU6R,GAELF,GAAiBE,KACpB7R,EAAUuQ,IAAez3B,EAAKkf,OAAO6Z,IAAgBp/B,oBAErC1B,IAAZivB,GACF,MAAM,IAAI,GAAW,oBAAoBlnB,MAI7C,GAAIknB,EACF,MAGF8R,EAAgBh5B,GAAM,IAAM2O,GAAKuY,CACnC,CAEA,IAAKA,EAAS,CAEZ,MAAM+R,EAAUv7B,OAAOopB,QAAQkS,GAC5Bz+B,IAAI,EAAEyF,EAAIk5B,KAAW,WAAWl5B,OACpB,IAAVk5B,EAAkB,sCAAwC,kCAG/D,IAAIC,EAAI7qB,EACL2qB,EAAQ3qB,OAAS,EAAI,YAAc2qB,EAAQ1+B,IAAIq+B,IAAcp0B,KAAK,MAAQ,IAAMo0B,GAAaK,EAAQ,IACtG,0BAEF,MAAM,IAAI,GACR,wDAA0DE,EAC1D,kBAEJ,CAEA,OAAOjS,GE3DX,SAASkS,GAA6B3kC,GAKpC,GAJIA,EAAO0C,aACT1C,EAAO0C,YAAYkiC,mBAGjB5kC,EAAOu+B,QAAUv+B,EAAOu+B,OAAOwB,QACjC,MAAM,IAAI,GAAc,KAAM//B,EAElC,CASe,SAAS6kC,GAAgB7kC,GAiBtC,OAhBA2kC,GAA6B3kC,GAE7BA,EAAOuB,QAAU,GAAasS,KAAK7T,EAAOuB,SAG1CvB,EAAOkD,KAAOy0B,GAAcrT,KAC1BtkB,EACAA,EAAO0yB,mBAGgD,IAArD,CAAC,OAAQ,MAAO,SAASzhB,QAAQjR,EAAOq0B,SAC1Cr0B,EAAOuB,QAAQwxB,eAAe,qCAAqC,GAGrDsR,GAAoBrkC,EAAOyyB,SAAW,GAASA,QAExDA,CAAQzyB,GAAQ4sB,KAAK,SAA6BzpB,GAYvD,OAXAwhC,GAA6B3kC,GAG7BmD,EAASD,KAAOy0B,GAAcrT,KAC5BtkB,EACAA,EAAO0zB,kBACPvwB,GAGFA,EAAS5B,QAAU,GAAasS,KAAK1Q,EAAS5B,SAEvC4B,CACT,EAAG,SAA4Bk9B,GAe7B,OAdKxI,GAASwI,KACZsE,GAA6B3kC,GAGzBqgC,GAAUA,EAAOl9B,WACnBk9B,EAAOl9B,SAASD,KAAOy0B,GAAcrT,KACnCtkB,EACAA,EAAO0zB,kBACP2M,EAAOl9B,UAETk9B,EAAOl9B,SAAS5B,QAAU,GAAasS,KAAKwsB,EAAOl9B,SAAS5B,WAIzDmb,QAAQwb,OAAOmI,EACxB,EACF,CChFO,MAAMyE,GAAU,SCKjBC,GAAa,CAAC,EAGpB,CAAC,SAAU,UAAW,SAAU,WAAY,SAAU,UAAUp5B,QAAQ,CAAChD,EAAMuR,KAC7E6qB,GAAWp8B,GAAQ,SAAmByb,GACpC,cAAcA,IAAUzb,GAAQ,KAAOuR,EAAI,EAAI,KAAO,KAAOvR,CAC/D,IAGF,MAAMq8B,GAAqB,CAAC,EAW5BD,GAAWvS,aAAe,SAAsByS,EAAW9gC,EAASO,GAClE,SAASwgC,EAAcC,EAAKC,GAC1B,MAAO,WAAaN,GAAU,0BAA6BK,EAAM,IAAOC,GAAQ1gC,EAAU,KAAOA,EAAU,GAC7G,CAGA,MAAO,CAACtC,EAAO+iC,EAAKE,KAClB,IAAkB,IAAdJ,EACF,MAAM,IAAI,GACRC,EAAcC,EAAK,qBAAuBhhC,EAAU,OAASA,EAAU,KACvE,GAAWmhC,gBAef,OAXInhC,IAAY6gC,GAAmBG,KACjCH,GAAmBG,IAAO,EAE1Bl6B,QAAQC,KACNg6B,EACEC,EACA,+BAAiChhC,EAAU,8CAK1C8gC,GAAYA,EAAU7iC,EAAO+iC,EAAKE,GAE7C,EAEAN,GAAWQ,SAAW,SAAkBC,GACtC,MAAO,CAACpjC,EAAO+iC,KAEbl6B,QAAQC,KAAK,GAAGi6B,gCAAkCK,MAC3C,EAEX,EAmCA,UACEC,cAxBF,SAAuBhlC,EAASilC,EAAQC,GACtC,GAAuB,iBAAZllC,EACT,MAAM,IAAI,GAAW,4BAA6B,GAAWmlC,sBAE/D,MAAM3vB,EAAOhN,OAAOgN,KAAKxV,GACzB,IAAIyZ,EAAIjE,EAAK4D,OACb,KAAOK,KAAM,GAAG,CACd,MAAMirB,EAAMlvB,EAAKiE,GACX+qB,EAAYS,EAAOP,GACzB,GAAIF,EAAW,CACb,MAAM7iC,EAAQ3B,EAAQ0kC,GAChBxnB,OAAmBna,IAAVpB,GAAuB6iC,EAAU7iC,EAAO+iC,EAAK1kC,GAC5D,IAAe,IAAXkd,EACF,MAAM,IAAI,GAAW,UAAYwnB,EAAM,YAAcxnB,EAAQ,GAAWioB,sBAE1E,QACF,CACA,IAAqB,IAAjBD,EACF,MAAM,IAAI,GAAW,kBAAoBR,EAAK,GAAWU,eAE7D,CACF,EAIEd,eCtFI,GAAaE,GAAUF,WAS7B,MAAMe,GACJ,WAAA/lC,CAAYgmC,GACVrlC,KAAK6xB,SAAWwT,GAAkB,CAAC,EACnCrlC,KAAKslC,aAAe,CAClB/Y,QAAS,IAAI,GACb9pB,SAAU,IAAI,GAElB,CAUA,aAAM8pB,CAAQgZ,EAAajmC,GACzB,IACE,aAAaU,KAAK+iC,SAASwC,EAAajmC,EAC1C,CAAE,MAAO4+B,GACP,GAAIA,aAAe98B,MAAO,CACxB,IAAIokC,EAAQ,CAAC,EAEbpkC,MAAMorB,kBAAoBprB,MAAMorB,kBAAkBgZ,GAAUA,EAAQ,IAAIpkC,MAGxE,MAAMyqB,EAAQ2Z,EAAM3Z,MAAQ2Z,EAAM3Z,MAAMhV,QAAQ,QAAS,IAAM,GAC/D,IACOqnB,EAAIrS,MAGEA,IAAU9B,OAAOmU,EAAIrS,OAAOjC,SAASiC,EAAMhV,QAAQ,YAAa,OACzEqnB,EAAIrS,OAAS,KAAOA,GAHpBqS,EAAIrS,MAAQA,CAKhB,CAAE,MAAOtD,GAET,CACF,CAEA,MAAM2V,CACR,CACF,CAEA,QAAA6E,CAASwC,EAAajmC,GAGO,iBAAhBimC,GACTjmC,EAASA,GAAU,CAAC,GACbsC,IAAM2jC,EAEbjmC,EAASimC,GAAe,CAAC,EAG3BjmC,EAAS27B,GAAYj7B,KAAK6xB,SAAUvyB,GAEpC,MAAM,aAACwyB,EAAY,iBAAE4J,EAAgB,QAAE76B,GAAWvB,OAE7BwD,IAAjBgvB,GACFyS,GAAUQ,cAAcjT,EAAc,CACpC1B,kBAAmB,GAAW0B,aAAa,GAAW2T,SACtDpV,kBAAmB,GAAWyB,aAAa,GAAW2T,SACtDnV,oBAAqB,GAAWwB,aAAa,GAAW2T,WACvD,GAGmB,MAApB/J,IACEjP,GAAMtI,WAAWuX,GACnBp8B,EAAOo8B,iBAAmB,CACxBnM,UAAWmM,GAGb6I,GAAUQ,cAAcrJ,EAAkB,CACxC5M,OAAQ,GAAW4W,SACnBnW,UAAW,GAAWmW,WACrB,SAK0B5iC,IAA7BxD,EAAOs7B,yBAEoC93B,IAApC9C,KAAK6xB,SAAS+I,kBACvBt7B,EAAOs7B,kBAAoB56B,KAAK6xB,SAAS+I,kBAEzCt7B,EAAOs7B,mBAAoB,GAG7B2J,GAAUQ,cAAczlC,EAAQ,CAC9B+D,QAAS,GAAWwhC,SAAS,WAC7Bc,cAAe,GAAWd,SAAS,mBAClC,GAGHvlC,EAAOq0B,QAAUr0B,EAAOq0B,QAAU3zB,KAAK6xB,SAAS8B,QAAU,OAAOnvB,cAGjE,IAAIohC,EAAiB/kC,GAAW4rB,GAAM/D,MACpC7nB,EAAQ6yB,OACR7yB,EAAQvB,EAAOq0B,SAGjB9yB,GAAW4rB,GAAMxhB,QACf,CAAC,SAAU,MAAO,OAAQ,OAAQ,MAAO,QAAS,UACjD0oB,WACQ9yB,EAAQ8yB,KAInBr0B,EAAOuB,QAAU,GAAaysB,OAAOsY,EAAgB/kC,GAGrD,MAAMglC,EAA0B,GAChC,IAAIC,GAAiC,EACrC9lC,KAAKslC,aAAa/Y,QAAQthB,QAAQ,SAAoC86B,GACjC,mBAAxBA,EAAY/V,UAA0D,IAAhC+V,EAAY/V,QAAQ1wB,KAIrEwmC,EAAiCA,GAAkCC,EAAYhW,YAE/E8V,EAAwBG,QAAQD,EAAYlW,UAAWkW,EAAYjW,UACrE,GAEA,MAAMmW,EAA2B,GAKjC,IAAIC,EAJJlmC,KAAKslC,aAAa7iC,SAASwI,QAAQ,SAAkC86B,GACnEE,EAAyBnlC,KAAKilC,EAAYlW,UAAWkW,EAAYjW,SACnE,GAGA,IACIzK,EADA7L,EAAI,EAGR,IAAKssB,EAAgC,CACnC,MAAMK,EAAQ,CAAChC,GAAgBthB,KAAK7iB,WAAO8C,GAO3C,IANAqjC,EAAMH,WAAWH,GACjBM,EAAMrlC,QAAQmlC,GACd5gB,EAAM8gB,EAAMhtB,OAEZ+sB,EAAUlqB,QAAQC,QAAQ3c,GAEnBka,EAAI6L,GACT6gB,EAAUA,EAAQha,KAAKia,EAAM3sB,KAAM2sB,EAAM3sB,MAG3C,OAAO0sB,CACT,CAEA7gB,EAAMwgB,EAAwB1sB,OAE9B,IAAIqjB,EAAYl9B,EAIhB,IAFAka,EAAI,EAEGA,EAAI6L,GAAK,CACd,MAAM+gB,EAAcP,EAAwBrsB,KACtC6sB,EAAaR,EAAwBrsB,KAC3C,IACEgjB,EAAY4J,EAAY5J,EAC1B,CAAE,MAAOr6B,GACPkkC,EAAWziB,KAAK5jB,KAAMmC,GACtB,KACF,CACF,CAEA,IACE+jC,EAAU/B,GAAgBvgB,KAAK5jB,KAAMw8B,EACvC,CAAE,MAAOr6B,GACP,OAAO6Z,QAAQwb,OAAOr1B,EACxB,CAKA,IAHAqX,EAAI,EACJ6L,EAAM4gB,EAAyB9sB,OAExBK,EAAI6L,GACT6gB,EAAUA,EAAQha,KAAK+Z,EAAyBzsB,KAAMysB,EAAyBzsB,MAGjF,OAAO0sB,CACT,CAEA,MAAAI,CAAOhnC,GAGL,OAAOgwB,GADUmL,IADjBn7B,EAAS27B,GAAYj7B,KAAK6xB,SAAUvyB,IACEo7B,QAASp7B,EAAOsC,IAAKtC,EAAOs7B,mBACxCt7B,EAAO4vB,OAAQ5vB,EAAOo8B,iBAClD,EAIFjP,GAAMxhB,QAAQ,CAAC,SAAU,MAAO,OAAQ,WAAY,SAA6B0oB,GAE/EyR,GAAMliB,UAAUyQ,GAAU,SAAS/xB,EAAKtC,GACtC,OAAOU,KAAKusB,QAAQ0O,GAAY37B,GAAU,CAAC,EAAG,CAC5Cq0B,SACA/xB,MACAY,MAAOlD,GAAU,CAAC,GAAGkD,OAEzB,CACF,GAEAiqB,GAAMxhB,QAAQ,CAAC,OAAQ,MAAO,SAAU,SAA+B0oB,GAGrE,SAAS4S,EAAmBC,GAC1B,OAAO,SAAoB5kC,EAAKY,EAAMlD,GACpC,OAAOU,KAAKusB,QAAQ0O,GAAY37B,GAAU,CAAC,EAAG,CAC5Cq0B,SACA9yB,QAAS2lC,EAAS,CAChB,eAAgB,uBACd,CAAC,EACL5kC,MACAY,SAEJ,CACF,CAEA4iC,GAAMliB,UAAUyQ,GAAU4S,IAE1BnB,GAAMliB,UAAUyQ,EAAS,QAAU4S,GAAmB,EACxD,GAEA,YCtOA,MAAME,GACJ,WAAApnC,CAAYqnC,GACV,GAAwB,mBAAbA,EACT,MAAM,IAAIhZ,UAAU,gCAGtB,IAAIiZ,EAEJ3mC,KAAKkmC,QAAU,IAAIlqB,QAAQ,SAAyBC,GAClD0qB,EAAiB1qB,CACnB,GAEA,MAAMkL,EAAQnnB,KAGdA,KAAKkmC,QAAQha,KAAKgT,IAChB,IAAK/X,EAAMyf,WAAY,OAEvB,IAAIptB,EAAI2N,EAAMyf,WAAWztB,OAEzB,KAAOK,KAAM,GACX2N,EAAMyf,WAAWptB,GAAG0lB,GAEtB/X,EAAMyf,WAAa,OAIrB5mC,KAAKkmC,QAAQha,KAAO2a,IAClB,IAAIC,EAEJ,MAAMZ,EAAU,IAAIlqB,QAAQC,IAC1BkL,EAAMiY,UAAUnjB,GAChB6qB,EAAW7qB,IACViQ,KAAK2a,GAMR,OAJAX,EAAQhH,OAAS,WACf/X,EAAMyW,YAAYkJ,EACpB,EAEOZ,GAGTQ,EAAS,SAAgB1iC,EAAS1E,EAAQitB,GACpCpF,EAAMwY,SAKVxY,EAAMwY,OAAS,IAAI,GAAc37B,EAAS1E,EAAQitB,GAClDoa,EAAexf,EAAMwY,QACvB,EACF,CAKA,gBAAAuE,GACE,GAAIlkC,KAAK2/B,OACP,MAAM3/B,KAAK2/B,MAEf,CAMA,SAAAP,CAAUzH,GACJ33B,KAAK2/B,OACPhI,EAAS33B,KAAK2/B,QAIZ3/B,KAAK4mC,WACP5mC,KAAK4mC,WAAW9lC,KAAK62B,GAErB33B,KAAK4mC,WAAa,CAACjP,EAEvB,CAMA,WAAAiG,CAAYjG,GACV,IAAK33B,KAAK4mC,WACR,OAEF,MAAMlY,EAAQ1uB,KAAK4mC,WAAWr2B,QAAQonB,IACvB,IAAXjJ,GACF1uB,KAAK4mC,WAAWG,OAAOrY,EAAO,EAElC,CAEA,aAAAiU,GACE,MAAMlD,EAAa,IAAIC,gBAEjBP,EAASjB,IACbuB,EAAWN,MAAMjB,IAOnB,OAJAl+B,KAAKo/B,UAAUD,GAEfM,EAAW5B,OAAOD,YAAc,IAAM59B,KAAK49B,YAAYuB,GAEhDM,EAAW5B,MACpB,CAMA,aAAOvW,GACL,IAAI4X,EAIJ,MAAO,CACL/X,MAJY,IAAIsf,GAAY,SAAkBO,GAC9C9H,EAAS8H,CACX,GAGE9H,SAEJ,EAGF,YCtIM+H,GAAiB,CACrBC,SAAU,IACVC,mBAAoB,IACpBC,WAAY,IACZC,WAAY,IACZC,GAAI,IACJC,QAAS,IACTC,SAAU,IACVC,4BAA6B,IAC7BC,UAAW,IACXC,aAAc,IACdC,eAAgB,IAChBC,YAAa,IACbC,gBAAiB,IACjBC,OAAQ,IACRC,gBAAiB,IACjBC,iBAAkB,IAClBC,MAAO,IACPC,SAAU,IACVC,YAAa,IACbC,SAAU,IACVC,OAAQ,IACRC,kBAAmB,IACnBC,kBAAmB,IACnBC,WAAY,IACZC,aAAc,IACdC,gBAAiB,IACjBC,UAAW,IACXC,SAAU,IACVC,iBAAkB,IAClBC,cAAe,IACfC,4BAA6B,IAC7BC,eAAgB,IAChBC,SAAU,IACVC,KAAM,IACNC,eAAgB,IAChBC,mBAAoB,IACpBC,gBAAiB,IACjBC,WAAY,IACZC,qBAAsB,IACtBC,oBAAqB,IACrBC,kBAAmB,IACnBC,UAAW,IACXC,mBAAoB,IACpBC,oBAAqB,IACrBC,OAAQ,IACRC,iBAAkB,IAClBC,SAAU,IACVC,gBAAiB,IACjBC,qBAAsB,IACtBC,gBAAiB,IACjBC,4BAA6B,IAC7BC,2BAA4B,IAC5BC,oBAAqB,IACrBC,eAAgB,IAChBC,WAAY,IACZC,mBAAoB,IACpBC,eAAgB,IAChBC,wBAAyB,IACzBC,sBAAuB,IACvBC,oBAAqB,IACrBC,aAAc,IACdC,YAAa,IACbC,8BAA+B,KAGjCziC,OAAOopB,QAAQsV,IAAgBh8B,QAAQ,EAAE3H,EAAK5B,MAC5CulC,GAAevlC,GAAS4B,IAG1B,YCxBM2nC,GAnBN,SAASC,EAAeC,GACtB,MAAMtlB,EAAU,IAAI,GAAMslB,GACpBC,EAAWvoB,EAAK,GAAMK,UAAUqJ,QAAS1G,GAa/C,OAVA4G,GAAM3D,OAAOsiB,EAAU,GAAMloB,UAAW2C,EAAS,CAACV,YAAY,IAG9DsH,GAAM3D,OAAOsiB,EAAUvlB,EAAS,KAAM,CAACV,YAAY,IAGnDimB,EAAS3nB,OAAS,SAAgB4hB,GAChC,OAAO6F,EAAejQ,GAAYkQ,EAAe9F,GACnD,EAEO+F,CACT,CAGcF,CAAe,IAG7BD,GAAM7F,MAAQ,GAGd6F,GAAM5T,cAAgB,GACtB4T,GAAMxE,YAAc,GACpBwE,GAAM9T,SAAWA,GACjB8T,GAAM7G,QAAUA,GAChB6G,GAAMI,WAAa,GAGnBJ,GAAM5e,WAAa,GAGnB4e,GAAMK,OAASL,GAAM5T,cAGrB4T,GAAMM,IAAM,SAAaC,GACvB,OAAOxvB,QAAQuvB,IAAIC,EACrB,EAEAP,GAAMQ,OC9CS,SAAgBC,GAC7B,OAAO,SAAcxhB,GACnB,OAAOwhB,EAAS1oB,MAAM,KAAMkH,EAC9B,CACF,ED6CA+gB,GAAMtnC,aE7DS,SAAsBgoC,GACnC,OAAOlf,GAAMlI,SAASonB,KAAsC,IAAzBA,EAAQhoC,YAC7C,EF8DAsnC,GAAMhQ,YAAcA,GAEpBgQ,GAAM/W,aAAe,GAErB+W,GAAMW,WAAaloB,GAAS,GAAe+I,GAAMxG,WAAWvC,GAAS,IAAIqE,SAASrE,GAASA,GAE3FunB,GAAMY,WAAalI,GAEnBsH,GAAMhE,eAAiB,GAEvBgE,GAAMa,QAAUb,GAGhB,YGxFO,MAAMc,GAIT,qBAAAC,GACA,CAIA,uBAAAC,GACA,CAIA,qBAAAC,GACA,EAEG,MAAMC,GAAe,IAAIJ,GCjBhC,IAAIK,GAAwC,SAAUrpB,EAASspB,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAItwB,UAAU,SAAUC,EAASub,GAC/C,SAAS3H,EAAUnuB,GAAS,IAAM8qC,EAAKD,EAAUliB,KAAK3oB,GAAS,CAAE,MAAO6mB,GAAKiP,EAAOjP,EAAI,CAAE,CAC1F,SAASuH,EAASpuB,GAAS,IAAM8qC,EAAKD,EAAiB,MAAE7qC,GAAS,CAAE,MAAO6mB,GAAKiP,EAAOjP,EAAI,CAAE,CAC7F,SAASikB,EAAKvvB,GAJlB,IAAevb,EAIaub,EAAOqN,KAAOrO,EAAQgB,EAAOvb,QAJ1CA,EAIyDub,EAAOvb,MAJhDA,aAAiB4qC,EAAI5qC,EAAQ,IAAI4qC,EAAE,SAAUrwB,GAAWA,EAAQva,EAAQ,IAIjBwqB,KAAK2D,EAAWC,EAAW,CAC7G0c,GAAMD,EAAYA,EAAUvpB,MAAMD,EAASspB,GAAc,KAAKhiB,OAClE,EACJ,EAKO,SAASoiB,GAAkBrB,EAAUxnB,EAAM8oB,EAAiB3sC,GAC/D,IAAIwgB,EACJ,OAAO6rB,GAAUpsC,UAAM,OAAQ,EAAQ,YACnC,MAAM2sC,EAA0G,QAAlFpsB,EAAKxgB,aAAyC,EAASA,EAAQmC,qBAAkC,IAAPqe,EAAgBA,EAAKqC,EAAY5C,qBACzJ,aAAa4sB,GAAkB,CAC3B9rB,aAAc,EACdlf,IAAKgiB,EAAKhiB,IACVM,cAAeyqC,EACfD,gBAAiBA,EACjB9oB,KAAO9C,GAAiBsrB,GAAUpsC,UAAM,OAAQ,EAAQ,YACpD,IAAIwgB,EAAIC,EACR0rB,GAAaH,wBACb,MAAMa,QAAsBzB,EAASlW,IAAItR,EAAKhiB,IAAK,CAC/Cf,QAASisC,GAA4F,QAA5EtsB,EAAKzgB,aAAyC,EAASA,EAAQc,eAA4B,IAAP2f,EAAgBA,EAAK,IAAI,GACtIve,aAAclC,aAAyC,EAASA,EAAQkC,aACxED,YAA8F,QAAhFye,EAAK1gB,aAAyC,EAASA,EAAQiC,mBAAgC,IAAPye,OAAgB,EAASA,EAAG0G,QAEhI1kB,EAAW,CACbD,KAAMqqC,EAAcrqC,KACpBuqC,YAAaF,EACbhsC,QAAS6e,EAAgCmtB,GACzCvqB,OAAQuqB,EAAcvqB,OACtBpgB,cAAe,CACXnC,QAAS4sC,EACThrB,cAAeb,IAIvB,OADAqrB,GAAaF,0BACNxpC,CACX,IAER,EACJ,CACO,SAASuqC,GAAmB5B,EAAUxnB,EAAM8oB,EAAiB3sC,GAChE,IAAIwgB,EACJ,OAAO6rB,GAAUpsC,UAAM,OAAQ,EAAQ,YACnC,MAAM2sC,EAA0G,QAAlFpsB,EAAKxgB,aAAyC,EAASA,EAAQmC,qBAAkC,IAAPqe,EAAgBA,EAAKqC,EAAY5C,qBACzJ,aAAa4sB,GAAkB,CAC3B9rB,aAAc,EACdlf,IAAKgiB,EAAKhiB,IACVM,cAAeyqC,EACfD,gBAAiBA,EACjB9oB,KAAO9C,GAAiBsrB,GAAUpsC,UAAM,OAAQ,EAAQ,YACpD,IAAIwgB,EAAIC,EACR0rB,GAAaH,wBACb,MAAMa,QAAsBzB,EAAS6B,KAAKrpB,EAAKhiB,IAAKgiB,EAAK/hB,KAAM,CAC3DhB,QAASisC,GAA4F,QAA5EtsB,EAAKzgB,aAAyC,EAASA,EAAQc,eAA4B,IAAP2f,EAAgBA,EAAK,IAAI,GACtIve,aAAclC,aAAyC,EAASA,EAAQkC,aAGxEsxB,iBAAkB,WAClBC,cAAe,WACfxxB,YAA8F,QAAhFye,EAAK1gB,aAAyC,EAASA,EAAQiC,mBAAgC,IAAPye,OAAgB,EAASA,EAAG0G,QAEhI1kB,EAAW,CACbD,KAAMqqC,EAAcrqC,KACpBuqC,YAAaF,EACbhsC,QAAS6e,EAAgCmtB,GACzCvqB,OAAQuqB,EAAcvqB,OACtBpgB,cAAe,CACXnC,QAAS4sC,EACThrB,cAAeb,IAIvB,OADAqrB,GAAaF,0BACNxpC,CACX,IAER,EACJ,CACO,SAASyqC,GAAkB9B,EAAUxnB,EAAM8oB,EAAiB3sC,GAC/D,IAAIwgB,EACJ,OAAO6rB,GAAUpsC,UAAM,OAAQ,EAAQ,YACnC,MAAM2sC,EAA0G,QAAlFpsB,EAAKxgB,aAAyC,EAASA,EAAQmC,qBAAkC,IAAPqe,EAAgBA,EAAKqC,EAAY5C,qBACzJ,aAAa4sB,GAAkB,CAC3B9rB,aAAc,EACdlf,IAAKgiB,EAAKhiB,IACVM,cAAeyqC,EACfD,gBAAiBA,EACjB9oB,KAAO9C,GAAiBsrB,GAAUpsC,UAAM,OAAQ,EAAQ,YACpD,IAAIwgB,EAAIC,EACR0rB,GAAaH,wBACb,MAAMa,QAAsBzB,EAAS+B,IAAIvpB,EAAKhiB,IAAKgiB,EAAK/hB,KAAM,CAC1DhB,QAASisC,GAA4F,QAA5EtsB,EAAKzgB,aAAyC,EAASA,EAAQc,eAA4B,IAAP2f,EAAgBA,EAAK,IAAI,GACtIve,aAAclC,aAAyC,EAASA,EAAQkC,aAGxEsxB,iBAAkB,WAClBC,cAAe,WACfxxB,YAA8F,QAAhFye,EAAK1gB,aAAyC,EAASA,EAAQiC,mBAAgC,IAAPye,OAAgB,EAASA,EAAG0G,QAEhI1kB,EAAW,CACbD,KAAMqqC,EAAcrqC,KACpBuqC,YAAaF,EACbhsC,QAAS6e,EAAgCmtB,GACzCvqB,OAAQuqB,EAAcvqB,OACtBpgB,cAAe,CACXnC,QAAS4sC,EACThrB,cAAeb,IAIvB,OADAqrB,GAAaF,0BACNxpC,CACX,IAER,EACJ,CACO,SAAS2qC,GAAoBhC,EAAUxnB,EAAM8oB,EAAiB3sC,GACjE,IAAIwgB,EACJ,OAAO6rB,GAAUpsC,UAAM,OAAQ,EAAQ,YACnC,MAAM2sC,EAA0G,QAAlFpsB,EAAKxgB,aAAyC,EAASA,EAAQmC,qBAAkC,IAAPqe,EAAgBA,EAAKqC,EAAY5C,qBACzJ,aAAa4sB,GAAkB,CAC3B9rB,aAAc,EACdlf,IAAKgiB,EAAKhiB,IACVM,cAAeyqC,EACfD,gBAAiBA,EACjB9oB,KAAO9C,GAAiBsrB,GAAUpsC,UAAM,OAAQ,EAAQ,YACpD,IAAIwgB,EAAIC,EACR0rB,GAAaH,wBACb,MAAMa,QAAsBzB,EAASiC,MAAMzpB,EAAKhiB,IAAKgiB,EAAK/hB,KAAM,CAC5DhB,QAASisC,GAA4F,QAA5EtsB,EAAKzgB,aAAyC,EAASA,EAAQc,eAA4B,IAAP2f,EAAgBA,EAAK,IAAI,GACtIve,aAAclC,aAAyC,EAASA,EAAQkC,aAGxEsxB,iBAAkB,WAClBC,cAAe,WACfxxB,YAA8F,QAAhFye,EAAK1gB,aAAyC,EAASA,EAAQiC,mBAAgC,IAAPye,OAAgB,EAASA,EAAG0G,QAEhI1kB,EAAW,CACbD,KAAMqqC,EAAcrqC,KACpBuqC,YAAaF,EACbhsC,QAAS6e,EAAgCmtB,GACzCvqB,OAAQuqB,EAAcvqB,OACtBpgB,cAAe,CACXnC,QAAS4sC,EACThrB,cAAeb,IAIvB,OADAqrB,GAAaF,0BACNxpC,CACX,IAER,EACJ,CACO,SAAS6qC,GAAqBlC,EAAUxnB,EAAM8oB,EAAiB3sC,GAClE,IAAIwgB,EACJ,OAAO6rB,GAAUpsC,UAAM,OAAQ,EAAQ,YACnC,MAAM2sC,EAA0G,QAAlFpsB,EAAKxgB,aAAyC,EAASA,EAAQmC,qBAAkC,IAAPqe,EAAgBA,EAAKqC,EAAY5C,qBACzJ,aAAa4sB,GAAkB,CAC3B9rB,aAAc,EACdlf,IAAKgiB,EAAKhiB,IACVM,cAAeyqC,EACfD,gBAAiBA,EACjB9oB,KAAO9C,GAAiBsrB,GAAUpsC,UAAM,OAAQ,EAAQ,YACpD,IAAIwgB,EAAIC,EACR0rB,GAAaH,wBACb,MAAMa,QAAsBzB,EAASmC,OAAO3pB,EAAKhiB,IAAK,CAClDf,QAASisC,GAA4F,QAA5EtsB,EAAKzgB,aAAyC,EAASA,EAAQc,eAA4B,IAAP2f,EAAgBA,EAAK,IAAI,GACtIve,aAAclC,aAAyC,EAASA,EAAQkC,aAGxEsxB,iBAAkB,WAClBC,cAAe,WACfxxB,YAA8F,QAAhFye,EAAK1gB,aAAyC,EAASA,EAAQiC,mBAAgC,IAAPye,OAAgB,EAASA,EAAG0G,QAEhI1kB,EAAW,CACbD,KAAMqqC,EAAcrqC,KACpBuqC,YAAaF,EACbhsC,QAAS6e,EAAgCmtB,GACzCvqB,OAAQuqB,EAAcvqB,OACtBpgB,cAAe,CACXnC,QAAS4sC,EACThrB,cAAeb,IAIvB,OADAqrB,GAAaF,0BACNxpC,CACX,IAER,EACJ,CACO,SAAS+qC,KACZ,IAAIC,EAKJ,MAAO,CACHvO,OAASwO,GAAkBD,EAAS,GAAG7qB,EAAY/C,kCAAkC6tB,QAAqDA,EAAgB,iBAC1JvmB,MANU,IAAI,GAAMsf,YAAaO,IAEjCyG,EAAWzG,IAMnB,CACA,SAAS4F,GAAkBpqC,GACvB,OAAO4pC,GAAUpsC,UAAM,OAAQ,EAAQ,YACnC,IACI,aAAawC,EAAKohB,KAAKphB,EAAKse,aAChC,CACA,MAAO3e,GACH,MAAM4e,EAAc6B,EAAYtC,oBAAoB,CAChDne,MAAOA,EACP2e,aAActe,EAAKse,aACnB5e,cAAeM,EAAKN,gBAExB,GAAI6e,EAAYJ,SAQZ,OAPAwrB,GAAaD,8BAEP,IAAIlwB,QAASC,GAAYC,WAAWD,EAAS8E,EAAYH,YAC3Dpe,EAAKkqC,gBAAgBiB,oBACrBpjC,QAAQC,KAAK,kBAAkBhI,EAAKse,aAAe,yBAAyBC,EAAYF,sCAAsCre,EAAKZ,cAG1HgrC,GAAkB,CAC3BhpB,KAAMphB,EAAKohB,KACX1hB,cAAeM,EAAKN,cACpB4e,aAActe,EAAKse,aAAe,EAClClf,IAAKY,EAAKZ,IACV8qC,gBAAiBlqC,EAAKkqC,kBAM9B,MAHIlqC,EAAKkqC,gBAAgBiB,oBACrBpjC,QAAQpI,MAAM,cAAcK,EAAKZ,qCAAqCY,EAAKse,wBAAyB3e,GAElGA,CACV,CACJ,EACJ,CACA,SAAS2qC,GAAejsC,EAAS+sC,GAC7B,MAAMC,EAAa,CAAC,EAWpB,OAVAhtC,EAAQoK,QAASxJ,IACbosC,EAAWpsC,EAAOA,QAAUA,EAAOC,QAEnCksC,IAE0B/sC,EAAQyD,KAAMC,GAAMA,EAAE9C,OAAO+C,gBAAkB,eAAeA,iBAEpFqpC,EAAW,gBAAkB,qBAG9BA,CACX,CC5PA,IAAI,GAAwC,SAAU9qB,EAASspB,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAItwB,UAAU,SAAUC,EAASub,GAC/C,SAAS3H,EAAUnuB,GAAS,IAAM8qC,EAAKD,EAAUliB,KAAK3oB,GAAS,CAAE,MAAO6mB,GAAKiP,EAAOjP,EAAI,CAAE,CAC1F,SAASuH,EAASpuB,GAAS,IAAM8qC,EAAKD,EAAiB,MAAE7qC,GAAS,CAAE,MAAO6mB,GAAKiP,EAAOjP,EAAI,CAAE,CAC7F,SAASikB,EAAKvvB,GAJlB,IAAevb,EAIaub,EAAOqN,KAAOrO,EAAQgB,EAAOvb,QAJ1CA,EAIyDub,EAAOvb,MAJhDA,aAAiB4qC,EAAI5qC,EAAQ,IAAI4qC,EAAE,SAAUrwB,GAAWA,EAAQva,EAAQ,IAIjBwqB,KAAK2D,EAAWC,EAAW,CAC7G0c,GAAMD,EAAYA,EAAUvpB,MAAMD,EAASspB,GAAc,KAAKhiB,OAClE,EACJ,EAGO,MAAMhN,GACT,WAAAhe,CAAYslC,GACR3kC,KAAK2kC,KAAOA,EACZ3kC,KAAK8tC,cAAgB,GAAMrqB,OAAOkhB,aAAmC,EAASA,EAAKoJ,oBACnF/tC,KAAK0sC,gBAAkB1sC,KAAKguC,oBAChC,CACA,QAAA1rC,CAASshB,EAAM7jB,GACX,OAAO,GAAUC,UAAM,OAAQ,EAAQ,YACnC,aAAa,GAAgCA,KAAK8tC,cAAelqB,EAAM5jB,KAAK0sC,gBAAiB3sC,EACjG,EACJ,CACA,SAAAgC,CAAU6hB,EAAM7jB,GACZ,OAAO,GAAUC,UAAM,OAAQ,EAAQ,YACnC,aAAa,GAAiCA,KAAK8tC,cAAelqB,EAAM5jB,KAAK0sC,gBAAiB3sC,EAClG,EACJ,CACA,QAAAkuC,CAASrqB,EAAM7jB,GACX,OAAO,GAAUC,UAAM,OAAQ,EAAQ,YACnC,aAAa,GAAgCA,KAAK8tC,cAAelqB,EAAM5jB,KAAK0sC,gBAAiB3sC,EACjG,EACJ,CACA,UAAAmuC,CAAWtqB,EAAM7jB,GACb,OAAO,GAAUC,UAAM,OAAQ,EAAQ,YACnC,aAAa,GAAkCA,KAAK8tC,cAAelqB,EAAM5jB,KAAK0sC,gBAAiB3sC,EACnG,EACJ,CACA,WAAAouC,CAAYvqB,EAAM7jB,GACd,OAAO,GAAUC,UAAM,OAAQ,EAAQ,YACnC,aAAa,GAAmCA,KAAK8tC,cAAelqB,EAAM5jB,KAAK0sC,gBAAiB3sC,EACpG,EACJ,CACA,iBAAAytC,GACI,OAAO,IACX,CACA,kBAAAQ,GACI,IAAIztB,EAAIC,EACR,MAAO,CACHmtB,mBAA2G,QAAtFntB,EAA0B,QAApBD,EAAKvgB,KAAK2kC,YAAyB,IAAPpkB,OAAgB,EAASA,EAAGotB,0BAAuC,IAAPntB,GAAgBA,EAE3I,EClDG,MAAM4tB,GACT,WAAA/uC,CAAYC,GACRU,KAAKyC,cAAWK,EAChB9C,KAAKmC,WAAQW,EACbyF,OAAO+gB,OAAOtpB,KAAMV,EACxB,CACA,QAAAgD,CAASshB,EAAM7jB,GACX,OAAOC,KAAKquC,iBAChB,CACA,SAAAtsC,CAAU6hB,EAAM7jB,GACZ,OAAOC,KAAKquC,iBAChB,CACA,QAAAJ,CAASrqB,EAAM7jB,GACX,OAAOC,KAAKquC,iBAChB,CACA,UAAAH,CAAWtqB,EAAM7jB,GACb,OAAOC,KAAKquC,iBAChB,CACA,WAAAF,CAAYvqB,EAAM7jB,GACd,OAAOC,KAAKquC,iBAChB,CACA,iBAAAb,GACI,MAAO,CACHtO,OAAQ,OACR/X,WAAOrkB,EAEf,CACA,eAAAurC,GAUI,OATgB,IAAIryB,QAAQ,CAACC,EAASub,KAOlC,MANIx3B,KAAKyC,UACLwZ,EAAQjc,KAAKyC,UAEbzC,KAAKmC,OACLq1B,EAAOx3B,KAAKmC,OAEVf,MAAM,sBAGpB,E,2FCpCJ,gBASA,UAEA,MAAakc,UAGH,EAAA3Y,UAQN,WAAAtF,CACcC,EACAsF,EACFgG,GAIR,GAFA7F,MAAMzF,EAAQsF,GAJJ,KAAAtF,OAAAA,EACA,KAAAsF,aAAAA,EACF,KAAAgG,SAAAA,EALF,KAAA5F,aAAiC,CAAC,GASnC4F,EACD,MAAMxJ,MAAM,8DAEpB,CAMA,cAAAsM,CAAeC,GAEX,OADA3N,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWgI,eAAeD,IAC5C3N,IACX,CAMA,WAAAF,CAAYA,GAER,OADAE,KAAKgF,aAAelF,EACbE,IACX,CAMA,iBAAA6N,CAAkBC,GAEd,OADA9N,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWgH,kBAAkBkB,IAC/C9N,IACX,CAMA,iBAAAyF,CAAkBC,GAEd,OADA1F,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWC,kBAAkBH,IAC/C1F,IACX,CAMA,wBAAA8F,CAAyBJ,GAErB,OADA1F,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWG,yBAAyBL,IACtD1F,IACX,CAEA,SAAAiF,G,MAMI,OAAOjF,KAAK4E,aAAakW,mBAAmB9a,KAAKJ,SAA2B,QAAjB,EAAAI,KAAKgF,oBAAY,QAAI,CAAC,EACrF,CAEA,MAAApF,GACI,MAAMC,EAAS,UAAYG,KAAK4K,SAQhC,OALA5K,KAAKwM,kCAGLxM,KAAK6M,uCAEE9H,MAAMI,mBAAmBtF,EACpC,CAEA,GAAAuF,CAAIC,GACA,OAAOrF,KAAK4E,aAAanF,eAAekJ,wBAAwBtD,EACpE,EA3FJ,mB,iGCbA,MAAaipC,EACT,YAAAC,CAAaC,GAET,OADgCjmC,OAAOgN,KAAKi5B,GAAGppC,IAAK9B,GAAQkrC,EAAElrC,GAElE,CAEA,gBAAAiO,CAAoBi9B,EAAQ9sC,GACxB,IACI,IAAKA,EACD,OAIJ,GAAI1B,KAAKyuC,UAAU/sC,GACf,OAAU8sC,EAAE9sC,GAIhB,MAEMub,EAFgBjd,KAAKuuC,aAAaC,GAEXlqC,KAAMC,GAAMA,EAAEC,gBAAkB9C,EAAM+C,WAAWD,eAE9E,IAAKyY,EACD,OAGJ,OAAOA,C,CACT,MAAOihB,GACL,M,CAER,CAEQ,SAAAuQ,CAAU/sC,GACd,OAAQgtC,MAAMC,WAAWjtC,KAAWgqB,SAAShqB,EACjD,EAlCJ,eAqCa,EAAA4P,WAAa,IAAIg9B,C,2FCnC9B,gBASA,UAEA,MAAa7wB,UAA0D,EAAAjY,iBAenE,WAAAnG,CAAsBC,EAAyCsF,GAC3DG,MAAMzF,EAAQsF,GADI,KAAAtF,OAAAA,EAAyC,KAAAsF,aAAAA,EAJ5C,KAAAmZ,mBAA6B,aAEtC,KAAA/Y,aAAqC,CAAC,CAIhD,CAMA,cAAAgB,CAAeC,GAEX,OADAjG,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWM,eAAeD,IAC5CjG,IACX,CAMA,aAAAmG,CAAcC,GAEV,OADApG,KAAK2F,WAAW7E,KAAK,IAAI,EAAA8E,WAAWS,cAAcD,IAC3CpG,IACX,CAEA,SAAAiF,G,MAMI,OAAOjF,KAAK4E,aAAaoW,cAAchb,KAAKJ,SAA2B,QAAjB,EAAAI,KAAKgF,oBAAY,QAAI,CAAC,EAChF,CAEA,MAAApF,GACI,MAAMC,EAAS,IAAMG,KAAK+d,mBAE1B,OAAOhZ,MAAMI,mBAAmBtF,EACpC,CAEA,GAAAuF,CAAIC,GACA,OAAOrF,KAAK4E,aAAanF,eAAe6J,uBAAuBjE,EACnE,CAEU,kBAAAmB,CACNC,EACAC,GAKA,MAAO,CACHD,MAAOA,EACPC,UAAWA,EAEnB,EAnEJ,mB,eCVA,IAAY8K,E,sEAAZ,SAAYA,GACR,cACA,kBACA,mCACA,gBACA,uBACA,uBACA,mCACA,qBACA,sBACA,kBACA,mBACH,CAZD,CAAYA,IAAW,cAAXA,EAAW,I,2JCFvB,gBAiBA,UAUA,MAAsBhM,UAOZ,EAAAb,UACN,WAAAtF,CAAsBC,EAAyCsF,GAC3DG,MAAMzF,EAAQsF,GADI,KAAAtF,OAAAA,EAAyC,KAAAsF,aAAAA,CAE/D,CAKA,qBAAAgqC,CAAsBznB,G,MAElB,IAAIhb,EAA8C,QAA/B,EAAAnM,KAAKgF,aAAa/B,qBAAa,QAAI,GAYtD,OAXAkJ,EAAeA,EAAa+B,OAAQ3J,GAAMA,EAAE9C,SAAW,EAAAxC,6BAEvDe,KAAKgF,aAAa/B,cAAgBkJ,EAElCnM,KAAKkM,YAAY,CACb,CACIzK,OAAQ,EAAAxC,4BACRyC,MAAOylB,KAIRnnB,IACX,CAKA,YAAA6uC,CACIC,GAEA,OAAO9uC,KAAK4E,aAAaqW,mBAAuD,CAC5EE,KAAM,EACNK,gBAAiBszB,EACjBtoC,mBAAoB,CAACC,EAAOC,KAGjB,CACHlE,KAHaxC,KAAKwG,mBAAmBC,EAAOC,GAI5CA,UAAWA,IAGnB2U,YAAa,CAACC,EAAaC,KACnBD,GACAtb,KAAKqM,cAAciP,GAEnBC,GACAvb,KAAK4uC,sBAAsBrzB,GAGxBvb,KAAKiF,cAGxB,EA5DJ,oB,0nBC5BA,aACA,Y,GCAI8pC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBnsC,IAAjBosC,EACH,OAAOA,EAAatwC,QAGrB,IAAIC,EAASkwC,EAAyBE,GAAY,CAGjDrwC,QAAS,CAAC,GAOX,OAHAuwC,EAAoBF,GAAUrrB,KAAK/kB,EAAOD,QAASC,EAAQA,EAAOD,QAASowC,GAGpEnwC,EAAOD,OACf,C,OCrBAowC,EAAoBI,EAAI,CAACxwC,EAASywC,KACjC,IAAI,IAAI/rC,KAAO+rC,EACXL,EAAoBM,EAAED,EAAY/rC,KAAS0rC,EAAoBM,EAAE1wC,EAAS0E,IAC5EiF,OAAO8gB,eAAezqB,EAAS0E,EAAK,CAAEunB,YAAY,EAAMqK,IAAKma,EAAW/rC,MCJ3E0rC,EAAoBM,EAAI,CAACpqB,EAAKiB,IAAU5d,OAAO2a,UAAUgD,eAAetC,KAAKsB,EAAKiB,GCClF6oB,EAAoBO,EAAK3wC,IACH,oBAAX0kB,QAA0BA,OAAOD,aAC1C9a,OAAO8gB,eAAezqB,EAAS0kB,OAAOD,YAAa,CAAE3hB,MAAO,WAE7D6G,OAAO8gB,eAAezqB,EAAS,aAAc,CAAE8C,OAAO,KCF7BstC,EAAoB,K","sources":["webpack://kontentDelivery/webpack/universalModuleDefinition","webpack://kontentDelivery/./lib/models/common/headers.ts","webpack://kontentDelivery/./lib/images/index.ts","webpack://kontentDelivery/./lib/services/base-delivery-query.service.ts","webpack://kontentDelivery/./lib/query/element/element-query.class.ts","webpack://kontentDelivery/./lib/query/type/multiple-type-query.class.ts","webpack://kontentDelivery/./lib/services/mapping.service.ts","webpack://kontentDelivery/./lib/images/image-url-transformation-builder.factory.ts","webpack://kontentDelivery/./lib/query/type/single-type-query.class.ts","webpack://kontentDelivery/./lib/models/index.ts","webpack://kontentDelivery/./lib/query/sync/sync-changes-query.class.ts","webpack://kontentDelivery/./lib/config/index.ts","webpack://kontentDelivery/./lib/models/common/common-models.ts","webpack://kontentDelivery/./lib/models/common/index.ts","webpack://kontentDelivery/./lib/mappers/type.mapper.ts","webpack://kontentDelivery/./lib/mappers/index.ts","webpack://kontentDelivery/./lib/utilities/codename.helper.ts","webpack://kontentDelivery/./lib/sdk-info.generated.ts","webpack://kontentDelivery/./lib/query/common/base-query.class.ts","webpack://kontentDelivery/./lib/client/delivery-client.factory.ts","webpack://kontentDelivery/./lib/query/item/multiple-items-query.class.ts","webpack://kontentDelivery/./lib/query/used-in/used-in-query.class.ts","webpack://kontentDelivery/./lib/index.ts","webpack://kontentDelivery/./lib/query/index.ts","webpack://kontentDelivery/./lib/images/image-url-transformation-builder.ts","webpack://kontentDelivery/./lib/mappers/element.mapper.ts","webpack://kontentDelivery/./lib/query/language/languages-query.class.ts","webpack://kontentDelivery/./lib/mappers/used-in.mapper.ts","webpack://kontentDelivery/./lib/mappers/language.mapper.ts","webpack://kontentDelivery/./lib/elements/index.ts","webpack://kontentDelivery/./lib/query/items-feed/items-feed-query.class.ts","webpack://kontentDelivery/./lib/mappers/sync.mapper.ts","webpack://kontentDelivery/./lib/query/sync/initialize-sync-query.class.ts","webpack://kontentDelivery/./lib/mappers/taxonomy.mapper.ts","webpack://kontentDelivery/./lib/models/common/filters.ts","webpack://kontentDelivery/./lib/services/delivery-query.service.ts","webpack://kontentDelivery/./lib/utilities/delivery-url.helper.ts","webpack://kontentDelivery/./lib/mappers/item.mapper.ts","webpack://kontentDelivery/./lib/models/common/parameters.ts","webpack://kontentDelivery/./lib/client/delivery-client.ts","webpack://kontentDelivery/./lib/query/taxonomy/taxonomy-query.class.ts","webpack://kontentDelivery/./lib/utilities/index.ts","webpack://kontentDelivery/./lib/contracts/index.ts","webpack://kontentDelivery/./lib/query/common/base-item-listing-query.class.ts","webpack://kontentDelivery/./lib/mappers/generic-element.mapper.ts","webpack://kontentDelivery/./lib/client/index.ts","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/helpers/url.helper.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/helpers/header.helper.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/helpers/headers-helper.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/helpers/retry-helper.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/models/parameters.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/bind.js","webpack://kontentDelivery/./node_modules/axios/lib/utils.js","webpack://kontentDelivery/./node_modules/axios/lib/core/AxiosError.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/toFormData.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/AxiosURLSearchParams.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/buildURL.js","webpack://kontentDelivery/./node_modules/axios/lib/core/InterceptorManager.js","webpack://kontentDelivery/./node_modules/axios/lib/defaults/transitional.js","webpack://kontentDelivery/./node_modules/axios/lib/platform/browser/index.js","webpack://kontentDelivery/./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js","webpack://kontentDelivery/./node_modules/axios/lib/platform/browser/classes/FormData.js","webpack://kontentDelivery/./node_modules/axios/lib/platform/browser/classes/Blob.js","webpack://kontentDelivery/./node_modules/axios/lib/platform/common/utils.js","webpack://kontentDelivery/./node_modules/axios/lib/platform/index.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/formDataToJSON.js","webpack://kontentDelivery/./node_modules/axios/lib/defaults/index.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/toURLEncodedForm.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/parseHeaders.js","webpack://kontentDelivery/./node_modules/axios/lib/core/AxiosHeaders.js","webpack://kontentDelivery/./node_modules/axios/lib/core/transformData.js","webpack://kontentDelivery/./node_modules/axios/lib/cancel/isCancel.js","webpack://kontentDelivery/./node_modules/axios/lib/cancel/CanceledError.js","webpack://kontentDelivery/./node_modules/axios/lib/core/settle.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/speedometer.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/progressEventReducer.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/throttle.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/isURLSameOrigin.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/cookies.js","webpack://kontentDelivery/./node_modules/axios/lib/core/buildFullPath.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/isAbsoluteURL.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/combineURLs.js","webpack://kontentDelivery/./node_modules/axios/lib/core/mergeConfig.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/resolveConfig.js","webpack://kontentDelivery/./node_modules/axios/lib/adapters/xhr.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/parseProtocol.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/composeSignals.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/trackStream.js","webpack://kontentDelivery/./node_modules/axios/lib/adapters/fetch.js","webpack://kontentDelivery/./node_modules/axios/lib/adapters/adapters.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/null.js","webpack://kontentDelivery/./node_modules/axios/lib/core/dispatchRequest.js","webpack://kontentDelivery/./node_modules/axios/lib/env/data.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/validator.js","webpack://kontentDelivery/./node_modules/axios/lib/core/Axios.js","webpack://kontentDelivery/./node_modules/axios/lib/cancel/CancelToken.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/HttpStatusCode.js","webpack://kontentDelivery/./node_modules/axios/lib/axios.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/spread.js","webpack://kontentDelivery/./node_modules/axios/lib/helpers/isAxiosError.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/http/http.debugger.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/http/http.functions.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/http/http.service.js","webpack://kontentDelivery/./node_modules/@kontent-ai/core-sdk/dist/es6/http/test-http.service.js","webpack://kontentDelivery/./lib/query/item/single-item-query.class.ts","webpack://kontentDelivery/./lib/utilities/enum.helper.ts","webpack://kontentDelivery/./lib/query/taxonomy/taxonomies-query.class.ts","webpack://kontentDelivery/./lib/elements/element-type.ts","webpack://kontentDelivery/./lib/query/common/base-listing-query.class.ts","webpack://kontentDelivery/./lib/services/index.ts","webpack://kontentDelivery/webpack/bootstrap","webpack://kontentDelivery/webpack/runtime/define property getters","webpack://kontentDelivery/webpack/runtime/hasOwnProperty shorthand","webpack://kontentDelivery/webpack/runtime/make namespace object","webpack://kontentDelivery/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"kontentDelivery\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"kontentDelivery\"] = factory();\n\telse\n\t\troot[\"kontentDelivery\"] = factory();\n})(self, () => {\nreturn ","export const continuationTokenHeaderName: string = 'X-Continuation';\r\nexport const waitForLoadingNewContentHeader: string = 'X-KC-Wait-For-Loading-New-Content';\r\nexport const sdkVersionHeader: string = 'X-KC-SDKID';\r\nexport const staleContentHeaderName: string = 'X-Stale-Content';\r\n\r\n","export * from './image-url-transformation-builder';\r\nexport * from './image.models';\r\nexport * from './image-url-transformation-builder.factory';\r\n","import { IResponse, IHeader, IHttpService, IQueryParameter, urlHelper } from '@kontent-ai/core-sdk';\r\nimport { AxiosError } from 'axios';\r\nimport {\r\n    waitForLoadingNewContentHeader,\r\n    IQueryConfig,\r\n    ISDKInfo,\r\n    IDeliveryErrorRaw,\r\n    DeliveryError,\r\n    sdkVersionHeader,\r\n    staleContentHeaderName,\r\n    continuationTokenHeaderName,\r\n    IDeliveryNetworkResponse,\r\n    ClientTypes\r\n} from '../models';\r\n\r\nimport { IDeliveryClientConfig } from '../config';\r\nimport { IMappingService } from './mapping.service';\r\n\r\nexport abstract class BaseDeliveryQueryService<TClientTypes extends ClientTypes> {\r\n    /**\r\n     * Default base Url to Kontent.ai Delivery API\r\n     */\r\n    private readonly defaultBaseDeliveryApiUrl: string = 'https://deliver.kontent.ai';\r\n\r\n    /**\r\n     * Default preview url to Kontent.ai Delivery API\r\n     */\r\n    private readonly defaultPreviewDeliveryApiUrl: string = 'https://preview-deliver.kontent.ai';\r\n\r\n    constructor(\r\n        /**\r\n         * Delivery client configuration\r\n         */\r\n        public readonly config: IDeliveryClientConfig,\r\n        /**\r\n         * Http service for fetching data\r\n         */\r\n        public readonly httpService: IHttpService<any>,\r\n        /**\r\n         * Information about the SDK\r\n         */\r\n        public readonly sdkInfo: ISDKInfo,\r\n        /**\r\n         * Mapping service\r\n         */\r\n        public readonly mappingService: IMappingService<TClientTypes>\r\n    ) {}\r\n\r\n    /**\r\n     * Gets url based on the action, query configuration and options (parameters)\r\n     * @param action Action (= url part) that will be hit\r\n     * @param queryConfig Query configuration\r\n     * @param options Query options\r\n     */\r\n    getUrl(action: string, queryConfig: IQueryConfig, options?: IQueryParameter[]): string {\r\n        if (!this.config.proxy || !this.config.proxy.advancedProxyUrlResolver) {\r\n            return urlHelper.addOptionsToUrl(this.getBaseUrl(queryConfig) + action, options);\r\n        }\r\n        return this.config.proxy.advancedProxyUrlResolver({\r\n            queryParameters: options ? options : [],\r\n            queryString: urlHelper.addOptionsToUrl('', options),\r\n            action: action,\r\n            domain: this.getDomain(queryConfig),\r\n            queryConfig: queryConfig,\r\n            environmentId: this.config.environmentId\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets proper set of headers for given request.\r\n     * @param queryConfig Query configuration\r\n     * @param additionalHeaders Custom headers\r\n     */\r\n    getHeaders(queryConfig: IQueryConfig, additionalHeaders?: IHeader[]): IHeader[] {\r\n        const headers: IHeader[] = [];\r\n\r\n        if (additionalHeaders) {\r\n            headers.push(...additionalHeaders);\r\n        }\r\n\r\n        // add SDK Id header for monitoring SDK usage\r\n        headers.push(this.getSdkIdHeader());\r\n\r\n        // add headers from global config\r\n        if (this.config.globalHeaders) {\r\n            headers.push(...this.config.globalHeaders(queryConfig));\r\n        }\r\n\r\n        // add query / global headers from query config\r\n        headers.push(...this.getQueryHeaders(queryConfig));\r\n\r\n        if (this.isPreviewModeEnabled(queryConfig) && this.isSecuredModeEnabled(queryConfig)) {\r\n            throw Error(`Preview & secured modes cannot be used at the same time.`);\r\n        }\r\n\r\n        // add preview header is required\r\n        if (this.isPreviewModeEnabled(queryConfig) && this.config.previewApiKey) {\r\n            headers.push(this.getAuthorizationHeader(this.config.previewApiKey));\r\n        }\r\n\r\n        // add secured mode header is required\r\n        if (this.isSecuredModeEnabled(queryConfig) && this.config.secureApiKey) {\r\n            headers.push(this.getAuthorizationHeader(this.config.secureApiKey));\r\n        }\r\n\r\n        // add 'X-KC-Wait-For-Loading-New-Content' header if required\r\n        if (this.shouldAddWaitForLoadingNewContentHeader(queryConfig)) {\r\n            headers.push({\r\n                header: waitForLoadingNewContentHeader,\r\n                value: 'true'\r\n            });\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    /**\r\n     * Http POST response\r\n     * @param url Url of request\r\n     * @param queryConfig Query config configuration\r\n     */\r\n    protected async postResponseAsync<TRawData>(\r\n        url: string,\r\n        body: any,\r\n        queryConfig?: IQueryConfig,\r\n        serviceConfig?: {\r\n            headers?: IHeader[];\r\n        }\r\n    ): Promise<IResponse<TRawData>> {\r\n        if (!queryConfig) {\r\n            queryConfig = {};\r\n        }\r\n\r\n        if (!serviceConfig) {\r\n            serviceConfig = {};\r\n        }\r\n\r\n        try {\r\n            return await this.httpService.postAsync<TRawData>(\r\n                {\r\n                    url: url,\r\n                    body: body\r\n                },\r\n                {\r\n                    cancelToken: queryConfig?.cancelToken,\r\n                    responseType: 'json',\r\n                    retryStrategy: this.config.retryStrategy,\r\n                    headers: this.getHeaders(queryConfig, serviceConfig.headers ? serviceConfig.headers : [])\r\n                }\r\n            );\r\n        } catch (error) {\r\n            throw this.mapDeliveryError(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Http GET response\r\n     * @param url Url of request\r\n     * @param queryConfig Query config configuration\r\n     */\r\n    protected async getResponseAsync<TRawData>(\r\n        url: string,\r\n        queryConfig?: IQueryConfig,\r\n        serviceConfig?: {\r\n            headers?: IHeader[];\r\n        }\r\n    ): Promise<IResponse<TRawData>> {\r\n        if (!queryConfig) {\r\n            queryConfig = {};\r\n        }\r\n\r\n        if (!serviceConfig) {\r\n            serviceConfig = {};\r\n        }\r\n\r\n        try {\r\n            return await this.httpService.getAsync<TRawData>(\r\n                {\r\n                    url: url\r\n                },\r\n                {\r\n                    cancelToken: queryConfig?.cancelToken,\r\n                    responseType: 'json',\r\n                    retryStrategy: this.config.retryStrategy,\r\n                    headers: this.getHeaders(queryConfig, serviceConfig.headers ? serviceConfig.headers : [])\r\n                }\r\n            );\r\n        } catch (error) {\r\n            throw this.mapDeliveryError(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets base URL of the request including the environment Id\r\n     * @param queryConfig Query configuration\r\n     */\r\n    protected getBaseUrl(queryConfig: IQueryConfig): string {\r\n        return this.getDomain(queryConfig) + '/' + this.config.environmentId;\r\n    }\r\n\r\n    protected mapNetworkResponse<TData, TContract>(\r\n        data: TData,\r\n        response: IResponse<any>\r\n    ): IDeliveryNetworkResponse<TData, TContract> {\r\n        return {\r\n            data: data,\r\n            response: response,\r\n            hasStaleContent: this.getHasStaleContent(response.headers),\r\n            xContinuationToken: this.getContinuationToken(response.headers)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Indicates if current query should use preview mode\r\n     * @param queryConfig Query configuration\r\n     */\r\n    private isPreviewModeEnabled(queryConfig: IQueryConfig): boolean {\r\n        if (queryConfig.usePreviewMode !== undefined) {\r\n            return queryConfig.usePreviewMode;\r\n        }\r\n\r\n        if (!this.config.defaultQueryConfig) {\r\n            return false;\r\n        }\r\n\r\n        if (this.config.defaultQueryConfig.usePreviewMode === true) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private getQueryHeaders(queryConfig: IQueryConfig): IHeader[] {\r\n        if (queryConfig.customHeaders) {\r\n            return queryConfig.customHeaders;\r\n        }\r\n\r\n        if (this.config.defaultQueryConfig?.customHeaders) {\r\n            return this.config.defaultQueryConfig.customHeaders;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    private shouldAddWaitForLoadingNewContentHeader(queryConfig: IQueryConfig): boolean {\r\n        if (queryConfig.waitForLoadingNewContent !== undefined) {\r\n            return queryConfig.waitForLoadingNewContent;\r\n        }\r\n\r\n        if (!this.config.defaultQueryConfig) {\r\n            return false;\r\n        }\r\n\r\n        if (this.config.defaultQueryConfig.waitForLoadingNewContent === true) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Indicates if current query should use secured mode\r\n     * @param queryConfig Query configuration\r\n     */\r\n    private isSecuredModeEnabled(queryConfig: IQueryConfig): boolean {\r\n        if (queryConfig.useSecuredMode !== undefined) {\r\n            return queryConfig.useSecuredMode;\r\n        }\r\n\r\n        if (!this.config.defaultQueryConfig) {\r\n            return false;\r\n        }\r\n\r\n        if (this.config.defaultQueryConfig.useSecuredMode === true) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets preview or standard URL based on client and query configuration\r\n     * @param queryConfig Query configuration\r\n     */\r\n    private getDomain(queryConfig: IQueryConfig): string {\r\n        if (this.isPreviewModeEnabled(queryConfig)) {\r\n            if (!this.config.previewApiKey) {\r\n                throw Error(`Preview API key is not configured.`);\r\n            }\r\n\r\n            // check custom preview url\r\n            if (this.config.proxy && this.config.proxy.basePreviewUrl) {\r\n                return this.config.proxy.basePreviewUrl;\r\n            }\r\n\r\n            // use default preview url\r\n            return this.defaultPreviewDeliveryApiUrl;\r\n        }\r\n\r\n        // check custom base url\r\n        if (this.config.proxy && this.config.proxy.baseUrl) {\r\n            return this.config.proxy.baseUrl;\r\n        }\r\n        return this.defaultBaseDeliveryApiUrl;\r\n    }\r\n\r\n    /**\r\n     * Gets authorization header. This is used for 'preview' functionality\r\n     */\r\n    private getAuthorizationHeader(key?: string): IHeader {\r\n        if (!key) {\r\n            throw Error(`Cannot get authorization header because key is invalid`);\r\n        }\r\n        // authorization header required for preview mode\r\n        return {\r\n            header: 'authorization',\r\n            value: `bearer ${key}`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Header identifying SDK type & version for internal purposes of Kontent.ai\r\n     */\r\n    private getSdkIdHeader(): IHeader {\r\n        return {\r\n            header: sdkVersionHeader,\r\n            value: `${this.sdkInfo.host};${this.sdkInfo.name};${this.sdkInfo.version}`\r\n        };\r\n    }\r\n\r\n    private mapDeliveryError(error: any): any {\r\n        let axiosError: AxiosError | undefined;\r\n\r\n        if (error.error) {\r\n            axiosError = error.error;\r\n        } else {\r\n            axiosError = error;\r\n        }\r\n\r\n        if (!axiosError || !axiosError.isAxiosError) {\r\n            return error;\r\n        }\r\n\r\n        const deliveryErrorData = axiosError.response?.data as IDeliveryErrorRaw;\r\n\r\n        if (!deliveryErrorData || !deliveryErrorData.error_code) {\r\n            return error;\r\n        }\r\n\r\n        return new DeliveryError({\r\n            errorCode: deliveryErrorData.error_code,\r\n            message: deliveryErrorData.message,\r\n            specificCode: deliveryErrorData.specific_code,\r\n            requestId: deliveryErrorData.request_id\r\n        });\r\n    }\r\n\r\n    private getHasStaleContent(headers: IHeader[]): boolean {\r\n        const hasStaleContentHeader = headers.find(\r\n            (m) => m.header.toLowerCase() === staleContentHeaderName.toLowerCase()\r\n        );\r\n\r\n        if (hasStaleContentHeader) {\r\n            if (hasStaleContentHeader.value.toString() === '1') {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private getContinuationToken(headers: IHeader[]): string | undefined {\r\n        const header = headers.find((m) => m.header.toLowerCase() === continuationTokenHeaderName.toLowerCase());\r\n        return header ? header.value : undefined;\r\n    }\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport { Responses, IElementQueryConfig, IDeliveryNetworkResponse, ClientTypes } from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from '../common/base-query.class';\r\n\r\nexport class ElementQuery<TClientTypes extends ClientTypes> extends BaseQuery<\r\n    TClientTypes,\r\n    Responses.IViewContentTypeElementResponse,\r\n    IElementQueryConfig,\r\n    Contracts.IViewContentTypeElementContract\r\n> {\r\n    protected _queryConfig: IElementQueryConfig = {};\r\n\r\n    constructor(\r\n        protected config: IDeliveryClientConfig,\r\n        protected queryService: QueryService<TClientTypes>,\r\n        private typeCodename: string,\r\n        private elementCodename: string\r\n    ) {\r\n        super(config, queryService);\r\n\r\n        if (!typeCodename) {\r\n            throw Error(`Codename of the type has to be provided`);\r\n        }\r\n\r\n        if (!elementCodename) {\r\n            throw Error(`Codename of the element has to be provided`);\r\n        }\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<Responses.IViewContentTypeElementResponse, Contracts.IViewContentTypeElementContract>\r\n    > {\r\n        return this.queryService.getElementAsync(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        return super.resolveUrlInternal(`/types/${this.typeCodename}/elements/${this.elementCodename}`);\r\n    }\r\n\r\n    map(json: any): Responses.IViewContentTypeElementResponse {\r\n        return this.queryService.mappingService.viewContentTypeElementResponse(json);\r\n    }\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    ClientTypes,\r\n    IContentType,\r\n    IContentTypeQueryConfig,\r\n    IDeliveryNetworkResponse,\r\n    Parameters,\r\n    Responses\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseListingQuery } from '../common/base-listing-query.class';\r\n\r\nexport class MultipleTypeQuery<TClientTypes extends ClientTypes> extends BaseListingQuery<\r\n    TClientTypes,\r\n    IContentType<TClientTypes['contentTypeCodenames']>,\r\n    Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']>,\r\n    Responses.IListContentTypesAllResponse<TClientTypes['contentTypeCodenames']>,\r\n    IContentTypeQueryConfig,\r\n    Contracts.IListContentTypeContract\r\n> {\r\n    protected _queryConfig: IContentTypeQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Used to limit the number of elements returned by query.\r\n     * @param elementCodenames Array of element codenames to fetch\r\n     */\r\n    elementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this {\r\n        this.parameters.push(new Parameters.ElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to exclude elements returned by query.\r\n     * @param elementCodenames Array of element codenames to exclude\r\n     */\r\n    excludeElementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this {\r\n        this.parameters.push(new Parameters.ExcludeElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Limits the number of taxonomies returned by query\r\n     * @param limit Number of taxonomies to load\r\n     */\r\n    limitParameter(limit: number): this {\r\n        this.parameters.push(new Parameters.LimitParameter(limit));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Skips the selected number of taxonomies\r\n     * @param skip Number of taxonomies to skip\r\n     */\r\n    skipParameter(skip: number): this {\r\n        this.parameters.push(new Parameters.SkipParameter(skip));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']>,\r\n            Contracts.IListContentTypeContract\r\n        >\r\n    > {\r\n        return this.queryService.getMultipleTypes(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/types';\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']> {\r\n        return this.queryService.mappingService.listContentTypesResponse(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: IContentType<TClientTypes['contentTypeCodenames']>[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']>,\r\n            Contracts.IListContentTypeContract\r\n        >[]\r\n    ): Responses.IListContentTypesAllResponse<TClientTypes['contentTypeCodenames']> {\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n}\r\n","import { IDeliveryClientConfig } from '../config';\r\nimport { Contracts } from '../contracts';\r\nimport {\r\n    SyncMapper,\r\n    GenericElementMapper,\r\n    ItemMapper,\r\n    LanguageMapper,\r\n    TaxonomyMapper,\r\n    TypeMapper,\r\n    UsedInMapper\r\n} from '../mappers';\r\nimport { Responses, IContentItem, IPagination, ClientTypes } from '../models';\r\n\r\nexport interface IMappingService<TClientTypes extends ClientTypes> {\r\n    listContentTypesResponse(\r\n        data: Contracts.IListContentTypeContract\r\n    ): Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']>;\r\n\r\n    itemsFeedResponse<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        data: Contracts.IItemsFeedContract\r\n    ): Responses.IListItemsFeedResponse<TContentItem, TClientTypes['contentItemType']>;\r\n\r\n    usedInResponse(data: Contracts.IUsedInItemsContract): Responses.IUsedInResponse<TClientTypes>;\r\n\r\n    viewContentTypeResponse(\r\n        data: Contracts.IViewContentTypeContract\r\n    ): Responses.IViewContentTypeResponse<TClientTypes['contentTypeCodenames']>;\r\n\r\n    viewContentItemResponse<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        data: Contracts.IViewContentItemContract\r\n    ): Responses.IViewContentItemResponse<TContentItem, TClientTypes['contentItemType']>;\r\n\r\n    listContentItemsResponse<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        data: Contracts.IListContentItemsContract\r\n    ): Responses.IListContentItemsResponse<TContentItem, TClientTypes['contentItemType']>;\r\n\r\n    viewTaxonomyResponse(\r\n        data: Contracts.IViewTaxonomyGroupContract\r\n    ): Responses.IViewTaxonomyResponse<TClientTypes['taxonomyCodenames']>;\r\n\r\n    listTaxonomiesResponse(\r\n        data: Contracts.IListTaxonomyGroupsContract\r\n    ): Responses.IListTaxonomiesResponse<TClientTypes['taxonomyCodenames']>;\r\n\r\n    viewContentTypeElementResponse(\r\n        data: Contracts.IViewContentTypeElementContract\r\n    ): Responses.IViewContentTypeElementResponse;\r\n\r\n    listLanguagesResponse(\r\n        data: Contracts.IListLanguagesContract\r\n    ): Responses.IListLanguagesResponse<TClientTypes['languageCodenames']>;\r\n    initializeContentSync(data: Contracts.IInitializeSyncContract): Responses.IInitializeSyncResponse;\r\n    syncChanges(data: Contracts.ISyncChangesContract): Responses.ISyncChangesResponse;\r\n}\r\n\r\nexport class MappingService<TClientTypes extends ClientTypes> implements IMappingService<TClientTypes> {\r\n    private readonly typeMapper: TypeMapper<TClientTypes['contentTypeCodenames']>;\r\n    private readonly languageMapper: LanguageMapper<TClientTypes['languageCodenames']>;\r\n    private readonly itemMapper: ItemMapper<TClientTypes['contentItemType']>;\r\n    private readonly taxonomyMapper: TaxonomyMapper<TClientTypes['taxonomyCodenames']>;\r\n    private readonly usedInMapper: UsedInMapper<TClientTypes>;\r\n    private readonly genericElementMapper: GenericElementMapper;\r\n    private readonly syncMapper: SyncMapper;\r\n\r\n    constructor(readonly config: IDeliveryClientConfig) {\r\n        this.typeMapper = new TypeMapper();\r\n        this.languageMapper = new LanguageMapper();\r\n        this.itemMapper = new ItemMapper(config);\r\n        this.taxonomyMapper = new TaxonomyMapper();\r\n        this.usedInMapper = new UsedInMapper<TClientTypes>();\r\n        this.genericElementMapper = new GenericElementMapper();\r\n        this.syncMapper = new SyncMapper();\r\n    }\r\n\r\n    usedInResponse(data: Contracts.IUsedInItemsContract): Responses.IUsedInResponse<TClientTypes> {\r\n        return {\r\n            items: data.items.map((m) => this.usedInMapper.mapUsedInItem(m))\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for list of languages\r\n     * @param data Response data\r\n     */\r\n    listLanguagesResponse(\r\n        data: Contracts.IListLanguagesContract\r\n    ): Responses.IListLanguagesResponse<TClientTypes['languageCodenames']> {\r\n        return {\r\n            items: this.languageMapper.mapMultipleLanguages(data),\r\n            pagination: this.mapPagination(data.pagination)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting a multiple type\r\n     * @param data Response data\r\n     */\r\n    listContentTypesResponse(\r\n        data: Contracts.IListContentTypeContract\r\n    ): Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']> {\r\n        return {\r\n            items: this.typeMapper.mapMultipleTypes(data),\r\n            pagination: this.mapPagination(data.pagination)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for single type\r\n     * @param data Response data\r\n     * @param options Options\r\n     */\r\n    viewContentTypeResponse(\r\n        data: Contracts.IViewContentTypeContract\r\n    ): Responses.IViewContentTypeResponse<TClientTypes['contentTypeCodenames']> {\r\n        return {\r\n            type: this.typeMapper.mapSingleType(data)\r\n        };\r\n    }\r\n\r\n    itemsFeedResponse<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        data: Contracts.IItemsFeedContract\r\n    ): Responses.IListItemsFeedResponse<TContentItem, TClientTypes['contentItemType']> {\r\n        const itemsResult = this.itemMapper.mapItems<TContentItem>({\r\n            linkedItems: Object.values(data.modular_content),\r\n            mainItems: data.items\r\n        });\r\n\r\n        return {\r\n            items: itemsResult.items,\r\n            linkedItems: itemsResult.linkedItems\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting single item\r\n     * @param data Response data\r\n     * @param queryConfig Query configuration\r\n     */\r\n    viewContentItemResponse<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        data: Contracts.IViewContentItemContract\r\n    ): Responses.IViewContentItemResponse<TContentItem, TClientTypes['contentItemType']> {\r\n        const itemResult = this.itemMapper.mapSingleItemFromResponse<TContentItem>(data);\r\n\r\n        return {\r\n            item: itemResult.item,\r\n            linkedItems: itemResult.linkedItems\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting multiple items\r\n     * @param data Response data\r\n     * @param queryConfig Query configuration\r\n     */\r\n    listContentItemsResponse<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        data: Contracts.IListContentItemsContract\r\n    ): Responses.IListContentItemsResponse<TContentItem, TClientTypes['contentItemType']> {\r\n        const itemsResult = this.itemMapper.mapMultipleItemsFromResponse<TContentItem>(data);\r\n\r\n        return {\r\n            items: itemsResult.items,\r\n            pagination: this.mapPagination(data.pagination),\r\n            linkedItems: itemsResult.linkedItems\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting single taxonomy item\r\n     * @param data Response data\r\n     */\r\n    viewTaxonomyResponse(\r\n        data: Contracts.IViewTaxonomyGroupContract\r\n    ): Responses.IViewTaxonomyResponse<TClientTypes['taxonomyCodenames']> {\r\n        return {\r\n            taxonomy: this.taxonomyMapper.mapTaxonomy(data.system, data.terms)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting multiples taxonomies\r\n     * @param data Response data\r\n     */\r\n    listTaxonomiesResponse(\r\n        data: Contracts.IListTaxonomyGroupsContract\r\n    ): Responses.IListTaxonomiesResponse<TClientTypes['taxonomyCodenames']> {\r\n        return {\r\n            items: this.taxonomyMapper.mapTaxonomies(data.taxonomies),\r\n            pagination: this.mapPagination(data.pagination)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting single content type element\r\n     * @param data Response data\r\n     */\r\n    viewContentTypeElementResponse(\r\n        data: Contracts.IViewContentTypeElementContract\r\n    ): Responses.IViewContentTypeElementResponse {\r\n        return this.genericElementMapper.mapElement(data);\r\n    }\r\n\r\n    initializeContentSync(data: Contracts.IInitializeSyncContract): Responses.IInitializeSyncResponse {\r\n        return {\r\n            items: data.items.map((m) => this.syncMapper.mapContentItemDelta(m))\r\n        };\r\n    }\r\n\r\n    syncChanges(data: Contracts.ISyncChangesContract): Responses.ISyncChangesResponse {\r\n        return {\r\n            items: data.items.map((m) => this.syncMapper.mapContentItemDelta(m))\r\n        };\r\n    }\r\n\r\n    private mapPagination(paginationContract: Contracts.IPaginationContract): IPagination {\r\n        return {\r\n            skip: paginationContract.skip,\r\n            count: paginationContract.count,\r\n            limit: paginationContract.limit,\r\n            nextPage: paginationContract.next_page,\r\n            totalCount: paginationContract.total_count ?? null\r\n        };\r\n    }\r\n}\r\n","import { ImageUrlTransformationBuilder } from './image-url-transformation-builder';\r\n\r\nexport function transformImageUrl(url: string): ImageUrlTransformationBuilder {\r\n    return new ImageUrlTransformationBuilder(url);\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport { ClientTypes, IContentTypeQueryConfig, IDeliveryNetworkResponse, Responses } from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from '../common/base-query.class';\r\n\r\nexport class SingleTypeQuery<TClientTypes extends ClientTypes> extends BaseQuery<\r\n    TClientTypes,\r\n    Responses.IViewContentTypeResponse<TClientTypes['contentTypeCodenames']>,\r\n    IContentTypeQueryConfig,\r\n    Contracts.IViewContentTypeContract\r\n> {\r\n    protected _queryConfig: IContentTypeQueryConfig = {};\r\n\r\n    constructor(\r\n        protected config: IDeliveryClientConfig,\r\n        protected queryService: QueryService<TClientTypes>,\r\n        private typeCodename: string\r\n    ) {\r\n        super(config, queryService);\r\n\r\n        if (!typeCodename) {\r\n            throw Error(`Cannot create type query without the codename of the type`);\r\n        }\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IViewContentTypeResponse<TClientTypes['contentTypeCodenames']>,\r\n            Contracts.IViewContentTypeContract\r\n        >\r\n    > {\r\n        return this.queryService.getSingleType(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/types/' + this.typeCodename;\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IViewContentTypeResponse<TClientTypes['contentTypeCodenames']> {\r\n        return this.queryService.mappingService.viewContentTypeResponse(json);\r\n    }\r\n}\r\n","export * from './common';\r\nexport * from './element-models';\r\nexport * from './item-models';\r\nexport * from './taxonomy-models';\r\nexport * from './content-type-models';\r\nexport * from './language-models';\r\nexport * from './responses';\r\nexport * from './sync-models';\r\n\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport { IItemQueryConfig, IDeliveryNetworkResponse, Responses, ClientTypes, IContentItemDelta } from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseListingQuery } from '../common/base-listing-query.class';\r\n\r\nexport class SyncChangesQuery<TClientTypes extends ClientTypes> extends BaseListingQuery<\r\n    TClientTypes,\r\n    IContentItemDelta,\r\n    Responses.ISyncChangesResponse,\r\n    Responses.ISyncChangesAllResponse,\r\n    IItemQueryConfig,\r\n    Contracts.ISyncChangesContract\r\n> {\r\n    protected _queryConfig: IItemQueryConfig = {};\r\n\r\n    private readonly action: string = '/sync';\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    toPromise(): Promise<IDeliveryNetworkResponse<Responses.ISyncChangesResponse, Contracts.ISyncChangesContract>> {\r\n        console.warn(\r\n            `Sync Api v1 is deprecated. Please use the new Sync Api v2. https://kontent.ai/learn/docs/apis/openapi/sync-api-v2/`\r\n        );\r\n        return this.queryService.syncChanges(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        return super.resolveUrlInternal(this.action);\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: IItemQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    map(json: any): Responses.ISyncChangesResponse {\r\n        return this.queryService.mappingService.syncChanges(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: IContentItemDelta[],\r\n        responses: IDeliveryNetworkResponse<Responses.ISyncChangesResponse, Contracts.ISyncChangesContract>[]\r\n    ): Responses.ISyncChangesAllResponse {\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n}\r\n","export * from './delivery-configs';\r\n","import { IHeader, IHttpCancelRequestToken, IQueryParameter } from '@kontent-ai/core-sdk';\r\nimport { IDeliveryNetworkResponse } from './base-responses';\r\nimport { IPagination } from './pagination.class';\r\n\r\nexport type LinkedItemsReferenceHandler = 'map' | 'ignore';\r\n\r\nexport interface IProxyUrlData {\r\n    action: string;\r\n    domain: string;\r\n    queryParameters: IQueryParameter[];\r\n    queryString: string;\r\n    queryConfig: IQueryConfig;\r\n    environmentId: string;\r\n}\r\n\r\nexport interface ISDKInfo {\r\n    /**\r\n     * Name of SDK\r\n     */\r\n    name: string;\r\n    /**\r\n     * Version SDK\r\n     */\r\n    version: string;\r\n    /**\r\n     * Host of SDK\r\n     */\r\n    host: string;\r\n}\r\n\r\nexport interface IKontentResponse {}\r\n\r\nexport interface IKontentListWithHeaderResponse extends IKontentResponse {\r\n    items: any[];\r\n}\r\n\r\nexport interface IKontentListResponse extends IKontentResponse {\r\n    pagination?: IPagination;\r\n    items: any[];\r\n}\r\n\r\nexport interface IKontentListAllResponse extends IKontentResponse {\r\n    responses: any[];\r\n    items: any[];\r\n}\r\n\r\nexport interface IListAllQueryConfig<TResponse extends IKontentListResponse, TContract> {\r\n    /**\r\n     * Number of pages to get. If not set, all available pages are fetched.\r\n     */\r\n    pages?: number;\r\n\r\n    /**\r\n     * Delay between each HTTP requests\r\n     */\r\n    delayBetweenRequests?: number;\r\n\r\n    /**\r\n     * Executed when a list response is loaded\r\n     */\r\n    responseFetched?: (\r\n        response: IDeliveryNetworkResponse<TResponse, TContract>,\r\n        nextPageUrl?: string,\r\n        continuationToken?: string\r\n    ) => void;\r\n}\r\n\r\nexport interface IQueryConfig {\r\n    /**\r\n     * Indicates if query should use preview mode. Overrides default configuration\r\n     */\r\n    usePreviewMode?: boolean;\r\n\r\n    /**\r\n     * Indicates if query should use secured delivery API mode.  Overrides default configuration\r\n     */\r\n    useSecuredMode?: boolean;\r\n\r\n    /**\r\n     * If the requested content has changed since the last request, the header determines whether\r\n     * to wait while fetching content. This can be useful when retrieving changed content\r\n     * in reaction to a webhook call. By default, when the header is not set, the API\r\n     * serves old content (if cached by the CDN) while it's fetching the new content\r\n     * to minimize wait time.\r\n     */\r\n    waitForLoadingNewContent?: boolean;\r\n\r\n    /**\r\n     * Extra headers added to request\r\n     */\r\n    customHeaders?: IHeader[];\r\n\r\n    /**\r\n     * Cancel token\r\n     */\r\n    cancelToken?: IHttpCancelRequestToken<any>;\r\n}\r\n\r\nexport interface IDeliveryErrorRaw {\r\n    message: string;\r\n    request_id: string | null;\r\n    error_code: number;\r\n    specific_code: number;\r\n}\r\n\r\nexport class DeliveryError {\r\n    public message: string;\r\n    public requestId: string | null;\r\n    public errorCode: number;\r\n    public specificCode: number;\r\n\r\n    constructor(data: { message: string; requestId: string | null; errorCode: number; specificCode: number }) {\r\n        this.message = data.message;\r\n        this.requestId = data.requestId;\r\n        this.errorCode = data.errorCode;\r\n        this.specificCode = data.specificCode;\r\n    }\r\n}\r\n","export * from './filters';\r\nexport * from './pagination.class';\r\nexport * from './parameters';\r\nexport * from './sort-order';\r\nexport * from './common-models';\r\nexport * from './base-responses';\r\nexport * from './headers';\r\n","import { Contracts } from '../contracts';\r\nimport { IContentType, IContentTypeSystemAttributes, IGenericElement } from '../models';\r\n\r\nexport class TypeMapper<TContentTypeCodenames extends string> {\r\n    mapSingleType(response: Contracts.IViewContentTypeContract): IContentType<TContentTypeCodenames> {\r\n        return this.mapType(response);\r\n    }\r\n\r\n    mapMultipleTypes(response: Contracts.IListContentTypeContract): IContentType<TContentTypeCodenames>[] {\r\n        return response.types.map((type) => {\r\n            return this.mapType(type);\r\n        });\r\n    }\r\n\r\n    private mapType(type: Contracts.IContentTypeContract): IContentType<TContentTypeCodenames> {\r\n        if (!type) {\r\n            throw Error(`Cannot map type`);\r\n        }\r\n\r\n        if (!type.elements) {\r\n            throw Error(`Cannot map type elements`);\r\n        }\r\n\r\n        const system: IContentTypeSystemAttributes<TContentTypeCodenames> = {\r\n            codename: type.system.codename as TContentTypeCodenames,\r\n            id: type.system.id,\r\n            name: type.system.name,\r\n            lastModified: type.system.last_modified\r\n        };\r\n\r\n        const elements: IGenericElement[] = [];\r\n\r\n        const elementNames = Object.getOwnPropertyNames(type.elements);\r\n        elementNames.forEach((elementName: string) => {\r\n            const typeElement = type.elements[elementName];\r\n\r\n            if (!typeElement) {\r\n                throw Error(`Cannot find element '${elementName}' on type '${type.system.codename}'`);\r\n            }\r\n\r\n            // use json property as a codename of the type element\r\n            const elementCodename = elementName;\r\n\r\n            // extra properties for certain element types\r\n            const options: Contracts.IElementOptionContract[] = [];\r\n\r\n            // some elements can contain options\r\n            const rawOptions = typeElement.options;\r\n            if (rawOptions) {\r\n                if (!Array.isArray(rawOptions)) {\r\n                    throw Error(`Content type 'options' property has to be an array`);\r\n                }\r\n\r\n                rawOptions.forEach((rawOption) => {\r\n                    options.push({\r\n                        codename: rawOption.codename,\r\n                        name: rawOption.name\r\n                    });\r\n                });\r\n            }\r\n\r\n            elements.push({\r\n                codename: elementCodename,\r\n                taxonomyGroup: typeElement.taxonomy_group,\r\n                options: options,\r\n                name: typeElement.name,\r\n                type: typeElement.type\r\n            });\r\n        });\r\n\r\n        return {\r\n            elements: elements,\r\n            system: system\r\n        };\r\n    }\r\n}\r\n","export * from './element.mapper';\r\nexport * from './item.mapper';\r\nexport * from './taxonomy.mapper';\r\nexport * from './type.mapper';\r\nexport * from './generic-element.mapper';\r\nexport * from './language.mapper';\r\nexport * from './used-in.mapper';\r\nexport * from './sync.mapper';\r\n","export class CodenameHelper {\r\n    /**\r\n     * This is used to prevent errors caused by reserved names in content item codename (e.g. 'constructor')\r\n     */\r\n    escapeCodenameInCodenameIndexer(codename: string): string {\r\n        return `_${codename}`;\r\n    }\r\n}\r\n\r\nexport const codenameHelper = new CodenameHelper();\r\n","\nimport { ISDKInfo } from '@kontent-ai/core-sdk';\nexport const sdkInfo: ISDKInfo = {\n    host: 'npmjs.com',\n    version: '16.3.0',\n    name: '@kontent-ai/delivery-sdk'\n};\n","import { IHeader, IQueryParameter } from '@kontent-ai/core-sdk';\r\n\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    ClientTypes,\r\n    Filters,\r\n    IDeliveryNetworkResponse,\r\n    IKontentResponse,\r\n    IQueryConfig,\r\n    Parameters\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\n\r\nexport abstract class BaseQuery<\r\n    TClientTypes extends ClientTypes,\r\n    TResponse extends IKontentResponse,\r\n    TQueryConfig extends IQueryConfig,\r\n    TContract\r\n> {\r\n    protected parameters: IQueryParameter[] = [];\r\n    protected customUrl?: string;\r\n    protected abstract _queryConfig: TQueryConfig;\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {}\r\n\r\n    /**\r\n     * Gets URL of the query\r\n     */\r\n    abstract getUrl(): string;\r\n\r\n    /**\r\n     * Gets promise for query execution\r\n     */\r\n    abstract toPromise(): Promise<IDeliveryNetworkResponse<TResponse, TContract>>;\r\n\r\n    /**\r\n     * Maps json data to response\r\n     */\r\n    abstract map(json: any): TResponse;\r\n\r\n    /**\r\n     * Adds custom parameter to query\r\n     * @param name Name of parameter\r\n     * @param value Value of parameter\r\n     */\r\n    withCustomParameter(name: string, value: string): this {\r\n        this.parameters.push(new Parameters.QueryParameter(name, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds parameter to query\r\n     * @param name Name of parameter\r\n     * @param value Value of parameter\r\n     */\r\n    withParameter(parameter: IQueryParameter): this {\r\n        this.parameters.push(parameter);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds parameters to query\r\n     * @param parameters Array of parameters\r\n     */\r\n    withParameters(parameters: IQueryParameter[]): this {\r\n        this.parameters.push(...parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets headers used by this query\r\n     */\r\n    getHeaders(): IHeader[] {\r\n        return this.queryService.getHeaders(this._queryConfig, []);\r\n    }\r\n\r\n    /**\r\n     * Sets request headers\r\n     */\r\n    withHeaders(headers: IHeader[]): this {\r\n        const queryHeaders = this._queryConfig.customHeaders ?? [];\r\n        queryHeaders.push(...headers);\r\n        this._queryConfig.customHeaders = queryHeaders;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets request header\r\n     */\r\n    withHeader(header: IHeader): this {\r\n        const queryHeaders = this._queryConfig.customHeaders ?? [];\r\n        queryHeaders.push(header);\r\n        this._queryConfig.customHeaders = queryHeaders;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets custom URL of request (overrides default URL of the query)\r\n     */\r\n    withCustomUrl(url: string): this {\r\n        this.customUrl = url;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets all query parameter currently applied to query\r\n     */\r\n    getParameters(): IQueryParameter[] {\r\n        return this.parameters;\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: TQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    protected resolveUrlInternal(action: string): string {\r\n        // use custom URL if user specified it\r\n        if (this.customUrl) {\r\n            return this.customUrl;\r\n        }\r\n\r\n        // use original url\r\n        return this.queryService.getUrl(action, this._queryConfig ?? {}, this.getParameters());\r\n    }\r\n\r\n    protected processDefaultLanguageParameter(): void {\r\n        // add default language if none is specified && default language is specified globally\r\n        if (this.config.defaultLanguage) {\r\n            const languageParameter = this.getParameters().find((m) =>\r\n                m.getParam()?.toLowerCase().includes('language='.toLowerCase())\r\n            );\r\n            if (!languageParameter) {\r\n                // language parameter was not specified in query, use globally defined language\r\n                this.parameters.push(new Parameters.LanguageParameter(this.config.defaultLanguage));\r\n            }\r\n        }\r\n    }\r\n\r\n    protected processExcludeArchivedItemsParameter(): void {\r\n        if (this.config.excludeArchivedItems) {\r\n            this.parameters.push(new Filters.NotEqualsFilter('system.workflow_step', 'archived'));\r\n        }\r\n    }\r\n}\r\n","import { ClientTypes } from '../models';\r\nimport { IDeliveryClientConfig } from '../config/delivery-configs';\r\nimport { DeliveryClient } from './delivery-client';\r\n\r\nexport function createDeliveryClient<TClientTypes extends ClientTypes = ClientTypes>(\r\n    config: IDeliveryClientConfig\r\n): DeliveryClient<TClientTypes> {\r\n    return new DeliveryClient(config);\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    Filters,\r\n    IContentItem,\r\n    IItemQueryConfig,\r\n    IDeliveryNetworkResponse,\r\n    Responses,\r\n    Parameters,\r\n    ClientTypes\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseItemListingQuery } from '../common/base-item-listing-query.class';\r\n\r\nexport class MultipleItemsQuery<\r\n    TClientTypes extends ClientTypes,\r\n    TContentItem extends IContentItem = IContentItem\r\n> extends BaseItemListingQuery<\r\n    TClientTypes,\r\n    Responses.IListContentItemsResponse<TContentItem, TClientTypes['contentItemType']>,\r\n    Responses.IListContentItemsAllResponse<TContentItem, TClientTypes['contentItemType']>,\r\n    IItemQueryConfig,\r\n    Contracts.IListContentItemsContract\r\n> {\r\n    protected _queryConfig: IItemQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Adds information about the total number of content items matching your query.\r\n     * When set to true, the pagination object returned in the API response contains\r\n     * an additional total_count property.\r\n     */\r\n    includeTotalCountParameter(): this {\r\n        this.parameters.push(new Parameters.IncludeTotalCountParameter());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets only item of given type\r\n     * @param type Codename of type to get\r\n     */\r\n    type(type: TClientTypes['contentTypeCodenames']): this {\r\n        this.parameters.push(new Filters.TypeFilter(type));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets items of given types (logical or)\r\n     * I.e. get items of either 'Actor' or 'Movie' type\r\n     * @param types Types to get\r\n     */\r\n    types(types: TClientTypes['contentTypeCodenames'][]): this {\r\n        this.parameters.push(new Filters.TypeFilter(types));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets only item from given collection\r\n     * @param collection Codename of collection to get\r\n     */\r\n    collection(collection: TClientTypes['collectionCodenames']): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collection));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets items from given collections (logical or)\r\n     * I.e. get items of either 'default' or 'christmas-campaign' collection\r\n     * @param collections Collections to get\r\n     */\r\n    collections(collections: TClientTypes['collectionCodenames'][]): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collections));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Indicates depth of query that affects loading of nested linked items.\r\n     * @param depth Depth of the query (> 0)\r\n     */\r\n    depthParameter(depth: number): this {\r\n        this.parameters.push(new Parameters.DepthParameter(depth));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Language codename\r\n     * @param languageCodename Codename of the language\r\n     */\r\n    languageParameter(languageCodename: TClientTypes['languageCodenames']): this {\r\n        this.parameters.push(new Parameters.LanguageParameter(languageCodename));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to limit the number of elements returned by query.\r\n     * @param elementCodenames Array of element codenames to fetch\r\n     */\r\n    elementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this {\r\n        this.parameters.push(new Parameters.ElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to exclude elements returned by query.\r\n     * @param elementCodenames Array of element codenames to exclude\r\n     */\r\n    excludeElementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this {\r\n        this.parameters.push(new Parameters.ExcludeElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListContentItemsResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IListContentItemsContract\r\n        >\r\n    > {\r\n        return this.queryService.getMultipleItems(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/items';\r\n\r\n        // handle default language\r\n        this.processDefaultLanguageParameter();\r\n\r\n        // handle archived items\r\n        this.processExcludeArchivedItemsParameter();\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IListContentItemsResponse<TContentItem, TClientTypes['contentItemType']> {\r\n        return this.queryService.mappingService.listContentItemsResponse(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: any[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListContentItemsResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IListContentItemsContract\r\n        >[]\r\n    ): Responses.IListContentItemsAllResponse<TContentItem, TClientTypes['contentItemType']> {\r\n        this.linkItems(items, responses);\r\n\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n\r\n    private linkItems(\r\n        items: IContentItem[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListContentItemsResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IListContentItemsContract\r\n        >[]\r\n    ): void {\r\n        // prepare all available items (including components) for linking\r\n        const allContentItems: IContentItem[] = [];\r\n\r\n        // process linked items (modular_content part of the response)\r\n        for (const response of responses) {\r\n            allContentItems.push(\r\n                ...Object.values(response.data.linkedItems)\r\n                    .filter((m) => m !== undefined)\r\n                    .map((m) => m as TClientTypes['contentItemType'])\r\n            );\r\n        }\r\n\r\n        // add standard items\r\n        for (const item of items) {\r\n            if (!allContentItems.find((m) => m.system.codename.toLowerCase() === item.system.codename.toLowerCase())) {\r\n                allContentItems.push(item);\r\n            }\r\n        }\r\n        // process main items\r\n        this.linkItemsInRte(allContentItems);\r\n    }\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    Filters,\r\n    IDeliveryNetworkResponse,\r\n    Parameters,\r\n    Responses,\r\n    IItemFeedQueryConfig,\r\n    ClientTypes,\r\n    IUsedInItemRecord,\r\n    IQueryConfig\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseListingQuery } from '../common/base-listing-query.class';\r\n\r\nexport type UsedInSetup = {\r\n    readonly entity: 'asset' | 'contentItem';\r\n    readonly codename: string;\r\n};\r\n\r\nexport class UsedInQuery<TClientTypes extends ClientTypes> extends BaseListingQuery<\r\n    TClientTypes,\r\n    IUsedInItemRecord<TClientTypes>,\r\n    Responses.IUsedInResponse<TClientTypes>,\r\n    Responses.IUsedInAllResponse<TClientTypes>,\r\n    IQueryConfig,\r\n    Contracts.IUsedInItemsContract\r\n> {\r\n    protected _queryConfig: IQueryConfig = {};\r\n\r\n    constructor(\r\n        protected readonly config: IDeliveryClientConfig,\r\n        protected readonly queryService: QueryService<TClientTypes>,\r\n        protected readonly setup: UsedInSetup\r\n    ) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets only item of given type\r\n     * @param type Codename of type to get\r\n     */\r\n    type(type: TClientTypes['contentTypeCodenames']): this {\r\n        this.parameters.push(new Filters.TypeFilter(type));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets items of given types (logical or)\r\n     * I.e. get items of either 'Actor' or 'Movie' type\r\n     * @param types Types to get\r\n     */\r\n    types(types: TClientTypes['contentTypeCodenames'][]): this {\r\n        this.parameters.push(new Filters.TypeFilter(types));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets only item from given collection\r\n     * @param collection Codename of collection to get\r\n     */\r\n    collection(collection: TClientTypes['collectionCodenames']): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collection));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets items from given collections (logical or)\r\n     * I.e. get items of either 'default' or 'christmas-campaign' collection\r\n     * @param collections Collections to get\r\n     */\r\n    collections(collections: TClientTypes['collectionCodenames'][]): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collections));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Language codename\r\n     * @param languageCodename Codename of the language\r\n     */\r\n    languageParameter(languageCodename: TClientTypes['languageCodenames']): this {\r\n        this.parameters.push(new Parameters.LanguageParameter(languageCodename));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<Responses.IUsedInResponse<TClientTypes>, Contracts.IUsedInItemsContract>\r\n    > {\r\n        return this.queryService.getUsedIn(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = `/${this.setup.entity === 'asset' ? 'assets' : 'items'}/${this.setup.codename}/used-in`;\r\n\r\n        // add default language is necessary\r\n        this.processDefaultLanguageParameter();\r\n\r\n        //process client level archived item exclusion\r\n        this.processExcludeArchivedItemsParameter();\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: IItemFeedQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    map(json: any): Responses.IUsedInResponse<TClientTypes> {\r\n        return this.queryService.mappingService.usedInResponse(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: IUsedInItemRecord<TClientTypes>[],\r\n        responses: IDeliveryNetworkResponse<Responses.IUsedInResponse<TClientTypes>, Contracts.IUsedInItemsContract>[]\r\n    ): Responses.IUsedInAllResponse<TClientTypes> {\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n}\r\n","// Public API\r\nexport * from './client';\r\nexport * from './config';\r\nexport * from './contracts';\r\nexport * from './elements';\r\nexport * from './images';\r\nexport * from './mappers';\r\nexport * from './models';\r\nexport * from './query';\r\nexport * from './sdk-info.generated';\r\nexport * from './services';\r\nexport * from './utilities';\r\n","export * from './common/base-query.class';\r\nexport * from './element/element-query.class';\r\nexport * from './item/multiple-items-query.class';\r\nexport * from './item/single-item-query.class';\r\nexport * from './taxonomy/taxonomies-query.class';\r\nexport * from './taxonomy/taxonomy-query.class';\r\nexport * from './type/multiple-type-query.class';\r\nexport * from './type/single-type-query.class';\r\nexport * from './items-feed/items-feed-query.class';\r\nexport * from './language/languages-query.class';\r\nexport * from './sync/initialize-sync-query.class';\r\nexport * from './sync/sync-changes-query.class';\r\nexport * from './used-in/used-in-query.class';\r\n","import { IQueryParameter } from '@kontent-ai/core-sdk';\r\n\r\nimport { Parameters } from '../models';\r\nimport { ImageCompression, ImageFitMode, ImageFormat } from './image.models';\r\n\r\nexport class ImageUrlTransformationBuilder {\r\n  private queryParams: IQueryParameter[] = [];\r\n  private readonly automaticFormatValue: string = 'format';\r\n\r\n  constructor(\r\n    /** Image url */\r\n    public imageUrl: string\r\n  ) { }\r\n\r\n  /**\r\n   * Used to add custom parameters to existing query string\r\n   * @param param Parameter (may or may not include value)\r\n   */\r\n  withCustomParam(param: string): this {\r\n    this.queryParams.push(\r\n      new Parameters.CustomParameter(param)\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The dpr transformation is used to serve correctly sized images for devices that expose a device pixel ratio.\r\n   * @param dpr A required DPR value.\r\n   */\r\n  withDpr(dpr: number): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('dpr', dpr.toString())\r\n    );\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Applies the crop transformation that removes pixels from an image outside the specified rectangle.\r\n   * @param x Rectangle offset on the X-axis.\r\n   * @param y Rectangle offset on the Y-axis.\r\n   * @param width Rectangle width.\r\n   * @param height Rectangle height.\r\n   */\r\n  withRectangleCrop(x: number, y: number, width: number, height: number): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('rect', [x, y, width, height].join(','))\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Applies the crop transformation centered on the specified point.\r\n   * @param x Focal point X coordinate.\r\n   * @param y Focal point Y coordinate.\r\n   * @param z Zoom of the transformation.\r\n   */\r\n  withFocalPointCrop(x: number, y: number, z: number): this {\r\n    this.withFitMode('crop');\r\n\r\n    this.queryParams.push(new Parameters.QueryParameter('crop', 'focalpoint'));\r\n    this.queryParams.push(new Parameters.QueryParameter('fp-x', x.toString()));\r\n    this.queryParams.push(new Parameters.QueryParameter('fp-y', y.toString()));\r\n    this.queryParams.push(new Parameters.QueryParameter('fp-z', z.toString()));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables WebP image support.\r\n   * @param compression Specifies the lossy or lossless compression.\r\n   */\r\n  withAutomaticFormat(backupFormat?: ImageFormat): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('auto', this.automaticFormatValue)\r\n    );\r\n\r\n    if (backupFormat) {\r\n      this.withFormat(backupFormat);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The fit transformation controls how the output image is fit to its target dimensions after resizing.\r\n   * @param fitMode Specifies the mode for the transformation.\r\n   */\r\n  withFitMode(fitMode: ImageFitMode): this {\r\n    this.queryParams.push(new Parameters.QueryParameter('fit', fitMode));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Specifies the compression mode for the WebP image transformations.\r\n   * @param compression Specifies the lossy or lossless compression.\r\n   */\r\n  withCompression(compression: ImageCompression): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter(\r\n        'lossless',\r\n        compression === 'lossless' ? 'true' : 'false'\r\n      )\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Applies the quality parameter that enables control over the compression level for lossy file-formatted images.\r\n   * @param quality The required quality of the image.\r\n   */\r\n  withQuality(quality: number): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('q', quality.toString())\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The format transformation enables the source image to be converted (a.k.a., \"transcoded\") from\r\n   * one encoded format to another. This is very useful when the source image has been saved in a sub-optimal\r\n   * file format that hinders performance.\r\n   * @param format Target image file type.\r\n   */\r\n  withFormat(format: ImageFormat): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('fm', format)\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The height transformation enables dynamic height resizing based on pixels and percent values.\r\n   * @param height A required image height.\r\n   */\r\n  withHeight(height: number): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('h', height.toString())\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The width transformation enables dynamic width resizing based on pixels and percent values.\r\n   * @param width A required image width.\r\n   */\r\n  withWidth(width: number): this {\r\n    this.queryParams.push(new Parameters.QueryParameter('w', width.toString()));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets params applied to image\r\n   */\r\n  getParams(): IQueryParameter[] {\r\n    return this.queryParams;\r\n  }\r\n\r\n  /**\r\n   * Gets query string part of the image URL\r\n   */\r\n  getQueryString(): string {\r\n    let query: string = '';\r\n    this.queryParams.forEach(filter => {\r\n      if (query.indexOf('?') > -1) {\r\n        query = query + '&' + filter.getParam();\r\n      } else {\r\n        query = query + '?' + filter.getParam();\r\n      }\r\n    });\r\n\r\n    return query;\r\n  }\r\n\r\n  /**\r\n   * Gets full transformed url to image with parameters\r\n   */\r\n  getUrl(): string {\r\n    return this.imageUrl + this.getQueryString();\r\n  }\r\n}\r\n","import { codenameHelper, deliveryUrlHelper, enumHelper } from '../utilities';\r\n\r\nimport { IDeliveryClientConfig } from '../config';\r\nimport { Contracts } from '../contracts';\r\nimport { ElementModels, Elements, ElementType } from '../elements';\r\nimport {\r\n    IContentItem,\r\n    IContentItemsContainer,\r\n    IContentItemWithRawDataContainer,\r\n    IContentItemWithRawElements,\r\n    ILink,\r\n    IMapElementsResult,\r\n    IRichTextImage\r\n} from '../models';\r\n\r\ninterface IRichTextImageUrlRecord {\r\n    originalUrl: string;\r\n    newUrl: string;\r\n}\r\n\r\nexport class ElementMapper<TContentItemType extends IContentItem> {\r\n    constructor(private readonly config: IDeliveryClientConfig) {}\r\n\r\n    mapElements<TContentItem extends TContentItemType = TContentItemType>(data: {\r\n        dataToMap: IContentItemWithRawElements;\r\n        processedItems: IContentItemsContainer<TContentItem>;\r\n        processingStartedForCodenames: string[];\r\n        preparedItems: IContentItemWithRawDataContainer;\r\n    }): IMapElementsResult<TContentItem, TContentItemType> | undefined {\r\n        // return processed item to avoid infinite recursion\r\n        const processedItem =\r\n            data.processedItems[codenameHelper.escapeCodenameInCodenameIndexer(data.dataToMap.item.system.codename)];\r\n        if (processedItem) {\r\n            // item was already resolved\r\n            return {\r\n                item: processedItem,\r\n                processedItems: data.processedItems,\r\n                preparedItems: data.preparedItems,\r\n                processingStartedForCodenames: data.processingStartedForCodenames\r\n            };\r\n        }\r\n\r\n        const preparedItem =\r\n            data.preparedItems[codenameHelper.escapeCodenameInCodenameIndexer(data.dataToMap.item.system.codename)];\r\n\r\n        const itemInstance = preparedItem?.item;\r\n\r\n        if (!itemInstance) {\r\n            // item is not present in response\r\n            return undefined;\r\n        }\r\n\r\n        // mapp elements\r\n        const elementCodenames = Object.getOwnPropertyNames(data.dataToMap.rawItem.elements);\r\n\r\n        for (const elementCodename of elementCodenames) {\r\n            const elementWrapper: ElementModels.IElementWrapper = {\r\n                system: data.dataToMap.item.system,\r\n                rawElement: data.dataToMap.rawItem.elements[elementCodename],\r\n                element: elementCodename\r\n            };\r\n\r\n            const mappedElement = this.mapElement({\r\n                elementWrapper: elementWrapper,\r\n                item: itemInstance,\r\n                preparedItems: data.preparedItems,\r\n                processingStartedForCodenames: data.processingStartedForCodenames,\r\n                processedItems: data.processedItems\r\n            });\r\n\r\n            // set mapped elements\r\n            itemInstance.elements[elementCodename] = mappedElement;\r\n        }\r\n\r\n        return {\r\n            item: itemInstance as TContentItem,\r\n            processedItems: data.processedItems,\r\n            preparedItems: data.preparedItems,\r\n            processingStartedForCodenames: data.processingStartedForCodenames\r\n        };\r\n    }\r\n\r\n    private mapElement(data: {\r\n        elementWrapper: ElementModels.IElementWrapper;\r\n        item: IContentItem;\r\n        processedItems: IContentItemsContainer<TContentItemType>;\r\n        processingStartedForCodenames: string[];\r\n        preparedItems: IContentItemWithRawDataContainer;\r\n    }): ElementModels.IElement<any> {\r\n        const elementType = enumHelper.getEnumFromValue<ElementType>(ElementType, data.elementWrapper.rawElement.type);\r\n        if (elementType) {\r\n            if (elementType === ElementType.ModularContent) {\r\n                return this.mapLinkedItemsElement({\r\n                    elementWrapper: data.elementWrapper,\r\n                    preparedItems: data.preparedItems,\r\n                    processingStartedForCodenames: data.processingStartedForCodenames,\r\n                    processedItems: data.processedItems\r\n                });\r\n            }\r\n\r\n            if (elementType === ElementType.Text) {\r\n                return this.mapTextElement(data.elementWrapper);\r\n            }\r\n            if (elementType === ElementType.Asset) {\r\n                return this.mapAssetsElement(data.elementWrapper);\r\n            }\r\n\r\n            if (elementType === ElementType.Number) {\r\n                return this.mapNumberElement(data.elementWrapper);\r\n            }\r\n            if (elementType === ElementType.MultipleChoice) {\r\n                return this.mapMultipleChoiceElement(data.elementWrapper);\r\n            }\r\n\r\n            if (elementType === ElementType.DateTime) {\r\n                return this.mapDateTimeElement(data.elementWrapper);\r\n            }\r\n\r\n            if (elementType === ElementType.RichText) {\r\n                // add to parent items\r\n                return this.mapRichTextElement(\r\n                    data.elementWrapper,\r\n                    data.processedItems,\r\n                    data.processingStartedForCodenames,\r\n                    data.preparedItems\r\n                );\r\n            }\r\n\r\n            if (elementType === ElementType.UrlSlug) {\r\n                return this.mapUrlSlugElement(data.elementWrapper);\r\n            }\r\n\r\n            if (elementType === ElementType.Taxonomy) {\r\n                return this.mapTaxonomyElement(data.elementWrapper);\r\n            }\r\n\r\n            if (elementType === ElementType.Custom) {\r\n                return this.mapCustomElement(data.elementWrapper);\r\n            }\r\n        }\r\n        console.warn(\r\n            `Could not map element '${data.elementWrapper.rawElement.name}' of type '${data.elementWrapper.rawElement.type}'. Returning unknown element instead.`\r\n        );\r\n        return this.mapUnknowElement(data.elementWrapper);\r\n    }\r\n\r\n    private mapRichTextElement(\r\n        elementWrapper: ElementModels.IElementWrapper,\r\n        processedItems: IContentItemsContainer<TContentItemType>,\r\n        processingStartedForCodenames: string[],\r\n        preparedItems: IContentItemWithRawDataContainer\r\n    ): Elements.RichTextElement {\r\n        const rawElement = elementWrapper.rawElement as Contracts.IRichTextElementContract;\r\n\r\n        // get all linked items and linked items codenames nested in rich text\r\n        const richTextLinkedItems: IContentItem[] = [];\r\n        const richTextLinkedItemsCodenames: string[] = [];\r\n\r\n        // The Kontent Delivery API is not guaranteed to return rich-text modular_content array items in the same order in which they appear inside the `value` property.\r\n        // We extract the modular_content codenames in the rich-text value and sort the raw modular_content based on that order instead.\r\n        const rawModularContentCodenamesMatches = (rawElement.value as string).matchAll(\r\n            /<object[^>]+data-codename=\"(?<codename>[a-z0-9_]*)\".*?>/g\r\n        );\r\n        const rawModularContentCodenamesSorted = Array.from(rawModularContentCodenamesMatches).reduce<string[]>(\r\n            (acc, match) => {\r\n                if (match.groups && match.groups.codename) {\r\n                    acc.push(match.groups.codename);\r\n                }\r\n                return acc;\r\n            },\r\n            [] as string[]\r\n        );\r\n        const rawModularContentCodenames = [...rawElement.modular_content].sort(function (a, b) {\r\n            return rawModularContentCodenamesSorted.indexOf(a) - rawModularContentCodenamesSorted.indexOf(b);\r\n        });\r\n\r\n        for (const codename of rawModularContentCodenames) {\r\n            richTextLinkedItemsCodenames.push(codename);\r\n            // get linked item and check if it exists (it might not be included in response due to 'Depth' parameter)\r\n            const preparedData = preparedItems[codename];\r\n\r\n            // first try to get existing item\r\n            if (this.canMapLinkedItems()) {\r\n                const existingLinkedItem = this.getOrSaveLinkedItemForElement(\r\n                    codename,\r\n                    rawElement,\r\n                    processedItems,\r\n                    processingStartedForCodenames,\r\n                    preparedItems\r\n                );\r\n\r\n                if (existingLinkedItem) {\r\n                    // item was found, add it to linked items\r\n                    richTextLinkedItems.push(existingLinkedItem);\r\n                } else {\r\n                    // item was not found or not yet resolved\r\n                    if (preparedData) {\r\n                        const mappedLinkedItemResult = this.mapElements({\r\n                            dataToMap: preparedData,\r\n                            preparedItems: preparedItems,\r\n                            processingStartedForCodenames: processingStartedForCodenames,\r\n                            processedItems: processedItems\r\n                        });\r\n\r\n                        // add mapped linked item to result\r\n                        if (mappedLinkedItemResult) {\r\n                            richTextLinkedItems.push(mappedLinkedItemResult.item);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // get rich text images\r\n        const richTextImagesResult = this.getRichTextImages(rawElement.images);\r\n\r\n        // extract and map links & images\r\n        const links: ILink[] = this.mapRichTextLinks(rawElement.links);\r\n        const images: IRichTextImage[] = richTextImagesResult.richTextImages;\r\n\r\n        // replace asset urls in html\r\n        const richTextHtml: string = this.getRichTextHtml(rawElement.value, richTextImagesResult.imageUrlRecords);\r\n\r\n        return {\r\n            images: images,\r\n            linkedItemCodenames: richTextLinkedItemsCodenames,\r\n            linkedItems: richTextLinkedItems,\r\n            links: links,\r\n            name: rawElement.name,\r\n            type: ElementType.RichText,\r\n            value: richTextHtml\r\n        };\r\n    }\r\n\r\n    private mapDateTimeElement(elementWrapper: ElementModels.IElementWrapper): Elements.DateTimeElement {\r\n        const rawElement = elementWrapper.rawElement as Contracts.IDateTimeElementContract;\r\n        return {\r\n            ...this.buildElement(elementWrapper, ElementType.DateTime, () => rawElement.value),\r\n            displayTimeZone: rawElement.display_timezone ?? null\r\n        };\r\n    }\r\n\r\n    private mapMultipleChoiceElement(elementWrapper: ElementModels.IElementWrapper): Elements.MultipleChoiceElement {\r\n        return this.buildElement(elementWrapper, ElementType.MultipleChoice, () => elementWrapper.rawElement.value);\r\n    }\r\n\r\n    private mapNumberElement(elementWrapper: ElementModels.IElementWrapper): Elements.NumberElement {\r\n        return this.buildElement(elementWrapper, ElementType.Number, () => {\r\n            if (elementWrapper.rawElement.value === 0) {\r\n                return 0;\r\n            } else if (elementWrapper.rawElement.value) {\r\n                return +elementWrapper.rawElement.value;\r\n            }\r\n            return null;\r\n        });\r\n    }\r\n\r\n    private mapTextElement(elementWrapper: ElementModels.IElementWrapper): Elements.TextElement {\r\n        return this.buildElement(elementWrapper, ElementType.Text, () => elementWrapper.rawElement.value);\r\n    }\r\n\r\n    private mapAssetsElement(elementWrapper: ElementModels.IElementWrapper): Elements.AssetsElement {\r\n        return this.buildElement(elementWrapper, ElementType.Asset, () => {\r\n            const assetContracts = elementWrapper.rawElement.value as Contracts.IAssetContract[];\r\n\r\n            const assets: ElementModels.AssetModel[] = [];\r\n\r\n            for (const assetContract of assetContracts) {\r\n                let renditions: { [renditionPresetCodename: string]: ElementModels.Rendition } | null = null;\r\n\r\n                // get asset url (custom domain may be configured)\r\n                const assetUrl: string = this.config.assetsDomain\r\n                    ? deliveryUrlHelper.replaceAssetDomain(assetContract.url, this.config.assetsDomain)\r\n                    : assetContract.url;\r\n\r\n                if (assetContract.renditions) {\r\n                    renditions = {};\r\n\r\n                    for (const renditionPresetKey of Object.keys(assetContract.renditions)) {\r\n                        const rendition = assetContract.renditions[renditionPresetKey];\r\n\r\n                        renditions[renditionPresetKey] = {\r\n                            ...rendition,\r\n                            url: `${assetUrl}?${rendition.query}` // enhance rendition with absolute url\r\n                        };\r\n                    }\r\n                }\r\n\r\n                const renditionToBeApplied: ElementModels.Rendition | null =\r\n                    (this.config.defaultRenditionPreset && renditions?.[this.config.defaultRenditionPreset]) || null;\r\n\r\n                const finalUrl = renditionToBeApplied?.url ?? assetUrl;\r\n\r\n                const asset: ElementModels.AssetModel = {\r\n                    ...assetContract,\r\n                    url: finalUrl, // use custom url of asset which may contain custom domain and applied rendition\r\n                    renditions\r\n                };\r\n\r\n                assets.push(asset);\r\n            }\r\n\r\n            return assets;\r\n        });\r\n    }\r\n\r\n    private mapTaxonomyElement(elementWrapper: ElementModels.IElementWrapper): Elements.TaxonomyElement {\r\n        return {\r\n            ...this.buildElement(elementWrapper, ElementType.Taxonomy, () => elementWrapper.rawElement.value),\r\n            taxonomyGroup: elementWrapper.rawElement.taxonomy_group ?? ''\r\n        };\r\n    }\r\n\r\n    private mapUnknowElement(elementWrapper: ElementModels.IElementWrapper): Elements.UnknownElement {\r\n        return this.buildElement(elementWrapper, ElementType.Unknown, () => elementWrapper.rawElement.value);\r\n    }\r\n\r\n    private mapCustomElement(\r\n        elementWrapper: ElementModels.IElementWrapper\r\n    ): Elements.CustomElement | ElementModels.IElement<string> {\r\n        // try to find element resolver\r\n        if (this.config.elementResolver) {\r\n            const elementResolverValue = this.config.elementResolver(elementWrapper);\r\n\r\n            if (elementResolverValue) {\r\n                return this.buildElement(elementWrapper, ElementType.Custom, () => elementResolverValue);\r\n            }\r\n        }\r\n\r\n        return this.buildElement(elementWrapper, ElementType.Custom, () => elementWrapper.rawElement.value);\r\n    }\r\n\r\n    private mapUrlSlugElement(elementWrapper: ElementModels.IElementWrapper): Elements.UrlSlugElement {\r\n        return this.buildElement(elementWrapper, ElementType.UrlSlug, () => elementWrapper.rawElement.value);\r\n    }\r\n\r\n    private mapLinkedItemsElement(data: {\r\n        elementWrapper: ElementModels.IElementWrapper;\r\n        processedItems: IContentItemsContainer<TContentItemType>;\r\n        processingStartedForCodenames: string[];\r\n        preparedItems: IContentItemWithRawDataContainer;\r\n    }): Elements.LinkedItemsElement<any> {\r\n        // prepare linked items\r\n        const linkedItems: IContentItem[] = [];\r\n\r\n        // value = array of item codenames\r\n        const linkedItemCodenames = data.elementWrapper.rawElement.value as string[];\r\n\r\n        for (const codename of linkedItemCodenames) {\r\n            if (this.canMapLinkedItems()) {\r\n                const linkedItem = this.getOrSaveLinkedItemForElement(\r\n                    codename,\r\n                    data.elementWrapper.rawElement,\r\n                    data.processedItems,\r\n                    data.processingStartedForCodenames,\r\n                    data.preparedItems\r\n                );\r\n                if (linkedItem) {\r\n                    // add item to result\r\n                    linkedItems.push(linkedItem);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            ...this.buildElement(data.elementWrapper, ElementType.ModularContent, () => linkedItemCodenames),\r\n            linkedItems: linkedItems\r\n        };\r\n    }\r\n\r\n    private getOrSaveLinkedItemForElement(\r\n        codename: string,\r\n        element: Contracts.IElementContract,\r\n        processedItems: IContentItemsContainer<TContentItemType>,\r\n        mappingStartedForCodenames: string[],\r\n        preparedItems: IContentItemWithRawDataContainer\r\n    ): IContentItem | undefined {\r\n        const escapedCodename = codenameHelper.escapeCodenameInCodenameIndexer(codename);\r\n\r\n        // first check if item was already resolved and return it if it was\r\n        const processedItem = processedItems[escapedCodename];\r\n\r\n        if (processedItem) {\r\n            // item was already resolved\r\n            return processedItem;\r\n        }\r\n\r\n        const preparedItem = preparedItems[escapedCodename];\r\n\r\n        if (mappingStartedForCodenames.includes(codename)) {\r\n            return preparedItem?.item;\r\n        }\r\n\r\n        mappingStartedForCodenames.push(codename);\r\n\r\n        // throw error if item is not in response and errors are not skipped\r\n        if (!preparedItem) {\r\n            return undefined;\r\n        }\r\n\r\n        let mappedLinkedItem: TContentItemType | undefined;\r\n\r\n        // original resolving if item is still undefined\r\n        const mappedLinkedItemResult = this.mapElements({\r\n            dataToMap: preparedItem,\r\n            preparedItems: preparedItems,\r\n            processingStartedForCodenames: mappingStartedForCodenames,\r\n            processedItems: processedItems\r\n        });\r\n\r\n        if (mappedLinkedItemResult) {\r\n            mappedLinkedItem = mappedLinkedItemResult.item;\r\n\r\n            // add to processed items\r\n            processedItems[escapedCodename] = mappedLinkedItem;\r\n        }\r\n\r\n        return mappedLinkedItem;\r\n    }\r\n\r\n    private mapRichTextLinks(linksJson: Contracts.IRichTextElementLinkWrapperContract): ILink[] {\r\n        const links: ILink[] = [];\r\n\r\n        for (const linkId of Object.keys(linksJson)) {\r\n            const linkRaw = linksJson[linkId];\r\n            links.push({\r\n                codename: linkRaw.codename,\r\n                linkId: linkId,\r\n                urlSlug: linkRaw.url_slug,\r\n                type: linkRaw.type\r\n            });\r\n        }\r\n\r\n        return links;\r\n    }\r\n\r\n    private getRichTextHtml(richTextHtml: string, richTextImageRecords: IRichTextImageUrlRecord[]): string {\r\n        for (const richTextImageRecord of richTextImageRecords) {\r\n            // replace rich text image url if it differs\r\n            if (richTextImageRecord.newUrl !== richTextImageRecord.originalUrl) {\r\n                richTextHtml = richTextHtml.replace(\r\n                    new RegExp(richTextImageRecord.originalUrl, 'g'),\r\n                    richTextImageRecord.newUrl\r\n                );\r\n            }\r\n        }\r\n\r\n        return richTextHtml;\r\n    }\r\n\r\n    private getRichTextImages(imagesJson: Contracts.IRichTextElementImageWrapperContract): {\r\n        richTextImages: IRichTextImage[];\r\n        imageUrlRecords: IRichTextImageUrlRecord[];\r\n    } {\r\n        const images: IRichTextImage[] = [];\r\n        const imageUrlRecords: IRichTextImageUrlRecord[] = [];\r\n\r\n        for (const imageId of Object.keys(imagesJson)) {\r\n            const imageRaw = imagesJson[imageId];\r\n\r\n            // image may contain custom asset domain\r\n            const imageUrl: string = this.config.assetsDomain\r\n                ? deliveryUrlHelper.replaceAssetDomain(imageRaw.url, this.config.assetsDomain)\r\n                : imageRaw.url;\r\n\r\n            images.push({\r\n                description: imageRaw.description ?? null,\r\n                imageId: imageRaw.image_id,\r\n                url: imageUrl,\r\n                height: imageRaw.height ?? null,\r\n                width: imageRaw.width ?? null\r\n            });\r\n\r\n            imageUrlRecords.push({\r\n                originalUrl: imageRaw.url,\r\n                newUrl: imageUrl\r\n            });\r\n        }\r\n\r\n        return {\r\n            imageUrlRecords: imageUrlRecords,\r\n            richTextImages: images\r\n        };\r\n    }\r\n\r\n    private buildElement<TValue>(\r\n        elementWrapper: ElementModels.IElementWrapper,\r\n        type: ElementType,\r\n        valueFactory: () => TValue\r\n    ): ElementModels.IElement<TValue> {\r\n        return {\r\n            name: elementWrapper.rawElement.name,\r\n            type: type,\r\n            value: valueFactory()\r\n        };\r\n    }\r\n\r\n    private canMapLinkedItems(): boolean {\r\n        if (!this.config.linkedItemsReferenceHandler) {\r\n            return true;\r\n        }\r\n        return this.config.linkedItemsReferenceHandler === 'map';\r\n    }\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    ClientTypes,\r\n    IDeliveryNetworkResponse,\r\n    ILanguage,\r\n    ILanguagesQueryConfig,\r\n    Parameters,\r\n    Responses\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseListingQuery } from '../common/base-listing-query.class';\r\n\r\nexport class LanguagesQuery<TClientTypes extends ClientTypes> extends BaseListingQuery<\r\n    TClientTypes,\r\n    ILanguage<TClientTypes['languageCodenames']>,\r\n    Responses.IListLanguagesResponse<TClientTypes['languageCodenames']>,\r\n    Responses.IListLanguagesAllResponse<TClientTypes['languageCodenames']>,\r\n    ILanguagesQueryConfig,\r\n    Contracts.IListLanguagesContract\r\n> {\r\n    /**\r\n     * Endpoint\r\n     */\r\n    protected readonly endpoint: string = 'languages';\r\n\r\n    protected _queryConfig: ILanguagesQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Limits the number of taxonomies returned by query\r\n     * @param limit Number of taxonomies to load\r\n     */\r\n    limitParameter(limit: number): this {\r\n        this.parameters.push(new Parameters.LimitParameter(limit));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Skips the selected number of taxonomies\r\n     * @param skip Number of taxonomies to skip\r\n     */\r\n    skipParameter(skip: number): this {\r\n        this.parameters.push(new Parameters.SkipParameter(skip));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListLanguagesResponse<TClientTypes['languageCodenames']>,\r\n            Contracts.IListLanguagesContract\r\n        >\r\n    > {\r\n        return this.queryService.getLanguages(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/' + this.endpoint;\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: ILanguagesQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    map(json: any): Responses.IListLanguagesResponse<TClientTypes['languageCodenames']> {\r\n        return this.queryService.mappingService.listLanguagesResponse(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: ILanguage<TClientTypes['languageCodenames']>[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListLanguagesResponse<TClientTypes['languageCodenames']>,\r\n            Contracts.IListLanguagesContract\r\n        >[]\r\n    ): Responses.IListLanguagesAllResponse<TClientTypes['languageCodenames']> {\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n}\r\n","import { Contracts } from '../contracts';\r\nimport { ClientTypes, IUsedInItemRecord } from '../models';\r\n\r\nexport class UsedInMapper<TClientTypes extends ClientTypes> {\r\n    mapUsedInItem(response: Contracts.IUsedInItemContract): IUsedInItemRecord<TClientTypes> {\r\n        return {\r\n            system: {\r\n                id: response.system.id,\r\n                name: response.system.name,\r\n                codename: response.system.codename,\r\n                language: response.system.language,\r\n                type: response.system.type,\r\n                collection: response.system.collection,\r\n                workflow: response.system.workflow,\r\n                workflowStep: response.system.workflow_step,\r\n                lastModified: response.system.last_modified\r\n            }\r\n        };\r\n    }\r\n}\r\n","import { Contracts } from '../contracts';\r\nimport { ILanguage } from '../models';\r\n\r\nexport class LanguageMapper<TLanguageCodenames extends string> {\r\n    mapMultipleLanguages(response: Contracts.IListLanguagesContract): ILanguage<TLanguageCodenames>[] {\r\n        return response.languages.map((language) => {\r\n            return this.mapLanguage(language);\r\n        });\r\n    }\r\n\r\n    private mapLanguage(language: Contracts.ILanguageContract): ILanguage<TLanguageCodenames> {\r\n        if (!language) {\r\n            throw Error(`Cannot map language`);\r\n        }\r\n\r\n        return {\r\n            system: {\r\n                codename: language.system.codename as TLanguageCodenames,\r\n                id: language.system.id,\r\n                name: language.system.name\r\n            }\r\n        };\r\n    }\r\n}\r\n","export * from './element-models';\r\nexport * from './element-type';\r\nexport * from './elements';\r\nexport * from './element-resolver';\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    Filters,\r\n    IContentItem,\r\n    IDeliveryNetworkResponse,\r\n    Parameters,\r\n    Responses,\r\n    IItemFeedQueryConfig,\r\n    ClientTypes\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseItemListingQuery } from '../common/base-item-listing-query.class';\r\n\r\nexport class ItemsFeedQuery<\r\n    TClientTypes extends ClientTypes,\r\n    TContentItem extends IContentItem = IContentItem\r\n> extends BaseItemListingQuery<\r\n    TClientTypes,\r\n    Responses.IListItemsFeedResponse<TContentItem, TClientTypes['contentItemType']>,\r\n    Responses.IListItemsFeedAllResponse<TContentItem, TClientTypes['contentItemType']>,\r\n    IItemFeedQueryConfig,\r\n    Contracts.IItemsFeedContract\r\n> {\r\n    protected _queryConfig: IItemFeedQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets only item of given type\r\n     * @param type Codename of type to get\r\n     */\r\n    type(type: TClientTypes['contentTypeCodenames']): this {\r\n        this.parameters.push(new Filters.TypeFilter(type));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets items of given types (logical or)\r\n     * I.e. get items of either 'Actor' or 'Movie' type\r\n     * @param types Types to get\r\n     */\r\n    types(types: TClientTypes['contentTypeCodenames'][]): this {\r\n        this.parameters.push(new Filters.TypeFilter(types));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets only item from given collection\r\n     * @param collection Codename of collection to get\r\n     */\r\n    collection(collection: TClientTypes['collectionCodenames']): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collection));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets items from given collections (logical or)\r\n     * I.e. get items of either 'default' or 'christmas-campaign' collection\r\n     * @param collections Collections to get\r\n     */\r\n    collections(collections: TClientTypes['collectionCodenames'][]): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collections));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Language codename\r\n     * @param languageCodename Codename of the language\r\n     */\r\n    languageParameter(languageCodename: TClientTypes['languageCodenames']): this {\r\n        this.parameters.push(new Parameters.LanguageParameter(languageCodename));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to limit the number of elements returned by query.\r\n     * @param elementCodenames Array of element codenames to fetch\r\n     */\r\n    elementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this {\r\n        this.parameters.push(new Parameters.ElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to exclude elements returned by query.\r\n     * @param elementCodenames Array of element codenames to exclude\r\n     */\r\n    excludeElementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this {\r\n        this.parameters.push(new Parameters.ExcludeElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListItemsFeedResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IItemsFeedContract\r\n        >\r\n    > {\r\n        return this.queryService.getItemsFeed(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/items-feed';\r\n\r\n        // add default language is necessary\r\n        this.processDefaultLanguageParameter();\r\n\r\n        //process client level archived item exclusion\r\n        this.processExcludeArchivedItemsParameter();\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: IItemFeedQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    map(json: any): Responses.IListItemsFeedResponse<TContentItem, TClientTypes['contentItemType']> {\r\n        return this.queryService.mappingService.itemsFeedResponse(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: TContentItem[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListItemsFeedResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IItemsFeedContract\r\n        >[]\r\n    ): Responses.IListItemsFeedAllResponse<TContentItem, TClientTypes['contentItemType']> {\r\n        if (this.canLinkItems()) {\r\n            this.linkFeedItems(items, responses);\r\n        }\r\n\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n\r\n    private linkFeedItems(\r\n        items: TContentItem[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListItemsFeedResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IItemsFeedContract\r\n        >[]\r\n    ): void {\r\n        // prepare all available items (including components) for linking\r\n        const allAvailableContentItems: IContentItem[] = [];\r\n\r\n        // process linked items (modular_content part of the response)\r\n        for (const response of responses) {\r\n            allAvailableContentItems.push(\r\n                ...Object.values(response.data.linkedItems)\r\n                    .filter((m) => m !== undefined)\r\n                    .map((m) => m as TClientTypes['contentItemType'])\r\n            );\r\n        }\r\n\r\n        // add standard items\r\n        for (const item of items) {\r\n            if (\r\n                !allAvailableContentItems.find(\r\n                    (m) => m.system.codename.toLowerCase() === item.system.codename.toLowerCase()\r\n                )\r\n            ) {\r\n                allAvailableContentItems.push(item);\r\n            }\r\n        }\r\n        // process main items\r\n        this.linkItemsInRte(allAvailableContentItems);\r\n    }\r\n\r\n    private canLinkItems(): boolean {\r\n        if (this.config.linkedItemsReferenceHandler === 'ignore') {\r\n            return false;\r\n        }\r\n\r\n        if (this._queryConfig.disableItemLinking === true) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { Contracts } from '../contracts';\r\nimport { IContentItemDelta } from '../models';\r\n\r\nexport class SyncMapper {\r\n    mapContentItemDelta(itemDeltaContract: Contracts.IContentItemDeltaContract): IContentItemDelta {\r\n        const systemContract = itemDeltaContract.data.system;\r\n\r\n        const elements: Contracts.IContentItemElementsContracts = itemDeltaContract.data.elements\r\n            ? itemDeltaContract.data.elements\r\n            : {};\r\n\r\n        return {\r\n            changeType: itemDeltaContract.change_type,\r\n            timestamp: itemDeltaContract.timestamp,\r\n            data: {\r\n                elements: elements,\r\n                system: {\r\n                    codename: systemContract.codename,\r\n                    collection: systemContract.collection,\r\n                    id: systemContract.id,\r\n                    language: systemContract.language,\r\n                    lastModified: systemContract.last_modified,\r\n                    name: systemContract.name,\r\n                    sitemapLocations: systemContract.sitemap_locations,\r\n                    type: systemContract.type,\r\n                    workflowStep: systemContract.workflow_step ?? null,\r\n                    workflow: systemContract.workflow ?? null\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    ClientTypes,\r\n    Filters,\r\n    IDeliveryNetworkResponse,\r\n    ILanguagesQueryConfig,\r\n    ISyncInitQueryConfig,\r\n    Parameters,\r\n    Responses\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from '../common/base-query.class';\r\n\r\nexport class InitializeSyncQuery<TClientTypes extends ClientTypes> extends BaseQuery<\r\n    TClientTypes,\r\n    Responses.IInitializeSyncResponse,\r\n    ISyncInitQueryConfig,\r\n    Contracts.IInitializeSyncContract\r\n> {\r\n    protected readonly endpoint: string = 'sync/init';\r\n\r\n    protected _queryConfig: ILanguagesQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets only item of given type\r\n     * @param type Codename of type to get\r\n     */\r\n    type(type: string): this {\r\n        this.parameters.push(new Filters.TypeFilter(type));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets only item from given collection\r\n     * @param collection Codename of collection to get\r\n     */\r\n    collection(collection: string): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collection));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Language codename\r\n     * @param languageCodename Codename of the language\r\n     */\r\n    languageParameter(languageCodename: string): this {\r\n        this.parameters.push(new Parameters.LanguageParameter(languageCodename));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<Responses.IInitializeSyncResponse, Contracts.IInitializeSyncContract>\r\n    > {\r\n        console.warn(\r\n            `Sync Api v1 is deprecated. Please use the new Sync Api v2. https://kontent.ai/learn/docs/apis/openapi/sync-api-v2/`\r\n        );\r\n        return this.queryService.initializeSync(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/' + this.endpoint;\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: ISyncInitQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    map(json: any): Responses.IInitializeSyncResponse {\r\n        return this.queryService.mappingService.initializeContentSync(json);\r\n    }\r\n}\r\n","import { Contracts } from '../contracts';\r\nimport { ITaxonomyGroup, ITaxonomySystemAttributes, ITaxonomyTerms } from '../models';\r\n\r\nexport class TaxonomyMapper<TaxonomyCodenames extends string> {\r\n    mapTaxonomy(\r\n        taxonomySystem: Contracts.ITaxonomySystemAttributesContract,\r\n        taxonomyTerms: Contracts.ITaxonomyTermsContract[]\r\n    ): ITaxonomyGroup<TaxonomyCodenames> {\r\n        if (!taxonomySystem) {\r\n            throw Error(`Cannot map taxonomy due to missing 'system' property`);\r\n        }\r\n\r\n        if (!taxonomyTerms) {\r\n            throw Error(`Cannot map taxonomy due to missing 'terms' property`);\r\n        }\r\n\r\n        if (!Array.isArray(taxonomyTerms)) {\r\n            throw Error(`Cannot map terms because no terms array was provided`);\r\n        }\r\n\r\n        const mappedSystemAttributes: ITaxonomySystemAttributes<TaxonomyCodenames> = {\r\n            name: taxonomySystem.name,\r\n            codename: taxonomySystem.codename as TaxonomyCodenames,\r\n            id: taxonomySystem.id,\r\n            lastModified: taxonomySystem.last_modified\r\n        };\r\n\r\n        const mappedTerms: ITaxonomyTerms[] = this.mapTaxonomyTerms(taxonomyTerms);\r\n\r\n        return {\r\n            system: mappedSystemAttributes,\r\n            terms: mappedTerms\r\n        };\r\n    }\r\n\r\n    mapTaxonomies(taxonomies: Contracts.ITaxonomyGroupContract[]): ITaxonomyGroup<TaxonomyCodenames>[] {\r\n        if (!taxonomies) {\r\n            throw Error(`Cannot map taxonomy due to missing 'taxonomies' property`);\r\n        }\r\n\r\n        if (!Array.isArray(taxonomies)) {\r\n            throw Error(`Cannot map taxonomies because the 'taxonomies' property is not an array `);\r\n        }\r\n\r\n        const mappedTaxonomies: ITaxonomyGroup<TaxonomyCodenames>[] = [];\r\n\r\n        taxonomies.forEach((taxonomy) => {\r\n            mappedTaxonomies.push(this.mapTaxonomy(taxonomy.system, taxonomy.terms));\r\n        });\r\n\r\n        return mappedTaxonomies;\r\n    }\r\n\r\n    /**\r\n     * Recursively map array of taxonomy terms\r\n     * @param termsArray Terms array to map\r\n     */\r\n    private mapTaxonomyTerms(termsArray: Contracts.ITaxonomyTermsContract[]): ITaxonomyTerms[] {\r\n        if (termsArray.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const mappedTermsArray: ITaxonomyTerms[] = [];\r\n\r\n        termsArray.forEach((terms) => {\r\n            const mappedTerms: ITaxonomyTerms = {\r\n                codename: terms.codename,\r\n                name: terms.name,\r\n                terms: this.mapTaxonomyTerms(terms.terms)\r\n            };\r\n\r\n            mappedTermsArray.push(mappedTerms);\r\n        });\r\n\r\n        return mappedTermsArray;\r\n    }\r\n}\r\n","import { IQueryParameter } from '@kontent-ai/core-sdk';\r\n\r\nexport namespace Filters {\r\n    const valueSeparator: string = ',';\r\n    const defaultValue: string = '';\r\n\r\n    const getParamValueForSystemFilter = (param: string | string[]): string | undefined => {\r\n        if (!param) {\r\n            return defaultValue;\r\n        }\r\n\r\n        if (Array.isArray(param)) {\r\n            let value = '';\r\n            // use [in] filter\r\n            for (let i = 0; i < param.length; i++) {\r\n                value = value + param[i].toString();\r\n\r\n                if (i !== param.length - 1) {\r\n                    // append separator if its not last item\r\n                    value = value + valueSeparator;\r\n                }\r\n            }\r\n\r\n            return value;\r\n        }\r\n\r\n        // single param was given\r\n        return param.toString();\r\n    };\r\n\r\n    export class TypeFilter implements IQueryParameter {\r\n        constructor(public type: string | string[]) {}\r\n\r\n        getParam(): string {\r\n            if (Array.isArray(this.type)) {\r\n                // multiple types\r\n                return `system.type[in]=${getParamValueForSystemFilter(this.type)}`;\r\n            }\r\n\r\n            // single type\r\n            return `system.type=${getParamValueForSystemFilter(this.type)}`;\r\n        }\r\n    }\r\n\r\n    export class CollectionFilter implements IQueryParameter {\r\n        constructor(public collection: string | string[]) {}\r\n\r\n        getParam(): string {\r\n            if (Array.isArray(this.collection)) {\r\n                // multiple collections\r\n                return `system.collection[in]=${getParamValueForSystemFilter(this.collection)}`;\r\n            }\r\n\r\n            // single collection\r\n            return `system.collection=${getParamValueForSystemFilter(this.collection)}`;\r\n        }\r\n    }\r\n\r\n    export class EmptyFilter implements IQueryParameter {\r\n        constructor(public element: string) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[empty]`;\r\n        }\r\n    }\r\n\r\n    export class NotEmptyFilter implements IQueryParameter {\r\n        constructor(public element: string) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[nempty]`;\r\n        }\r\n    }\r\n\r\n    export class EqualsFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[eq]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class NotEqualsFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[neq]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class AllFilter implements IQueryParameter {\r\n        constructor(public element: string, public values: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[all]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.values || !Array.isArray(this.values)) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.values.map((m) => m.trim()).join(',');\r\n        }\r\n    }\r\n\r\n    export class AnyFilter implements IQueryParameter {\r\n        constructor(public element: string, public values: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[any]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.values || !Array.isArray(this.values)) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.values.map((m) => m.trim()).join(',');\r\n        }\r\n    }\r\n\r\n    export class ContainsFilter implements IQueryParameter {\r\n        constructor(public element: string, public values: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[contains]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.values || !Array.isArray(this.values)) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.values.map((m) => m.trim()).join(',');\r\n        }\r\n    }\r\n\r\n    export class GreaterThanFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string | number) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[gt]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | number | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class GreaterThanOrEqualFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string | number) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[gte]=${this.getParamValue()}`;\r\n        }\r\n\r\n        getParamValue(): string | number | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class InFilter implements IQueryParameter {\r\n        constructor(public element: string, public values: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[in]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.values || !Array.isArray(this.values)) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.values\r\n                .map((m) => {\r\n                    return m.trim();\r\n                })\r\n                .join(',');\r\n        }\r\n    }\r\n\r\n    export class NotInFilter implements IQueryParameter {\r\n        constructor(public element: string, public values: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[nin]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.values || !Array.isArray(this.values)) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.values\r\n                .map((m) => {\r\n                    return m.trim();\r\n                })\r\n                .join(',');\r\n        }\r\n    }\r\n\r\n    export class LessThanFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string | number) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[lt]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | number | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class LessThanOrEqualFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string | number) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[lte]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | number | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class RangeFilter implements IQueryParameter {\r\n        constructor(public element: string, public lowerValue: number | string, public higherValue: number | string) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[range]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | number | undefined {\r\n            let lowerVal = defaultValue;\r\n            let higherVal = defaultValue;\r\n\r\n            if (this.lowerValue) {\r\n                lowerVal = this.lowerValue.toString();\r\n            }\r\n\r\n            if (this.higherValue) {\r\n                higherVal = this.higherValue.toString();\r\n            }\r\n\r\n            return `${lowerVal},${higherVal}`;\r\n        }\r\n    }\r\n}\r\n","import { IHttpService } from '@kontent-ai/core-sdk';\r\nimport { IDeliveryClientConfig } from '../config';\r\nimport { Contracts } from '../contracts';\r\nimport {\r\n    Responses,\r\n    IContentItem,\r\n    IContentTypeQueryConfig,\r\n    IGroupedNetworkResponse,\r\n    IItemQueryConfig,\r\n    IDeliveryNetworkResponse,\r\n    ILanguagesQueryConfig,\r\n    ITaxonomyQueryConfig,\r\n    ISyncInitQueryConfig,\r\n    ClientTypes\r\n} from '../models';\r\nimport {\r\n    IKontentListAllResponse,\r\n    IKontentListResponse,\r\n    IListAllQueryConfig,\r\n    ISDKInfo\r\n} from '../models/common/common-models';\r\nimport { BaseDeliveryQueryService } from './base-delivery-query.service';\r\nimport { IMappingService } from './mapping.service';\r\n\r\nexport class QueryService<TClientTypes extends ClientTypes> extends BaseDeliveryQueryService<TClientTypes> {\r\n    constructor(\r\n        config: IDeliveryClientConfig,\r\n        httpService: IHttpService<any>,\r\n        sdkInfo: ISDKInfo,\r\n        mappingService: IMappingService<TClientTypes>\r\n    ) {\r\n        super(config, httpService, sdkInfo, mappingService);\r\n    }\r\n\r\n    /**\r\n     * Gets single item from given url\r\n     * @param url Url used to get single item\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getSingleItemAsync<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        url: string,\r\n        queryConfig: IItemQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IViewContentItemResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IViewContentItemContract\r\n        >\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IViewContentItemContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse<\r\n            Responses.IViewContentItemResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IViewContentItemContract\r\n        >(this.mappingService.viewContentItemResponse<TContentItem>(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets single feed response. Might not contain all items in your environment.\r\n     * @param url Url\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getItemsFeed<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        url: string,\r\n        queryConfig: IItemQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListItemsFeedResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IItemsFeedContract\r\n        >\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IItemsFeedContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.itemsFeedResponse<TContentItem>(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets single used in response. Might not contain all used in references.\r\n     * @param url Url\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getUsedIn(\r\n        url: string,\r\n        queryConfig: IItemQueryConfig\r\n    ): Promise<IDeliveryNetworkResponse<Responses.IUsedInResponse<TClientTypes>, Contracts.IUsedInItemsContract>> {\r\n        const response = await this.getResponseAsync<Contracts.IUsedInItemsContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.usedInResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets multiple items from given url\r\n     * @param url Url used to get multiple items\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getMultipleItems<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        url: string,\r\n        queryConfig: IItemQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListContentItemsResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IListContentItemsContract\r\n        >\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IListContentItemsContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.listContentItemsResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets single content type from given url\r\n     * @param url Url used to get single type\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getSingleType(\r\n        url: string,\r\n        queryConfig: IContentTypeQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IViewContentTypeResponse<TClientTypes['contentTypeCodenames']>,\r\n            Contracts.IViewContentTypeContract\r\n        >\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IViewContentTypeContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.viewContentTypeResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets multiple content types from given url\r\n     * @param url Url used to get multiple types\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getMultipleTypes(\r\n        url: string,\r\n        queryConfig: IContentTypeQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']>,\r\n            Contracts.IListContentTypeContract\r\n        >\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IListContentTypeContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.listContentTypesResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Initializes synchronization of changes in content items based on the specified parameters. After the initialization,\r\n     * you'll get an X-Continuation token in the response.\r\n     * Use the token to synchronize changes in the content items matching the initialization criteria.\r\n     * @param url Url\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async initializeSync(\r\n        url: string,\r\n        queryConfig: ISyncInitQueryConfig\r\n    ): Promise<IDeliveryNetworkResponse<Responses.IInitializeSyncResponse, Contracts.IInitializeSyncContract>> {\r\n        const response = await this.postResponseAsync<Contracts.IInitializeSyncContract>(url, {}, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.initializeContentSync(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Retrieve a list of delta updates to recently changed content items in the specified environment.\r\n     * The types of items you get is determined by the X-Continuation token you use.\r\n     * @param url Url used to get multiple types\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async syncChanges(\r\n        url: string,\r\n        queryConfig: IContentTypeQueryConfig\r\n    ): Promise<IDeliveryNetworkResponse<Responses.ISyncChangesResponse, Contracts.ISyncChangesContract>> {\r\n        const response = await this.getResponseAsync<Contracts.ISyncChangesContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.syncChanges(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets languages\r\n     * @param url Url\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getLanguages(\r\n        url: string,\r\n        queryConfig: ILanguagesQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListLanguagesResponse<TClientTypes['languageCodenames']>,\r\n            Contracts.IListLanguagesContract\r\n        >\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IListLanguagesContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.listLanguagesResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets single taxonomy from given url\r\n     * @param url Url used to get single taxonomy\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getTaxonomy(\r\n        url: string,\r\n        queryConfig: ITaxonomyQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IViewTaxonomyResponse<TClientTypes['taxonomyCodenames']>,\r\n            Contracts.IViewTaxonomyGroupContract\r\n        >\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IViewTaxonomyGroupContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.viewTaxonomyResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets multiple taxonomies from given url\r\n     * @param url Url used to get multiple taxonomies\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getTaxonomies(\r\n        url: string,\r\n        queryConfig: ITaxonomyQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListTaxonomiesResponse<TClientTypes['taxonomyCodenames']>,\r\n            Contracts.IListTaxonomyGroupsContract\r\n        >\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IListTaxonomyGroupsContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.listTaxonomiesResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets single content type element from given url\r\n     * @param url Url used to get single content type element\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getElementAsync(\r\n        url: string,\r\n        queryConfig: ITaxonomyQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<Responses.IViewContentTypeElementResponse, Contracts.IViewContentTypeElementContract>\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IViewContentTypeElementContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.viewContentTypeElementResponse(response.data), response);\r\n    }\r\n\r\n    async getListAllResponse<\r\n        TResponse extends IKontentListResponse,\r\n        TAllResponse extends IKontentListAllResponse,\r\n        TContract\r\n    >(data: {\r\n        page: number;\r\n        getResponse: (\r\n            nextPageUrl?: string,\r\n            continuationToken?: string\r\n        ) => Promise<IDeliveryNetworkResponse<TResponse, TContract>>;\r\n        allResponseFactory: (\r\n            items: any[],\r\n            responses: IDeliveryNetworkResponse<TResponse, TContract>[]\r\n        ) => IGroupedNetworkResponse<TAllResponse>;\r\n        listQueryConfig?: IListAllQueryConfig<TResponse, TContract>;\r\n    }): Promise<IGroupedNetworkResponse<TAllResponse>> {\r\n        const responses = await this.getListAllResponseInternalAsync({\r\n            page: data.page,\r\n            resolvedResponses: [],\r\n            getResponse: data.getResponse,\r\n            nextPageUrl: undefined,\r\n            continuationToken: undefined,\r\n            listQueryConfig: data.listQueryConfig\r\n        });\r\n\r\n        return data.allResponseFactory(\r\n            responses.reduce((prev: any[], current) => {\r\n                prev.push(...current.data.items);\r\n                return prev;\r\n            }, []),\r\n            responses\r\n        );\r\n    }\r\n\r\n    private async getListAllResponseInternalAsync<TResponse extends IKontentListResponse, TContract>(data: {\r\n        page: number;\r\n        nextPageUrl?: string;\r\n        continuationToken?: string;\r\n        getResponse: (\r\n            nextPageUrl?: string,\r\n            continuationToken?: string\r\n        ) => Promise<IDeliveryNetworkResponse<TResponse, TContract>>;\r\n        resolvedResponses: IDeliveryNetworkResponse<TResponse, TContract>[];\r\n        listQueryConfig?: IListAllQueryConfig<TResponse, TContract>;\r\n    }): Promise<IDeliveryNetworkResponse<TResponse, TContract>[]> {\r\n        if (data.listQueryConfig?.pages) {\r\n            if (data.page > data.listQueryConfig.pages) {\r\n                // page limit reached, return result\r\n                return data.resolvedResponses;\r\n            }\r\n        }\r\n\r\n        const response = await data.getResponse(data.nextPageUrl, data.continuationToken);\r\n\r\n        if (data.listQueryConfig?.delayBetweenRequests) {\r\n            await this.sleep(data.listQueryConfig.delayBetweenRequests);\r\n        }\r\n\r\n        data.resolvedResponses.push(response);\r\n\r\n        if (data.listQueryConfig?.responseFetched) {\r\n            data.listQueryConfig.responseFetched(response, data.nextPageUrl, data.continuationToken);\r\n        }\r\n\r\n        const nextPage = response.data.pagination?.nextPage;\r\n        const continuationToken = response.xContinuationToken;\r\n\r\n        if (nextPage || continuationToken) {\r\n            // recursively fetch next page data\r\n            return await this.getListAllResponseInternalAsync({\r\n                page: data.page + 1,\r\n                nextPageUrl: nextPage,\r\n                continuationToken: continuationToken,\r\n                listQueryConfig: data.listQueryConfig,\r\n                getResponse: data.getResponse,\r\n                resolvedResponses: data.resolvedResponses\r\n            });\r\n        }\r\n\r\n        return data.resolvedResponses;\r\n    }\r\n\r\n    private sleep(ms: number): Promise<void> {\r\n        return new Promise((resolve) => setTimeout(resolve, ms));\r\n    }\r\n}\r\n","export class DeliveryUrlHelper {\r\n    replaceAssetDomain(originalAssetUrl: string, customDomain: string): string {\r\n        return `${customDomain}${this.getPathname(originalAssetUrl)}`;\r\n    }\r\n\r\n    getPathname(url: string): string {\r\n        return new URL(url).pathname;\r\n    }\r\n}\r\n\r\nexport const deliveryUrlHelper = new DeliveryUrlHelper();\r\n","import { codenameHelper } from '../utilities';\r\nimport { IDeliveryClientConfig } from '../config';\r\nimport { Contracts } from '../contracts';\r\nimport {\r\n    IContentItem,\r\n    IContentItemsContainer,\r\n    IContentItemWithRawDataContainer,\r\n    IContentItemWithRawElements\r\n} from '../models';\r\nimport { ElementMapper } from './element.mapper';\r\n\r\nexport interface IMapItemResult<\r\n    TContentItem extends IContentItem = IContentItem,\r\n    TLinkedItemType extends IContentItem = IContentItem\r\n> {\r\n    item: TContentItem;\r\n    processedItems: IContentItemsContainer<TLinkedItemType>;\r\n    preparedItems: IContentItemWithRawDataContainer;\r\n    processingStartedForCodenames: string[];\r\n}\r\n\r\nexport interface IMultipleItemsMapResult<\r\n    TContentItem extends IContentItem = IContentItem,\r\n    TLinkedItemType extends IContentItem = IContentItem\r\n> {\r\n    items: TContentItem[];\r\n    linkedItems: IContentItemsContainer<TLinkedItemType>;\r\n}\r\n\r\nexport interface ISingleItemMapResult<\r\n    TContentItem extends IContentItem = IContentItem,\r\n    TLinkedItemType extends IContentItem = IContentItem\r\n> {\r\n    item: TContentItem;\r\n    linkedItems: IContentItemsContainer<TLinkedItemType>;\r\n}\r\n\r\nexport class ItemMapper<TContentItemType extends IContentItem> {\r\n    private readonly elementMapper: ElementMapper<TContentItemType>;\r\n\r\n    constructor(readonly config: IDeliveryClientConfig) {\r\n        this.elementMapper = new ElementMapper(config);\r\n    }\r\n\r\n    /**\r\n     * Maps single item to its proper strongly typed model from the given response\r\n     * @param response Response used to map the item\r\n     * @param queryConfig Query configuration\r\n     */\r\n    mapSingleItemFromResponse<TContentItem extends TContentItemType = TContentItemType>(\r\n        response: Contracts.IViewContentItemContract\r\n    ): ISingleItemMapResult<TContentItem, TContentItemType> {\r\n        const mapResult = this.mapItems<TContentItem>({\r\n            mainItems: [response.item],\r\n            linkedItems: Object.values(response.modular_content)\r\n        });\r\n\r\n        return {\r\n            item: mapResult.items[0],\r\n            linkedItems: mapResult.linkedItems\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Maps multiple items to their strongly typed model from the given  response\r\n     * @param response Response used to map the item\r\n     * @param queryConfig Query configuration\r\n     */\r\n    mapMultipleItemsFromResponse<TContentItem extends TContentItemType = TContentItemType>(\r\n        response: Contracts.IItemsWithModularContentContract\r\n    ): IMultipleItemsMapResult<TContentItem, TContentItemType> {\r\n        const mapResult = this.mapItems<TContentItem>({\r\n            mainItems: response.items,\r\n            linkedItems: Object.values(response.modular_content)\r\n        });\r\n\r\n        return mapResult;\r\n    }\r\n\r\n    /**\r\n     * Maps item contracts to full models\r\n     */\r\n    mapItems<TContentItem extends TContentItemType = TContentItemType>(data: {\r\n        mainItems: Contracts.IContentItemContract[];\r\n        linkedItems: Contracts.IContentItemContract[];\r\n    }): IMultipleItemsMapResult<TContentItem, TContentItemType> {\r\n        const processedItems: IContentItemsContainer<TContentItem> = {};\r\n        const preparedItems: IContentItemWithRawDataContainer = {};\r\n        const processingStartedForCodenames: string[] = [];\r\n        const mappedMainItems: TContentItem[] = [];\r\n        const mappedLinkedItems: IContentItemsContainer<TContentItem> = {};\r\n        const itemsToResolve: Contracts.IContentItemContract[] = [...data.mainItems, ...data.linkedItems];\r\n\r\n        // first prepare reference for all items\r\n        for (const item of itemsToResolve) {\r\n            preparedItems[codenameHelper.escapeCodenameInCodenameIndexer(item.system.codename)] = {\r\n                item: this.createContentItem(item),\r\n                rawItem: item\r\n            };\r\n        }\r\n\r\n        // then resolve main items\r\n        for (const item of data.mainItems) {\r\n            const itemResult = this.mapItem<TContentItem>({\r\n                item: preparedItems[codenameHelper.escapeCodenameInCodenameIndexer(item.system.codename)],\r\n                processedItems: processedItems,\r\n                preparedItems: preparedItems,\r\n                processingStartedForCodenames: processingStartedForCodenames\r\n            });\r\n            mappedMainItems.push(itemResult.item);\r\n        }\r\n\r\n        // and linked items\r\n        for (const item of data.linkedItems) {\r\n            const itemResult = this.mapItem<TContentItem>({\r\n                item: preparedItems[codenameHelper.escapeCodenameInCodenameIndexer(item.system.codename)],\r\n                processedItems: processedItems,\r\n                preparedItems: preparedItems,\r\n                processingStartedForCodenames: processingStartedForCodenames\r\n            });\r\n\r\n            mappedLinkedItems[item.system.codename] = itemResult.item;\r\n        }\r\n\r\n        return {\r\n            items: mappedMainItems,\r\n            linkedItems: mappedLinkedItems\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Maps item contract to full model\r\n     */\r\n    private mapItem<TContentItem extends TContentItemType = TContentItemType>(data: {\r\n        item: IContentItemWithRawElements;\r\n        processedItems: IContentItemsContainer<TContentItem>;\r\n        processingStartedForCodenames: string[];\r\n        preparedItems: IContentItemWithRawDataContainer;\r\n    }): IMapItemResult<TContentItem, TContentItemType> {\r\n        if (!data.item) {\r\n            throw Error(`Could not map item because its undefined`);\r\n        }\r\n\r\n        const result = this.elementMapper.mapElements<TContentItem>({\r\n            dataToMap: data.item,\r\n            preparedItems: data.preparedItems,\r\n            processingStartedForCodenames: [],\r\n            processedItems: data.processedItems\r\n        });\r\n\r\n        if (!result) {\r\n            throw Error(`Mapping of content item '${data.item.item.system.codename}' failed`);\r\n        }\r\n        return {\r\n            item: result.item,\r\n            processedItems: result.processedItems,\r\n            preparedItems: result.preparedItems,\r\n            processingStartedForCodenames: result.processingStartedForCodenames\r\n        };\r\n    }\r\n\r\n    private createContentItem(item: Contracts.IContentItemContract): IContentItem {\r\n        const contentItem: IContentItem = {\r\n            elements: {},\r\n            system: {\r\n                codename: item.system.codename,\r\n                collection: item.system.collection,\r\n                id: item.system.id,\r\n                language: item.system.language,\r\n                lastModified: item.system.last_modified,\r\n                name: item.system.name,\r\n                sitemapLocations: item.system.sitemap_locations,\r\n                type: item.system.type,\r\n                workflowStep: item.system.workflow_step ?? null,\r\n                workflow: item.system.workflow ?? null\r\n            }\r\n        };\r\n\r\n        return contentItem;\r\n    }\r\n}\r\n","import { IQueryParameter } from '@kontent-ai/core-sdk';\r\n\r\nimport { SortOrder } from './sort-order';\r\n\r\nexport namespace Parameters {\r\n    const defaultValue: string = '';\r\n\r\n    export class QueryParameter implements IQueryParameter {\r\n        /**\r\n         * Parameter\r\n         * @constructor\r\n         * @param {string} name - Name of the parameter\r\n         * @param {string} value - Value of the parameter\r\n         */\r\n        constructor(public name: string, public value: string) {\r\n            if (!name) {\r\n                throw Error(`Name of the parameter is not specified`);\r\n            }\r\n        }\r\n\r\n        getParam(): string {\r\n            return `${this.name}=${this.value}`;\r\n        }\r\n    }\r\n\r\n    export class ElementsParameter implements IQueryParameter {\r\n        /**\r\n         * Sets elements (projection) so that only certain elements from a content item are returned\r\n         * @constructor\r\n         * @param {string[]} elementCodenames - Array of element codenames to include in response.\r\n         */\r\n        constructor(public elementCodenames: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `elements=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.elementCodenames) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.elementCodenames\r\n                .map((m) => {\r\n                    if (!m) {\r\n                        throw Error(`Codename of 'ElementsParameter' cannot be null or empty`);\r\n                    }\r\n                    return m.trim();\r\n                })\r\n                .join(',');\r\n        }\r\n    }\r\n\r\n    export class ExcludeElementsParameter implements IQueryParameter {\r\n        /**\r\n         * Sets elements (projection) so that only certain elements are excluded from API response\r\n         * @constructor\r\n         * @param {string[]} elementCodenames - Array of element codenames to exclude from API response.\r\n         */\r\n        constructor(public elementCodenames: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `excludeElements=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.elementCodenames) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.elementCodenames\r\n                .map((m) => {\r\n                    if (!m) {\r\n                        throw Error(`Codename of 'ExcludeElementsParameter' cannot be null or empty`);\r\n                    }\r\n                    return m.trim();\r\n                })\r\n                .join(',');\r\n        }\r\n    }\r\n\r\n    export class LimitParameter implements IQueryParameter {\r\n        /**\r\n         * Limits the number of items that are returned from response\r\n         * @constructor\r\n         * @param {number} limit - Number of elements that will be returned\r\n         */\r\n        constructor(public limit: number) {\r\n            if (limit <= 0) {\r\n                throw Error(`'LimitParameter' must specify a positive integer`);\r\n            }\r\n        }\r\n\r\n        getParam(): string {\r\n            return `limit=${this.limit}`;\r\n        }\r\n    }\r\n\r\n    export class IncludeTotalCountParameter implements IQueryParameter {\r\n        /**\r\n         * Adds 'includeTotalCount' query parameter to query\r\n         * @constructor\r\n         */\r\n        constructor() {}\r\n\r\n        getParam(): string {\r\n            return `includeTotalCount=true`;\r\n        }\r\n    }\r\n\r\n    export class SkipParameter implements IQueryParameter {\r\n        /**\r\n         * Configures response to skip certain number of items\r\n         * @constructor\r\n         * @param {number} skip - Number of content items that will be skipped\r\n         */\r\n        constructor(public skip: number) {\r\n            if (skip < 0) {\r\n                throw Error(`'SkipParameter' must specify a positive integer number or zero.\"`);\r\n            }\r\n        }\r\n\r\n        getParam(): string {\r\n            return `skip=${this.skip}`;\r\n        }\r\n    }\r\n\r\n    export class OrderParameter implements IQueryParameter {\r\n        /**\r\n         * Sorts the response based on given element.\r\n         * @constructor\r\n         * @param {string} element - Element that will be used for sorting (can be both elements.<elementname> or system.<elementname>)\r\n         * @param {SortOrder} sortOrder - Order type (desc/asc). Defaults to 'asc' if SortOrder is null or invalid.\r\n         */\r\n        constructor(public element: string, public sortOrder: SortOrder) {\r\n            if (!element) {\r\n                throw Error(`Element specified in 'OrderParameter' is null or empty`);\r\n            }\r\n        }\r\n\r\n        getParam(): string {\r\n            return `order=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            return `${this.element.trim()}[${this.sortOrder}]`;\r\n        }\r\n    }\r\n\r\n    export class CustomParameter implements IQueryParameter {\r\n        constructor(public param: string) {}\r\n\r\n        getParam(): string {\r\n            return this.param;\r\n        }\r\n    }\r\n\r\n    export class DepthParameter implements IQueryParameter {\r\n        /**\r\n         * Configures the depth of the response. Content items might reference another 'linked items' using the Linked items element.\r\n         * Recursively, these linked items can reference another linked items.\r\n         * By default, only one level of linked content is returned.\r\n         * @constructor\r\n         * @param {number} depth - Depth fo the response\r\n         */\r\n        constructor(public depth: number) {\r\n            if (depth < 0) {\r\n                throw Error(`'DepthParameter' must specify a positive integer or zero`);\r\n            }\r\n        }\r\n\r\n        getParam(): string {\r\n            return `depth=${this.depth}`;\r\n        }\r\n    }\r\n\r\n    export class LanguageParameter implements IQueryParameter {\r\n        /**\r\n         * Specifies language version to fetch\r\n         * @constructor\r\n         * @param {string} languageCodename - Codename of the language\r\n         */\r\n        constructor(public languageCodename: string) {}\r\n\r\n        getParam(): string {\r\n            return `language=${this.languageCodename}`;\r\n        }\r\n    }\r\n}\r\n","import { HttpService } from '@kontent-ai/core-sdk';\r\nimport { IDeliveryClientConfig } from '../config';\r\nimport { ClientTypes, IContentItem } from '../models';\r\nimport {\r\n    ElementQuery,\r\n    ItemsFeedQuery,\r\n    MultipleItemsQuery,\r\n    MultipleTypeQuery,\r\n    SingleItemQuery,\r\n    SingleTypeQuery,\r\n    TaxonomiesQuery,\r\n    TaxonomyQuery,\r\n    LanguagesQuery,\r\n    InitializeSyncQuery,\r\n    SyncChangesQuery,\r\n    UsedInQuery\r\n} from '../query';\r\nimport { sdkInfo } from '../sdk-info.generated';\r\nimport { IMappingService, MappingService, QueryService } from '../services';\r\nimport { IDeliveryClient } from './idelivery-client.interface';\r\n\r\nexport class DeliveryClient<TClientTypes extends ClientTypes = ClientTypes> implements IDeliveryClient {\r\n    private queryService: QueryService<TClientTypes>;\r\n    public mappingService: IMappingService<TClientTypes>;\r\n\r\n    /**\r\n     * Delivery client used to fetch data from Kontent.ai\r\n     * @constructor\r\n     * @param {IDeliveryClientConfig} config - The client configuration\r\n     */\r\n    constructor(protected config: IDeliveryClientConfig) {\r\n        if (!config) {\r\n            throw Error(`Delivery client configuration is not set`);\r\n        }\r\n\r\n        this.mappingService = new MappingService(config);\r\n        this.queryService = new QueryService(\r\n            config,\r\n            config.httpService ? config.httpService : new HttpService(),\r\n            {\r\n                host: sdkInfo.host,\r\n                name: sdkInfo.name,\r\n                version: sdkInfo.version\r\n            },\r\n            this.mappingService\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets query for multiple languages\r\n     */\r\n    languages(): LanguagesQuery<TClientTypes> {\r\n        return new LanguagesQuery(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets query for multiple types\r\n     */\r\n    types(): MultipleTypeQuery<TClientTypes> {\r\n        return new MultipleTypeQuery(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets query for single type\r\n     * @param {string} typeCodename - Codename of the type to fetch\r\n     */\r\n    type(typeCodename: TClientTypes['contentTypeCodenames']): SingleTypeQuery<TClientTypes> {\r\n        return new SingleTypeQuery(this.config, this.queryService, typeCodename);\r\n    }\r\n\r\n    /**\r\n     * Gets query for multiple items\r\n     */\r\n    items<TContentItem extends IContentItem = TClientTypes['contentItemType']>(): MultipleItemsQuery<\r\n        TClientTypes,\r\n        TContentItem\r\n    > {\r\n        return new MultipleItemsQuery<TClientTypes, TContentItem>(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets query for single item\r\n     * @param {string} codename - Codename of item to fetch\r\n     */\r\n    item<TContentItem extends IContentItem = TClientTypes['contentItemType']>(\r\n        codename: string\r\n    ): SingleItemQuery<TClientTypes, TContentItem> {\r\n        return new SingleItemQuery<TClientTypes, TContentItem>(this.config, this.queryService, codename);\r\n    }\r\n\r\n    /**\r\n     * Gets query for items feed. Executes single HTTP request only\r\n     */\r\n    itemsFeed<TContentItem extends IContentItem = TClientTypes['contentItemType']>(): ItemsFeedQuery<\r\n        TClientTypes,\r\n        TContentItem\r\n    > {\r\n        return new ItemsFeedQuery<TClientTypes, TContentItem>(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets query for single taxonomy\r\n     * @param {string} codename - Codename of taxonomy to fetch\r\n     */\r\n    taxonomy(codename: TClientTypes['taxonomyCodenames']): TaxonomyQuery<TClientTypes> {\r\n        return new TaxonomyQuery(this.config, this.queryService, codename);\r\n    }\r\n\r\n    /**\r\n     * Gets query for multiple taxonomies\r\n     */\r\n    taxonomies(): TaxonomiesQuery<TClientTypes> {\r\n        return new TaxonomiesQuery<TClientTypes>(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets query for an element within a type\r\n     * @param {string} typeCodename - Codename of the type\r\n     * @param {string} elementCodename - Codename of the element\r\n     */\r\n    element(\r\n        typeCodename: TClientTypes['contentTypeCodenames'],\r\n        elementCodename: TClientTypes['elementCodenames']\r\n    ): ElementQuery<TClientTypes> {\r\n        return new ElementQuery(this.config, this.queryService, typeCodename, elementCodename);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Sync API v1 is deprecated and will be shut down by the end of this year.\r\n     * Please migrate to Sync API v2 using the `@kontent-ai/sync-sdk` package.\r\n     *\r\n     * For migration guidance and full documentation, visit:\r\n     * https://kontent.ai/learn/docs/apis/openapi/sync-api-v2/\r\n     */\r\n    initializeSync(): InitializeSyncQuery<TClientTypes> {\r\n        return new InitializeSyncQuery(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Sync API v1 is deprecated and will be shut down by the end of this year.\r\n     * Please migrate to Sync API v2 using the `@kontent-ai/sync-sdk` package.\r\n     *\r\n     * For migration guidance and full documentation, visit:\r\n     * https://kontent.ai/learn/docs/apis/openapi/sync-api-v2/\r\n     */\r\n    syncChanges(): SyncChangesQuery<TClientTypes> {\r\n        return new SyncChangesQuery(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Item listing of where an asset is used\r\n     */\r\n    assetUsedIn(assetCodename: string): UsedInQuery<TClientTypes> {\r\n        return new UsedInQuery(this.config, this.queryService, { entity: 'asset', codename: assetCodename });\r\n    }\r\n\r\n    /**\r\n     * Item listing of where a content item is used\r\n     */\r\n    itemUsedIn(itemCodename: string): UsedInQuery<TClientTypes> {\r\n        return new UsedInQuery(this.config, this.queryService, { entity: 'contentItem', codename: itemCodename });\r\n    }\r\n}\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport { ClientTypes, IDeliveryNetworkResponse, ITaxonomyQueryConfig, Responses } from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from '../common/base-query.class';\r\n\r\nexport class TaxonomyQuery<TClientTypes extends ClientTypes> extends BaseQuery<\r\n    TClientTypes,\r\n    Responses.IViewTaxonomyResponse<TClientTypes['taxonomyCodenames']>,\r\n    ITaxonomyQueryConfig,\r\n    Contracts.IViewTaxonomyGroupContract\r\n> {\r\n    /**\r\n     * Taxonomies endpoint URL action\r\n     */\r\n    protected readonly taxonomiesEndpoint: string = 'taxonomies';\r\n\r\n    protected _queryConfig: ITaxonomyQueryConfig = {};\r\n\r\n    constructor(\r\n        protected config: IDeliveryClientConfig,\r\n        protected queryService: QueryService<TClientTypes>,\r\n        private taxonomyCodename: string\r\n    ) {\r\n        super(config, queryService);\r\n\r\n        if (!taxonomyCodename) {\r\n            throw Error(`Cannot create taxonomy query without codename of the taxonomy`);\r\n        }\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IViewTaxonomyResponse<TClientTypes['taxonomyCodenames']>,\r\n            Contracts.IViewTaxonomyGroupContract\r\n        >\r\n    > {\r\n        return this.queryService.getTaxonomy(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/' + this.taxonomiesEndpoint + '/' + this.taxonomyCodename;\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IViewTaxonomyResponse<TClientTypes['taxonomyCodenames']> {\r\n        return this.queryService.mappingService.viewTaxonomyResponse(json);\r\n    }\r\n}\r\n","export * from './codename.helper';\r\nexport * from './delivery-url.helper';\r\nexport * from './enum.helper';\r\n","export * from './contracts';\r\n","import { ElementType, Elements } from '../../elements';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    ClientTypes,\r\n    Filters,\r\n    IContentItem,\r\n    IKontentListAllResponse,\r\n    IKontentListResponse,\r\n    IQueryConfig,\r\n    Parameters,\r\n    SortOrder\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseListingQuery } from './base-listing-query.class';\r\n\r\nexport abstract class BaseItemListingQuery<\r\n    TClientTypes extends ClientTypes,\r\n    TResponse extends IKontentListResponse,\r\n    TAllResponse extends IKontentListAllResponse,\r\n    TQueryConfig extends IQueryConfig,\r\n    TContract\r\n> extends BaseListingQuery<TClientTypes, IContentItem, TResponse, TAllResponse, TQueryConfig, TContract> {\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Empty filter condition\r\n     * @param element Element with empty value\r\n     */\r\n    emptyFilter(element: string): this {\r\n        this.parameters.push(new Filters.EmptyFilter(element));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not empty filter condition\r\n     * @param element Element with non-empty value\r\n     */\r\n    notEmptyFilter(element: string): this {\r\n        this.parameters.push(new Filters.NotEmptyFilter(element));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Equals filter condition\r\n     * @param element Element to filter. Example: 'elements.movie'\r\n     * @param value Value to match. Example: 'Kingsman'\r\n     */\r\n    equalsFilter(element: string, value: string): this {\r\n        this.parameters.push(new Filters.EqualsFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not equals filter condition\r\n     * @param element Element to filter. Example: 'elements.movie'\r\n     * @param value Value to match. Example: 'Kingsman'\r\n     */\r\n    notEqualsFilter(element: string, value: string): this {\r\n        this.parameters.push(new Filters.NotEqualsFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * All filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    allFilter(element: string, values: string[]): this {\r\n        this.parameters.push(new Filters.AllFilter(element, values));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Any filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    anyFilter(element: string, values: string[]): this {\r\n        this.parameters.push(new Filters.AnyFilter(element, values));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Contains filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    containsFilter(element: string, values: string[]): this {\r\n        this.parameters.push(new Filters.ContainsFilter(element, values));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Greater then filter\r\n     * @param element Element to filter.\r\n     * @param value Value\r\n     */\r\n    greaterThanFilter(element: string, value: string | number): this {\r\n        this.parameters.push(new Filters.GreaterThanFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Greater then or equals filter\r\n     * @param element Element to filter.\r\n     * @param value Value\r\n     */\r\n    greaterThanOrEqualFilter(element: string, value: string | number): this {\r\n        this.parameters.push(new Filters.GreaterThanOrEqualFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * In filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    inFilter(element: string, values: string[]): this {\r\n        this.parameters.push(new Filters.InFilter(element, values));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not in filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    notInFilter(element: string, values: string[]): this {\r\n        this.parameters.push(new Filters.NotInFilter(element, values));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Less then filter\r\n     * @param element Element to filter.\r\n     * @param value Value\r\n     */\r\n    lessThanFilter(element: string, value: string | number): this {\r\n        this.parameters.push(new Filters.LessThanFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param element Element to filter.\r\n     * @param value Value\r\n     */\r\n    lessThanOrEqualFilter(element: string, value: string | number): this {\r\n        this.parameters.push(new Filters.LessThanOrEqualFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param element Element to filter.\r\n     * @param lowerValue Lower value of range (e.g. 2)\r\n     * @param higherValue Higher value of range (e.g. 10)\r\n     */\r\n    rangeFilter(element: string, lowerValue: number | string, higherValue: number | string): this {\r\n        this.parameters.push(new Filters.RangeFilter(element, lowerValue, higherValue));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Limits the number of items returned by query\r\n     * @param limit Number of items to load\r\n     */\r\n    limitParameter(limit: number): this {\r\n        this.parameters.push(new Parameters.LimitParameter(limit));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Orders query based on given element and sort order\r\n     * @param element Element by which to order\r\n     * @param sortOrder Asc/Desc order type\r\n     */\r\n    orderParameter(element: string, sortOrder: SortOrder): this {\r\n        this.parameters.push(new Parameters.OrderParameter(element, sortOrder));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets descending order on given element\r\n     * @param element Element by which to order\r\n     */\r\n    orderByDescending(element: string): this {\r\n        this.parameters.push(new Parameters.OrderParameter(element, 'desc'));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets Ascending order on given element\r\n     * @param element Element by which to order\r\n     */\r\n    orderByAscending(element: string): this {\r\n        this.parameters.push(new Parameters.OrderParameter(element, 'asc'));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Skips the selected number of items\r\n     * @param skip Number of items to skip\r\n     */\r\n    skipParameter(skip: number): this {\r\n        this.parameters.push(new Parameters.SkipParameter(skip));\r\n        return this;\r\n    }\r\n\r\n    protected linkItemsInRte(allContentItems: IContentItem[]): void {\r\n        for (const item of allContentItems) {\r\n            for (const elementKey of Object.keys(item.elements)) {\r\n                const element = item.elements[elementKey];\r\n\r\n                if (element.type === ElementType.ModularContent) {\r\n                    const linkedItemElement = element as Elements.LinkedItemsElement;\r\n\r\n                    // We create separate array for ordered items because the 'linkedItems' from response might be incomplete\r\n                    // e.g. If 4 items are linked, only 2 might be available in the response. Rest needs to be mapped from all available items\r\n                    const orderedLinkedItems: IContentItem[] = [];\r\n\r\n                    for (const linkedItemCodename of linkedItemElement.value) {\r\n                        let linkedItem: IContentItem | undefined;\r\n\r\n                        const linkedItemInElement = linkedItemElement.linkedItems.find(\r\n                            (m) => m.system.codename.toLowerCase() === linkedItemCodename.toLowerCase()\r\n                        );\r\n                        if (linkedItemInElement) {\r\n                            linkedItem = linkedItemInElement;\r\n                        } else {\r\n                            linkedItem = allContentItems.find(\r\n                                (m) => m.system.codename.toLowerCase() === linkedItemCodename.toLowerCase()\r\n                            );\r\n                        }\r\n\r\n                        if (linkedItem) {\r\n                            orderedLinkedItems.push(linkedItem);\r\n                        }\r\n                    }\r\n\r\n                    // Replace linked items with the ordered one\r\n                    linkedItemElement.linkedItems = orderedLinkedItems;\r\n                }\r\n\r\n                if (element.type === ElementType.RichText) {\r\n                    const orderedLinkedItems: IContentItem[] = [];\r\n\r\n                    const richTextElement = element as Elements.RichTextElement;\r\n\r\n                    for (const linkedItemCodename of richTextElement.linkedItemCodenames) {\r\n                        let linkedItem: IContentItem | undefined;\r\n\r\n                        const linkedItemInElement = richTextElement.linkedItems.find(\r\n                            (m) => m.system.codename.toLowerCase() === linkedItemCodename.toLowerCase()\r\n                        );\r\n                        if (linkedItemInElement) {\r\n                            linkedItem = linkedItemInElement;\r\n                        } else {\r\n                            linkedItem = allContentItems.find(\r\n                                (m) => m.system.codename.toLowerCase() === linkedItemCodename.toLowerCase()\r\n                            );\r\n                        }\r\n\r\n                        if (linkedItem) {\r\n                            orderedLinkedItems.push(linkedItem);\r\n                        }\r\n                    }\r\n\r\n                    richTextElement.linkedItems = orderedLinkedItems;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Contracts } from '../contracts';\r\nimport { IGenericElement } from '../models';\r\n\r\nexport class GenericElementMapper {\r\n    mapElement(response: Contracts.IViewContentTypeElementContract): IGenericElement {\r\n        if (!response) {\r\n            throw Error(`Invalid response for mapping element`);\r\n        }\r\n\r\n        const element = response;\r\n\r\n        return {\r\n            codename: element.codename,\r\n            name: element.name,\r\n            type: element.type,\r\n            options: element.options ? element.options : [],\r\n            taxonomyGroup: element.taxonomy_group\r\n        };\r\n    }\r\n}\r\n","export * from './delivery-client';\r\nexport * from './idelivery-client.interface';\r\nexport * from './delivery-client.factory';\r\n","export class UrlHelper {\n    /**\n   * Adds query parameters to given url\n   * @param url Url to which options will be added\n   * @param options Query parameters to add\n   */\n    addOptionsToUrl(url, options) {\n        if (options) {\n            options.forEach(filter => {\n                if (url.indexOf('?') > -1) {\n                    url += '&';\n                }\n                else {\n                    url += '?';\n                }\n                url += filter.getParam();\n            });\n        }\n        return url;\n    }\n}\nexport const urlHelper = new UrlHelper();\n//# sourceMappingURL=url.helper.js.map","export class HeaderHelper {\n    constructor() {\n        /**\n        * Header name for SDK usage\n        */\n        this.sdkVersionHeader = 'X-KC-SDKID';\n    }\n    /**\n    * Header identifying SDK type & version for internal purposes of Kontent.ai\n    */\n    getSdkIdHeader(info) {\n        return {\n            header: this.sdkVersionHeader,\n            value: `${info.host};${info.name};${info.version}`\n        };\n    }\n}\nexport const headerHelper = new HeaderHelper();\n//# sourceMappingURL=header.helper.js.map","export function extractHeadersFromAxiosResponse(response) {\n    const headers = [];\n    for (const headerKey of Object.keys(response.headers)) {\n        headers.push({\n            header: headerKey,\n            value: response.headers[headerKey]\n        });\n    }\n    return headers;\n}\n//# sourceMappingURL=headers-helper.js.map","import { extractHeadersFromAxiosResponse } from './headers-helper';\nexport class RetryHelper {\n    constructor() {\n        this.requestCancelledMessagePrefix = 'Request cancelled';\n        this.retryAfterHeaderName = 'Retry-After';\n        this.defaultRetryStatusCodes = [408, 429, 500, 502, 503, 504];\n        this.defaultRetryStrategy = {\n            addJitter: true,\n            deltaBackoffMs: 1000,\n            maxAttempts: 5,\n            canRetryError: (error) => this.canRetryErrorDefault(error)\n        };\n    }\n    getRetryErrorResult(data) {\n        var _a, _b, _c;\n        if (data.error && data.error.message) {\n            if (data.error.message.startsWith(this.requestCancelledMessagePrefix)) {\n                // request was cancelled by user, do not retry it\n                return {\n                    canRetry: false,\n                    retryInMs: 0,\n                    maxRetries: 0\n                };\n            }\n        }\n        const canRetryError = data.retryStrategy.canRetryError\n            ? data.retryStrategy.canRetryError(data.error)\n            : this.defaultRetryStrategy.canRetryError(data.error);\n        if (!canRetryError) {\n            // request cannot be retried\n            return {\n                canRetry: false,\n                retryInMs: 0,\n                maxRetries: 0\n            };\n        }\n        const maxRetries = ((_a = data.retryStrategy.maxAttempts) !== null && _a !== void 0 ? _a : this.defaultRetryStrategy.maxAttempts);\n        const maxRetriesReached = data.retryAttempt >= maxRetries;\n        if (maxRetriesReached) {\n            // request cannot be retried anymore due to maximum attempts\n            return {\n                canRetry: false,\n                retryInMs: 0,\n                maxRetries: maxRetries\n            };\n        }\n        // get wait time\n        const retryResult = this.tryGetRetryAfterInMsFromError(data.error);\n        if (retryResult) {\n            // retry after header was provided\n            return {\n                canRetry: true,\n                retryInMs: retryResult,\n                maxRetries: maxRetries\n            };\n        }\n        // wait time was not provided in header\n        const waitTimeMs = this.getNextWaitTimeMs((_b = data.retryStrategy.addJitter) !== null && _b !== void 0 ? _b : this.defaultRetryStrategy.addJitter, (_c = data.retryStrategy.deltaBackoffMs) !== null && _c !== void 0 ? _c : this.defaultRetryStrategy.deltaBackoffMs, data.retryAttempt);\n        return {\n            canRetry: true,\n            retryInMs: waitTimeMs,\n            maxRetries: maxRetries\n        };\n    }\n    getRetryStrategyFromStrategyOptions(retryOptions) {\n        if (!retryOptions) {\n            return this.defaultRetryStrategy;\n        }\n        return retryOptions;\n    }\n    canRetryInTime(startTime, maxCumulativeWaitTimeMs) {\n        const start = startTime.getTime();\n        const now = new Date().getTime();\n        const differenceInMs = now - start;\n        return {\n            canRetry: differenceInMs < maxCumulativeWaitTimeMs,\n            differenceInMs: differenceInMs\n        };\n    }\n    getNextWaitTimeMs(addJitter, deltaBackoffMs, retryAttempts) {\n        if (!addJitter) {\n            return deltaBackoffMs * Math.pow(2, retryAttempts);\n        }\n        const from = 0.8 * deltaBackoffMs;\n        const to = 1.2 * deltaBackoffMs * Math.pow(2, retryAttempts);\n        return this.randomNumberFromInterval(from, to);\n    }\n    canRetryErrorDefault(error) {\n        const axiosError = this.tryGetAxiosError(error);\n        if (!axiosError) {\n            // by default non-axios errors are not retried\n            return false;\n        }\n        const statusCode = this.getStatusCodeFromError(error);\n        const canRetryStatusCode = this.canRetryStatusCode(statusCode, this.defaultRetryStatusCodes);\n        if (canRetryStatusCode) {\n            return true;\n        }\n        return false;\n    }\n    tryGetRetryAfterInMsFromError(error) {\n        const axiosError = this.tryGetAxiosError(error);\n        if (!axiosError || !axiosError.response) {\n            return undefined;\n        }\n        const headers = extractHeadersFromAxiosResponse(axiosError.response);\n        const retryValueHeader = headers.find((m) => m.header.toLowerCase() === this.retryAfterHeaderName.toLowerCase());\n        if (!retryValueHeader) {\n            return undefined;\n        }\n        const retryInSeconds = +retryValueHeader.value;\n        return retryInSeconds * 1000;\n    }\n    canRetryStatusCode(statusCode, useRetryForResponseCodes) {\n        return useRetryForResponseCodes.includes(statusCode);\n    }\n    getStatusCodeFromError(error) {\n        const axiosError = this.tryGetAxiosError(error);\n        if (!axiosError || !axiosError.response) {\n            return 0;\n        }\n        return axiosError.response.status;\n    }\n    tryGetAxiosError(error) {\n        if (!error) {\n            return undefined;\n        }\n        if (error.isAxiosError) {\n            return error;\n        }\n        const originalError = error.originalError;\n        if (originalError && originalError.isAxiosError) {\n            return originalError;\n        }\n        return undefined;\n    }\n    /**\n     * min and max included\n     */\n    randomNumberFromInterval(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n}\nexport const retryHelper = new RetryHelper();\n//# sourceMappingURL=retry-helper.js.map","export var Parameters;\n(function (Parameters) {\n    class CustomParameter {\n        /**\n         * Custom parameter\n         * @constructor\n         * @param {string} name - Name of the parameter\n         * @param {string} value - Value of the parameter\n         */\n        constructor(name, value) {\n            this.name = name;\n            this.value = value;\n            if (!name) {\n                throw Error(`Name of the custom parameter is not specified`);\n            }\n        }\n        getParam() {\n            return this.name;\n        }\n        getParamValue() {\n            return this.value;\n        }\n    }\n    Parameters.CustomParameter = CustomParameter;\n})(Parameters || (Parameters = {}));\n//# sourceMappingURL=parameters.js.map","'use strict';\n\nexport default function bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n","'use strict';\n\nimport bind from './helpers/bind.js';\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\nconst {iterator, toStringTag} = Symbol;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n}\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(toStringTag in val) && !(iterator in val);\n}\n\n/**\n * Determine if a value is an empty object (safely handles Buffers)\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an empty object, otherwise false\n */\nconst isEmptyObject = (val) => {\n  // Early return for non-objects or Buffers to prevent RangeError\n  if (!isObject(val) || isBuffer(val)) {\n    return false;\n  }\n  \n  try {\n    return Object.keys(val).length === 0 && Object.getPrototypeOf(val) === Object.prototype;\n  } catch (e) {\n    // Fallback for any other objects that might cause RangeError with Object.keys()\n    return false;\n  }\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  let kind;\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) || (\n      isFunction(thing.append) && (\n        (kind = kindOf(thing)) === 'formdata' ||\n        // detect form-data instance\n        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')\n      )\n    )\n  )\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\nconst [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Buffer check\n    if (isBuffer(obj)) {\n      return;\n    }\n\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  if (isBuffer(obj)){\n    return null;\n  }\n\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  return typeof self !== \"undefined\" ? self : (typeof window !== 'undefined' ? window : global)\n})();\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  }\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[iterator];\n\n  const _iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = _iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n}\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n}\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    let ret;\n    if ((ret = reducer(descriptor, name, obj)) !== false) {\n      reducedDescriptors[name] = ret || descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n}\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n}\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  }\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n}\n\nconst noop = () => {}\n\nconst toFiniteNumber = (value, defaultValue) => {\n  return value != null && Number.isFinite(value = +value) ? value : defaultValue;\n}\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && isFunction(thing.append) && thing[toStringTag] === 'FormData' && thing[iterator]);\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      //Buffer check\n      if (isBuffer(source)) {\n        return source;\n      }\n\n      if(!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  }\n\n  return visit(obj, 0);\n}\n\nconst isAsyncFn = kindOfTest('AsyncFunction');\n\nconst isThenable = (thing) =>\n  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);\n\n// original code\n// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34\n\nconst _setImmediate = ((setImmediateSupported, postMessageSupported) => {\n  if (setImmediateSupported) {\n    return setImmediate;\n  }\n\n  return postMessageSupported ? ((token, callbacks) => {\n    _global.addEventListener(\"message\", ({source, data}) => {\n      if (source === _global && data === token) {\n        callbacks.length && callbacks.shift()();\n      }\n    }, false);\n\n    return (cb) => {\n      callbacks.push(cb);\n      _global.postMessage(token, \"*\");\n    }\n  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);\n})(\n  typeof setImmediate === 'function',\n  isFunction(_global.postMessage)\n);\n\nconst asap = typeof queueMicrotask !== 'undefined' ?\n  queueMicrotask.bind(_global) : ( typeof process !== 'undefined' && process.nextTick || _setImmediate);\n\n// *********************\n\n\nconst isIterable = (thing) => thing != null && isFunction(thing[iterator]);\n\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isEmptyObject,\n  isReadableStream,\n  isRequest,\n  isResponse,\n  isHeaders,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  isSpecCompliantForm,\n  toJSONObject,\n  isAsyncFn,\n  isThenable,\n  setImmediate: _setImmediate,\n  asap,\n  isIterable\n};\n","'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = (new Error()).stack;\n  }\n\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  if (response) {\n    this.response = response;\n    this.status = response.status ? response.status : null;\n  }\n}\n\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils.toJSONObject(this.config),\n      code: this.code,\n      status: this.status\n    };\n  }\n});\n\nconst prototype = AxiosError.prototype;\nconst descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED',\n  'ERR_NOT_SUPPORT',\n  'ERR_INVALID_URL'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(prototype);\n\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== 'isAxiosError';\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.cause = error;\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\nexport default AxiosError;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\n// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored\nimport PlatformFormData from '../platform/node/classes/FormData.js';\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? '[' + token + ']' : token;\n  }).join(dots ? '.' : '');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('target must be an object');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (PlatformFormData || FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;\n  const useBlob = _Blob && utils.isSpecCompliantForm(formData);\n\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError('visitor must be a function');\n  }\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (utils.isBoolean(value)) {\n      return value.toString();\n    }\n\n    if (!useBlob && utils.isBlob(value)) {\n      throw new AxiosError('Blob is not supported. Use a Buffer instead.');\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === 'object') {\n      if (utils.endsWith(key, '{}')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils.isArray(value) && isFlatArray(value)) ||\n        ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error('Circular reference detected in ' + path.join('.'));\n    }\n\n    stack.push(value);\n\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils.isObject(obj)) {\n    throw new TypeError('data must be an object');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\nexport default toFormData;\n","'use strict';\n\nimport toFormData from './toFormData.js';\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode(str) {\n  const charMap = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '~': '%7E',\n    '%20': '+',\n    '%00': '\\x00'\n  };\n  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n\n  params && toFormData(params, this, options);\n}\n\nconst prototype = AxiosURLSearchParams.prototype;\n\nprototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\n\nprototype.toString = function toString(encoder) {\n  const _encode = encoder ? function(value) {\n    return encoder.call(this, value, encode);\n  } : encode;\n\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + '=' + _encode(pair[1]);\n  }, '').join('&');\n};\n\nexport default AxiosURLSearchParams;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosURLSearchParams from '../helpers/AxiosURLSearchParams.js';\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?(object|Function)} options\n *\n * @returns {string} The formatted url\n */\nexport default function buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || encode;\n\n  if (utils.isFunction(options)) {\n    options = {\n      serialize: options\n    };\n  } \n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n}\n","'use strict';\n\nimport utils from './../utils.js';\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\nexport default InterceptorManager;\n","'use strict';\n\nexport default {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n","import URLSearchParams from './classes/URLSearchParams.js'\nimport FormData from './classes/FormData.js'\nimport Blob from './classes/Blob.js'\n\nexport default {\n  isBrowser: true,\n  classes: {\n    URLSearchParams,\n    FormData,\n    Blob\n  },\n  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']\n};\n","'use strict';\n\nimport AxiosURLSearchParams from '../../../helpers/AxiosURLSearchParams.js';\nexport default typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;\n","'use strict';\n\nexport default typeof FormData !== 'undefined' ? FormData : null;\n","'use strict'\n\nexport default typeof Blob !== 'undefined' ? Blob : null\n","const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';\n\nconst _navigator = typeof navigator === 'object' && navigator || undefined;\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n *\n * @returns {boolean}\n */\nconst hasStandardBrowserEnv = hasBrowserEnv &&\n  (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0);\n\n/**\n * Determine if we're running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */\nconst hasStandardBrowserWebWorkerEnv = (() => {\n  return (\n    typeof WorkerGlobalScope !== 'undefined' &&\n    // eslint-disable-next-line no-undef\n    self instanceof WorkerGlobalScope &&\n    typeof self.importScripts === 'function'\n  );\n})();\n\nconst origin = hasBrowserEnv && window.location.href || 'http://localhost';\n\nexport {\n  hasBrowserEnv,\n  hasStandardBrowserWebWorkerEnv,\n  hasStandardBrowserEnv,\n  _navigator as navigator,\n  origin\n}\n","import platform from './node/index.js';\nimport * as utils from './common/utils.js';\n\nexport default {\n  ...utils,\n  ...platform\n}\n","'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === '[]' ? '' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n\n    if (name === '__proto__') return true;\n\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils.isArray(target) ? target.length : name;\n\n    if (isLast) {\n      if (utils.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n\n      return !isNumericKey;\n    }\n\n    if (!target[name] || !utils.isObject(target[name])) {\n      target[name] = [];\n    }\n\n    const result = buildPath(path, value, target[name], index);\n\n    if (result && utils.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n\n    return !isNumericKey;\n  }\n\n  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {\n    const obj = {};\n\n    utils.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n\n    return obj;\n  }\n\n  return null;\n}\n\nexport default formDataToJSON;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\nimport transitionalDefaults from './transitional.js';\nimport toFormData from '../helpers/toFormData.js';\nimport toURLEncodedForm from '../helpers/toURLEncodedForm.js';\nimport platform from '../platform/index.js';\nimport formDataToJSON from '../helpers/formDataToJSON.js';\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: ['xhr', 'http', 'fetch'],\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils.isObject(data);\n\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils.isFormData(data);\n\n    if (isFormData) {\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data) ||\n      utils.isReadableStream(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(\n          isFileList ? {'files[]': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (utils.isResponse(data) || utils.isReadableStream(data)) {\n      return data;\n    }\n\n    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': undefined\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {\n  defaults.headers[method] = {};\n});\n\nexport default defaults;\n","'use strict';\n\nimport utils from '../utils.js';\nimport toFormData from './toFormData.js';\nimport platform from '../platform/index.js';\n\nexport default function toURLEncodedForm(data, options) {\n  return toFormData(data, new platform.classes.URLSearchParams(), {\n    visitor: function(value, key, path, helpers) {\n      if (platform.isNode && utils.isBuffer(value)) {\n        this.append(key, value.toString('base64'));\n        return false;\n      }\n\n      return helpers.defaultVisitor.apply(this, arguments);\n    },\n    ...options\n  });\n}\n","'use strict';\n\nimport utils from './../utils.js';\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils.toObjectSet([\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n]);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\nexport default rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\n    i = line.indexOf(':');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\n      return;\n    }\n\n    if (key === 'set-cookie') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\nimport utils from '../utils.js';\nimport parseHeaders from '../helpers/parseHeaders.js';\n\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nconst isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());\n\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (isHeaderNameFilter) {\n    value = header;\n  }\n\n  if (!utils.isString(value)) return;\n\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(' ' + header);\n\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite)\n    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else if (utils.isObject(header) && utils.isIterable(header)) {\n      let obj = {}, dest, key;\n      for (const entry of header) {\n        if (!utils.isArray(entry)) {\n          throw TypeError('Object iterator must return a key-value pair');\n        }\n\n        obj[key = entry[0]] = (dest = obj[key]) ?\n          (utils.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]]) : entry[1];\n      }\n\n      setHeaders(obj, valueOrRewrite)\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n\n    while (i--) {\n      const key = keys[i];\n      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\\n');\n  }\n\n  getSetCookie() {\n    return this.get(\"set-cookie\") || [];\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);\n\n// reserved names hotfix\nutils.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {\n  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`\n  return {\n    get: () => value,\n    set(headerValue) {\n      this[mapped] = headerValue;\n    }\n  }\n});\n\nutils.freezeMethods(AxiosHeaders);\n\nexport default AxiosHeaders;\n","'use strict';\n\nimport utils from './../utils.js';\nimport defaults from '../defaults/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nexport default function transformData(fns, response) {\n  const config = this || defaults;\n  const context = response || config;\n  const headers = AxiosHeaders.from(context.headers);\n  let data = context.data;\n\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n\n  headers.normalize();\n\n  return data;\n}\n","'use strict';\n\nexport default function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n","'use strict';\n\nimport AxiosError from '../core/AxiosError.js';\nimport utils from '../utils.js';\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);\n  this.name = 'CanceledError';\n}\n\nutils.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\nexport default CanceledError;\n","'use strict';\n\nimport AxiosError from './AxiosError.js';\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nexport default function settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n}\n","'use strict';\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\nexport default speedometer;\n","import speedometer from \"./speedometer.js\";\nimport throttle from \"./throttle.js\";\nimport utils from \"../utils.js\";\n\nexport const progressEventReducer = (listener, isDownloadStream, freq = 3) => {\n  let bytesNotified = 0;\n  const _speedometer = speedometer(50, 250);\n\n  return throttle(e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e,\n      lengthComputable: total != null,\n      [isDownloadStream ? 'download' : 'upload']: true\n    };\n\n    listener(data);\n  }, freq);\n}\n\nexport const progressEventDecorator = (total, throttled) => {\n  const lengthComputable = total != null;\n\n  return [(loaded) => throttled[0]({\n    lengthComputable,\n    total,\n    loaded\n  }), throttled[1]];\n}\n\nexport const asyncDecorator = (fn) => (...args) => utils.asap(() => fn(...args));\n","/**\n * Throttle decorator\n * @param {Function} fn\n * @param {Number} freq\n * @return {Function}\n */\nfunction throttle(fn, freq) {\n  let timestamp = 0;\n  let threshold = 1000 / freq;\n  let lastArgs;\n  let timer;\n\n  const invoke = (args, now = Date.now()) => {\n    timestamp = now;\n    lastArgs = null;\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n    fn(...args);\n  }\n\n  const throttled = (...args) => {\n    const now = Date.now();\n    const passed = now - timestamp;\n    if ( passed >= threshold) {\n      invoke(args, now);\n    } else {\n      lastArgs = args;\n      if (!timer) {\n        timer = setTimeout(() => {\n          timer = null;\n          invoke(lastArgs)\n        }, threshold - passed);\n      }\n    }\n  }\n\n  const flush = () => lastArgs && invoke(lastArgs);\n\n  return [throttled, flush];\n}\n\nexport default throttle;\n","import platform from '../platform/index.js';\n\nexport default platform.hasStandardBrowserEnv ? ((origin, isMSIE) => (url) => {\n  url = new URL(url, platform.origin);\n\n  return (\n    origin.protocol === url.protocol &&\n    origin.host === url.host &&\n    (isMSIE || origin.port === url.port)\n  );\n})(\n  new URL(platform.origin),\n  platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)\n) : () => true;\n","import utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.hasStandardBrowserEnv ?\n\n  // Standard browser envs support document.cookie\n  {\n    write(name, value, expires, path, domain, secure) {\n      const cookie = [name + '=' + encodeURIComponent(value)];\n\n      utils.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());\n\n      utils.isString(path) && cookie.push('path=' + path);\n\n      utils.isString(domain) && cookie.push('domain=' + domain);\n\n      secure === true && cookie.push('secure');\n\n      document.cookie = cookie.join('; ');\n    },\n\n    read(name) {\n      const match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n      return (match ? decodeURIComponent(match[3]) : null);\n    },\n\n    remove(name) {\n      this.write(name, '', Date.now() - 86400000);\n    }\n  }\n\n  :\n\n  // Non-standard browser env (web workers, react-native) lack needed support.\n  {\n    write() {},\n    read() {\n      return null;\n    },\n    remove() {}\n  };\n\n","'use strict';\n\nimport isAbsoluteURL from '../helpers/isAbsoluteURL.js';\nimport combineURLs from '../helpers/combineURLs.js';\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nexport default function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {\n  let isRelativeUrl = !isAbsoluteURL(requestedURL);\n  if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nexport default function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nexport default function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/?\\/$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n}\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosHeaders from \"./AxiosHeaders.js\";\n\nconst headersToObject = (thing) => thing instanceof AxiosHeaders ? { ...thing } : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nexport default function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, prop, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({caseless}, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, prop , caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, prop , caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, prop , caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    withXSRFToken: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b , prop) => mergeDeepProperties(headersToObject(a), headersToObject(b),prop, true)\n  };\n\n  utils.forEach(Object.keys({...config1, ...config2}), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n","import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport isURLSameOrigin from \"./isURLSameOrigin.js\";\nimport cookies from \"./cookies.js\";\nimport buildFullPath from \"../core/buildFullPath.js\";\nimport mergeConfig from \"../core/mergeConfig.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport buildURL from \"./buildURL.js\";\n\nexport default (config) => {\n  const newConfig = mergeConfig({}, config);\n\n  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;\n\n  newConfig.headers = headers = AxiosHeaders.from(headers);\n\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);\n\n  // HTTP basic authentication\n  if (auth) {\n    headers.set('Authorization', 'Basic ' +\n      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))\n    );\n  }\n\n  let contentType;\n\n  if (utils.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // Let the browser set it\n    } else if ((contentType = headers.getContentType()) !== false) {\n      // fix semicolon duplication issue for ReactNative FormData implementation\n      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];\n      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));\n    }\n  }\n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n\n    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {\n      // Add xsrf header\n      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n\n  return newConfig;\n}\n\n","import utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport parseProtocol from '../helpers/parseProtocol.js';\nimport platform from '../platform/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport {progressEventReducer} from '../helpers/progressEventReducer.js';\nimport resolveConfig from \"../helpers/resolveConfig.js\";\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nexport default isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    const _config = resolveConfig(config);\n    let requestData = _config.data;\n    const requestHeaders = AxiosHeaders.from(_config.headers).normalize();\n    let {responseType, onUploadProgress, onDownloadProgress} = _config;\n    let onCanceled;\n    let uploadThrottled, downloadThrottled;\n    let flushUpload, flushDownload;\n\n    function done() {\n      flushUpload && flushUpload(); // flush events\n      flushDownload && flushDownload(); // flush events\n\n      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);\n\n      _config.signal && _config.signal.removeEventListener('abort', onCanceled);\n    }\n\n    let request = new XMLHttpRequest();\n\n    request.open(_config.method.toUpperCase(), _config.url, true);\n\n    // Set the request timeout in MS\n    request.timeout = _config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = _config.transitional || transitionalDefaults;\n      if (_config.timeoutErrorMessage) {\n        timeoutErrorMessage = _config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(_config.withCredentials)) {\n      request.withCredentials = !!_config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = _config.responseType;\n    }\n\n    // Handle progress if needed\n    if (onDownloadProgress) {\n      ([downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true));\n      request.addEventListener('progress', downloadThrottled);\n    }\n\n    // Not all browsers support upload events\n    if (onUploadProgress && request.upload) {\n      ([uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress));\n\n      request.upload.addEventListener('progress', uploadThrottled);\n\n      request.upload.addEventListener('loadend', flushUpload);\n    }\n\n    if (_config.cancelToken || _config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);\n      if (_config.signal) {\n        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(_config.url);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n}\n","'use strict';\n\nexport default function parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n}\n","import CanceledError from \"../cancel/CanceledError.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport utils from '../utils.js';\n\nconst composeSignals = (signals, timeout) => {\n  const {length} = (signals = signals ? signals.filter(Boolean) : []);\n\n  if (timeout || length) {\n    let controller = new AbortController();\n\n    let aborted;\n\n    const onabort = function (reason) {\n      if (!aborted) {\n        aborted = true;\n        unsubscribe();\n        const err = reason instanceof Error ? reason : this.reason;\n        controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\n      }\n    }\n\n    let timer = timeout && setTimeout(() => {\n      timer = null;\n      onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT))\n    }, timeout)\n\n    const unsubscribe = () => {\n      if (signals) {\n        timer && clearTimeout(timer);\n        timer = null;\n        signals.forEach(signal => {\n          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);\n        });\n        signals = null;\n      }\n    }\n\n    signals.forEach((signal) => signal.addEventListener('abort', onabort));\n\n    const {signal} = controller;\n\n    signal.unsubscribe = () => utils.asap(unsubscribe);\n\n    return signal;\n  }\n}\n\nexport default composeSignals;\n","\nexport const streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n\n  let pos = 0;\n  let end;\n\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n}\n\nexport const readBytes = async function* (iterable, chunkSize) {\n  for await (const chunk of readStream(iterable)) {\n    yield* streamChunk(chunk, chunkSize);\n  }\n}\n\nconst readStream = async function* (stream) {\n  if (stream[Symbol.asyncIterator]) {\n    yield* stream;\n    return;\n  }\n\n  const reader = stream.getReader();\n  try {\n    for (;;) {\n      const {done, value} = await reader.read();\n      if (done) {\n        break;\n      }\n      yield value;\n    }\n  } finally {\n    await reader.cancel();\n  }\n}\n\nexport const trackStream = (stream, chunkSize, onProgress, onFinish) => {\n  const iterator = readBytes(stream, chunkSize);\n\n  let bytes = 0;\n  let done;\n  let _onFinish = (e) => {\n    if (!done) {\n      done = true;\n      onFinish && onFinish(e);\n    }\n  }\n\n  return new ReadableStream({\n    async pull(controller) {\n      try {\n        const {done, value} = await iterator.next();\n\n        if (done) {\n         _onFinish();\n          controller.close();\n          return;\n        }\n\n        let len = value.byteLength;\n        if (onProgress) {\n          let loadedBytes = bytes += len;\n          onProgress(loadedBytes);\n        }\n        controller.enqueue(new Uint8Array(value));\n      } catch (err) {\n        _onFinish(err);\n        throw err;\n      }\n    },\n    cancel(reason) {\n      _onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  })\n}\n","import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport composeSignals from \"../helpers/composeSignals.js\";\nimport {trackStream} from \"../helpers/trackStream.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport {progressEventReducer, progressEventDecorator, asyncDecorator} from \"../helpers/progressEventReducer.js\";\nimport resolveConfig from \"../helpers/resolveConfig.js\";\nimport settle from \"../core/settle.js\";\n\nconst isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';\nconst isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';\n\n// used only inside the fetch adapter\nconst encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?\n    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :\n    async (str) => new Uint8Array(await new Response(str).arrayBuffer())\n);\n\nconst test = (fn, ...args) => {\n  try {\n    return !!fn(...args);\n  } catch (e) {\n    return false\n  }\n}\n\nconst supportsRequestStream = isReadableStreamSupported && test(() => {\n  let duplexAccessed = false;\n\n  const hasContentType = new Request(platform.origin, {\n    body: new ReadableStream(),\n    method: 'POST',\n    get duplex() {\n      duplexAccessed = true;\n      return 'half';\n    },\n  }).headers.has('Content-Type');\n\n  return duplexAccessed && !hasContentType;\n});\n\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\n\nconst supportsResponseStream = isReadableStreamSupported &&\n  test(() => utils.isReadableStream(new Response('').body));\n\n\nconst resolvers = {\n  stream: supportsResponseStream && ((res) => res.body)\n};\n\nisFetchSupported && (((res) => {\n  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {\n    !resolvers[type] && (resolvers[type] = utils.isFunction(res[type]) ? (res) => res[type]() :\n      (_, config) => {\n        throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);\n      })\n  });\n})(new Response));\n\nconst getBodyLength = async (body) => {\n  if (body == null) {\n    return 0;\n  }\n\n  if(utils.isBlob(body)) {\n    return body.size;\n  }\n\n  if(utils.isSpecCompliantForm(body)) {\n    const _request = new Request(platform.origin, {\n      method: 'POST',\n      body,\n    });\n    return (await _request.arrayBuffer()).byteLength;\n  }\n\n  if(utils.isArrayBufferView(body) || utils.isArrayBuffer(body)) {\n    return body.byteLength;\n  }\n\n  if(utils.isURLSearchParams(body)) {\n    body = body + '';\n  }\n\n  if(utils.isString(body)) {\n    return (await encodeText(body)).byteLength;\n  }\n}\n\nconst resolveBodyLength = async (headers, body) => {\n  const length = utils.toFiniteNumber(headers.getContentLength());\n\n  return length == null ? getBodyLength(body) : length;\n}\n\nexport default isFetchSupported && (async (config) => {\n  let {\n    url,\n    method,\n    data,\n    signal,\n    cancelToken,\n    timeout,\n    onDownloadProgress,\n    onUploadProgress,\n    responseType,\n    headers,\n    withCredentials = 'same-origin',\n    fetchOptions\n  } = resolveConfig(config);\n\n  responseType = responseType ? (responseType + '').toLowerCase() : 'text';\n\n  let composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);\n\n  let request;\n\n  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {\n      composedSignal.unsubscribe();\n  });\n\n  let requestContentLength;\n\n  try {\n    if (\n      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&\n      (requestContentLength = await resolveBodyLength(headers, data)) !== 0\n    ) {\n      let _request = new Request(url, {\n        method: 'POST',\n        body: data,\n        duplex: \"half\"\n      });\n\n      let contentTypeHeader;\n\n      if (utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {\n        headers.setContentType(contentTypeHeader)\n      }\n\n      if (_request.body) {\n        const [onProgress, flush] = progressEventDecorator(\n          requestContentLength,\n          progressEventReducer(asyncDecorator(onUploadProgress))\n        );\n\n        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);\n      }\n    }\n\n    if (!utils.isString(withCredentials)) {\n      withCredentials = withCredentials ? 'include' : 'omit';\n    }\n\n    // Cloudflare Workers throws when credentials are defined\n    // see https://github.com/cloudflare/workerd/issues/902\n    const isCredentialsSupported = \"credentials\" in Request.prototype;\n    request = new Request(url, {\n      ...fetchOptions,\n      signal: composedSignal,\n      method: method.toUpperCase(),\n      headers: headers.normalize().toJSON(),\n      body: data,\n      duplex: \"half\",\n      credentials: isCredentialsSupported ? withCredentials : undefined\n    });\n\n    let response = await fetch(request, fetchOptions);\n\n    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');\n\n    if (supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {\n      const options = {};\n\n      ['status', 'statusText', 'headers'].forEach(prop => {\n        options[prop] = response[prop];\n      });\n\n      const responseContentLength = utils.toFiniteNumber(response.headers.get('content-length'));\n\n      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(\n        responseContentLength,\n        progressEventReducer(asyncDecorator(onDownloadProgress), true)\n      ) || [];\n\n      response = new Response(\n        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {\n          flush && flush();\n          unsubscribe && unsubscribe();\n        }),\n        options\n      );\n    }\n\n    responseType = responseType || 'text';\n\n    let responseData = await resolvers[utils.findKey(resolvers, responseType) || 'text'](response, config);\n\n    !isStreamResponse && unsubscribe && unsubscribe();\n\n    return await new Promise((resolve, reject) => {\n      settle(resolve, reject, {\n        data: responseData,\n        headers: AxiosHeaders.from(response.headers),\n        status: response.status,\n        statusText: response.statusText,\n        config,\n        request\n      })\n    })\n  } catch (err) {\n    unsubscribe && unsubscribe();\n\n    if (err && err.name === 'TypeError' && /Load failed|fetch/i.test(err.message)) {\n      throw Object.assign(\n        new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request),\n        {\n          cause: err.cause || err\n        }\n      )\n    }\n\n    throw AxiosError.from(err, err && err.code, config, request);\n  }\n});\n\n\n","import utils from '../utils.js';\nimport httpAdapter from './http.js';\nimport xhrAdapter from './xhr.js';\nimport fetchAdapter from './fetch.js';\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter,\n  fetch: fetchAdapter\n}\n\nutils.forEach(knownAdapters, (fn, value) => {\n  if (fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nconst renderReason = (reason) => `- ${reason}`;\n\nconst isResolvedHandle = (adapter) => utils.isFunction(adapter) || adapter === null || adapter === false;\n\nexport default {\n  getAdapter: (adapters) => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    const rejectedReasons = {};\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      let id;\n\n      adapter = nameOrAdapter;\n\n      if (!isResolvedHandle(nameOrAdapter)) {\n        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];\n\n        if (adapter === undefined) {\n          throw new AxiosError(`Unknown adapter '${id}'`);\n        }\n      }\n\n      if (adapter) {\n        break;\n      }\n\n      rejectedReasons[id || '#' + i] = adapter;\n    }\n\n    if (!adapter) {\n\n      const reasons = Object.entries(rejectedReasons)\n        .map(([id, state]) => `adapter ${id} ` +\n          (state === false ? 'is not supported by the environment' : 'is not available in the build')\n        );\n\n      let s = length ?\n        (reasons.length > 1 ? 'since :\\n' + reasons.map(renderReason).join('\\n') : ' ' + renderReason(reasons[0])) :\n        'as no adapter specified';\n\n      throw new AxiosError(\n        `There is no suitable adapter to dispatch the request ` + s,\n        'ERR_NOT_SUPPORT'\n      );\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n}\n","// eslint-disable-next-line strict\nexport default null;\n","'use strict';\n\nimport transformData from './transformData.js';\nimport isCancel from '../cancel/isCancel.js';\nimport defaults from '../defaults/index.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport adapters from \"../adapters/adapters.js\";\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nexport default function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = AxiosHeaders.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {\n    config.headers.setContentType('application/x-www-form-urlencoded', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || defaults.adapter);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = AxiosHeaders.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = AxiosHeaders.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n","export const VERSION = \"1.11.0\";","'use strict';\n\nimport {VERSION} from '../env/data.js';\nimport AxiosError from '../core/AxiosError.js';\n\nconst validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\nvalidators.spelling = function spelling(correctSpelling) {\n  return (value, opt) => {\n    // eslint-disable-next-line no-console\n    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);\n    return true;\n  }\n};\n\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nexport default {\n  assertOptions,\n  validators\n};\n","'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig || {};\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  async request(configOrUrl, config) {\n    try {\n      return await this._request(configOrUrl, config);\n    } catch (err) {\n      if (err instanceof Error) {\n        let dummy = {};\n\n        Error.captureStackTrace ? Error.captureStackTrace(dummy) : (dummy = new Error());\n\n        // slice off the Error: ... line\n        const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, '') : '';\n        try {\n          if (!err.stack) {\n            err.stack = stack;\n            // match without the 2 top stack lines\n          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, ''))) {\n            err.stack += '\\n' + stack\n          }\n        } catch (e) {\n          // ignore the case where \"stack\" is an un-writable property\n        }\n      }\n\n      throw err;\n    }\n  }\n\n  _request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer != null) {\n      if (utils.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        }\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: validators.function,\n          serialize: validators.function\n        }, true);\n      }\n    }\n\n    // Set config.allowAbsoluteUrls\n    if (config.allowAbsoluteUrls !== undefined) {\n      // do nothing\n    } else if (this.defaults.allowAbsoluteUrls !== undefined) {\n      config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;\n    } else {\n      config.allowAbsoluteUrls = true;\n    }\n\n    validator.assertOptions(config, {\n      baseUrl: validators.spelling('baseURL'),\n      withXsrfToken: validators.spelling('withXSRFToken')\n    }, true);\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    // Flatten headers\n    let contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    headers && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift(...requestInterceptorChain);\n      chain.push(...responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nexport default Axios;\n","'use strict';\n\nimport CanceledError from './CanceledError.js';\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.');\n    }\n\n    let resolvePromise;\n\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n\n      let i = token._listeners.length;\n\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n\n      return promise;\n    };\n\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n\n      token.reason = new CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  toAbortSignal() {\n    const controller = new AbortController();\n\n    const abort = (err) => {\n      controller.abort(err);\n    };\n\n    this.subscribe(abort);\n\n    controller.signal.unsubscribe = () => this.unsubscribe(abort);\n\n    return controller.signal;\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n\nexport default CancelToken;\n","const HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511,\n};\n\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n\nexport default HttpStatusCode;\n","'use strict';\n\nimport utils from './utils.js';\nimport bind from './helpers/bind.js';\nimport Axios from './core/Axios.js';\nimport mergeConfig from './core/mergeConfig.js';\nimport defaults from './defaults/index.js';\nimport formDataToJSON from './helpers/formDataToJSON.js';\nimport CanceledError from './cancel/CanceledError.js';\nimport CancelToken from './cancel/CancelToken.js';\nimport isCancel from './cancel/isCancel.js';\nimport {VERSION} from './env/data.js';\nimport toFormData from './helpers/toFormData.js';\nimport AxiosError from './core/AxiosError.js';\nimport spread from './helpers/spread.js';\nimport isAxiosError from './helpers/isAxiosError.js';\nimport AxiosHeaders from \"./core/AxiosHeaders.js\";\nimport adapters from './adapters/adapters.js';\nimport HttpStatusCode from './helpers/HttpStatusCode.js';\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new Axios(defaultConfig);\n  const instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context, {allOwnKeys: true});\n\n  // Copy context to instance\n  utils.extend(instance, context, null, {allOwnKeys: true});\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\n\naxios.AxiosHeaders = AxiosHeaders;\n\naxios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);\n\naxios.getAdapter = adapters.getAdapter;\n\naxios.HttpStatusCode = HttpStatusCode;\n\naxios.default = axios;\n\n// this module should only have a default export\nexport default axios\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nexport default function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n","'use strict';\n\nimport utils from './../utils.js';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nexport default function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n}\n","export class HttpDebugger {\n    /*\n    Called when http request is started\n    */\n    debugStartHttpRequest() {\n    }\n    /*\n    Called when http request is resolved\n    */\n    debugSuccessHttpRequest() {\n    }\n    /*\n    Called when http request is being retried\n    */\n    debugRetryHttpRequest() {\n    }\n}\nexport const httpDebugger = new HttpDebugger();\n//# sourceMappingURL=http.debugger.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport axios from 'axios';\nimport { extractHeadersFromAxiosResponse } from '../helpers/headers-helper';\nimport { httpDebugger } from './http.debugger';\nimport { retryHelper } from '../helpers/retry-helper';\nexport function getWithRetryAsync(instance, call, functionsConfig, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const retryStrategyOptions = (_a = options === null || options === void 0 ? void 0 : options.retryStrategy) !== null && _a !== void 0 ? _a : retryHelper.defaultRetryStrategy;\n        return yield runWithRetryAsync({\n            retryAttempt: 0,\n            url: call.url,\n            retryStrategy: retryStrategyOptions,\n            functionsConfig: functionsConfig,\n            call: (retryAttempt) => __awaiter(this, void 0, void 0, function* () {\n                var _b, _c;\n                httpDebugger.debugStartHttpRequest();\n                const axiosResponse = yield instance.get(call.url, {\n                    headers: getHeadersJson((_b = options === null || options === void 0 ? void 0 : options.headers) !== null && _b !== void 0 ? _b : [], false),\n                    responseType: options === null || options === void 0 ? void 0 : options.responseType,\n                    cancelToken: (_c = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _c === void 0 ? void 0 : _c.token\n                });\n                const response = {\n                    data: axiosResponse.data,\n                    rawResponse: axiosResponse,\n                    headers: extractHeadersFromAxiosResponse(axiosResponse),\n                    status: axiosResponse.status,\n                    retryStrategy: {\n                        options: retryStrategyOptions,\n                        retryAttempts: retryAttempt\n                    }\n                };\n                httpDebugger.debugSuccessHttpRequest();\n                return response;\n            })\n        });\n    });\n}\nexport function postWithRetryAsync(instance, call, functionsConfig, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const retryStrategyOptions = (_a = options === null || options === void 0 ? void 0 : options.retryStrategy) !== null && _a !== void 0 ? _a : retryHelper.defaultRetryStrategy;\n        return yield runWithRetryAsync({\n            retryAttempt: 0,\n            url: call.url,\n            retryStrategy: retryStrategyOptions,\n            functionsConfig: functionsConfig,\n            call: (retryAttempt) => __awaiter(this, void 0, void 0, function* () {\n                var _b, _c;\n                httpDebugger.debugStartHttpRequest();\n                const axiosResponse = yield instance.post(call.url, call.body, {\n                    headers: getHeadersJson((_b = options === null || options === void 0 ? void 0 : options.headers) !== null && _b !== void 0 ? _b : [], false),\n                    responseType: options === null || options === void 0 ? void 0 : options.responseType,\n                    // required for uploading large files\n                    // https://github.com/axios/axios/issues/1362\n                    maxContentLength: 'Infinity',\n                    maxBodyLength: 'Infinity',\n                    cancelToken: (_c = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _c === void 0 ? void 0 : _c.token\n                });\n                const response = {\n                    data: axiosResponse.data,\n                    rawResponse: axiosResponse,\n                    headers: extractHeadersFromAxiosResponse(axiosResponse),\n                    status: axiosResponse.status,\n                    retryStrategy: {\n                        options: retryStrategyOptions,\n                        retryAttempts: retryAttempt\n                    }\n                };\n                httpDebugger.debugSuccessHttpRequest();\n                return response;\n            })\n        });\n    });\n}\nexport function putWithRetryAsync(instance, call, functionsConfig, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const retryStrategyOptions = (_a = options === null || options === void 0 ? void 0 : options.retryStrategy) !== null && _a !== void 0 ? _a : retryHelper.defaultRetryStrategy;\n        return yield runWithRetryAsync({\n            retryAttempt: 0,\n            url: call.url,\n            retryStrategy: retryStrategyOptions,\n            functionsConfig: functionsConfig,\n            call: (retryAttempt) => __awaiter(this, void 0, void 0, function* () {\n                var _b, _c;\n                httpDebugger.debugStartHttpRequest();\n                const axiosResponse = yield instance.put(call.url, call.body, {\n                    headers: getHeadersJson((_b = options === null || options === void 0 ? void 0 : options.headers) !== null && _b !== void 0 ? _b : [], false),\n                    responseType: options === null || options === void 0 ? void 0 : options.responseType,\n                    // required for uploading large files\n                    // https://github.com/axios/axios/issues/1362\n                    maxContentLength: 'Infinity',\n                    maxBodyLength: 'Infinity',\n                    cancelToken: (_c = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _c === void 0 ? void 0 : _c.token\n                });\n                const response = {\n                    data: axiosResponse.data,\n                    rawResponse: axiosResponse,\n                    headers: extractHeadersFromAxiosResponse(axiosResponse),\n                    status: axiosResponse.status,\n                    retryStrategy: {\n                        options: retryStrategyOptions,\n                        retryAttempts: retryAttempt\n                    }\n                };\n                httpDebugger.debugSuccessHttpRequest();\n                return response;\n            })\n        });\n    });\n}\nexport function patchWithRetryAsync(instance, call, functionsConfig, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const retryStrategyOptions = (_a = options === null || options === void 0 ? void 0 : options.retryStrategy) !== null && _a !== void 0 ? _a : retryHelper.defaultRetryStrategy;\n        return yield runWithRetryAsync({\n            retryAttempt: 0,\n            url: call.url,\n            retryStrategy: retryStrategyOptions,\n            functionsConfig: functionsConfig,\n            call: (retryAttempt) => __awaiter(this, void 0, void 0, function* () {\n                var _b, _c;\n                httpDebugger.debugStartHttpRequest();\n                const axiosResponse = yield instance.patch(call.url, call.body, {\n                    headers: getHeadersJson((_b = options === null || options === void 0 ? void 0 : options.headers) !== null && _b !== void 0 ? _b : [], false),\n                    responseType: options === null || options === void 0 ? void 0 : options.responseType,\n                    // required for uploading large files\n                    // https://github.com/axios/axios/issues/1362\n                    maxContentLength: 'Infinity',\n                    maxBodyLength: 'Infinity',\n                    cancelToken: (_c = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _c === void 0 ? void 0 : _c.token\n                });\n                const response = {\n                    data: axiosResponse.data,\n                    rawResponse: axiosResponse,\n                    headers: extractHeadersFromAxiosResponse(axiosResponse),\n                    status: axiosResponse.status,\n                    retryStrategy: {\n                        options: retryStrategyOptions,\n                        retryAttempts: retryAttempt\n                    }\n                };\n                httpDebugger.debugSuccessHttpRequest();\n                return response;\n            })\n        });\n    });\n}\nexport function deleteWithRetryAsync(instance, call, functionsConfig, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const retryStrategyOptions = (_a = options === null || options === void 0 ? void 0 : options.retryStrategy) !== null && _a !== void 0 ? _a : retryHelper.defaultRetryStrategy;\n        return yield runWithRetryAsync({\n            retryAttempt: 0,\n            url: call.url,\n            retryStrategy: retryStrategyOptions,\n            functionsConfig: functionsConfig,\n            call: (retryAttempt) => __awaiter(this, void 0, void 0, function* () {\n                var _b, _c;\n                httpDebugger.debugStartHttpRequest();\n                const axiosResponse = yield instance.delete(call.url, {\n                    headers: getHeadersJson((_b = options === null || options === void 0 ? void 0 : options.headers) !== null && _b !== void 0 ? _b : [], false),\n                    responseType: options === null || options === void 0 ? void 0 : options.responseType,\n                    // required for uploading large files\n                    // https://github.com/axios/axios/issues/1362\n                    maxContentLength: 'Infinity',\n                    maxBodyLength: 'Infinity',\n                    cancelToken: (_c = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _c === void 0 ? void 0 : _c.token\n                });\n                const response = {\n                    data: axiosResponse.data,\n                    rawResponse: axiosResponse,\n                    headers: extractHeadersFromAxiosResponse(axiosResponse),\n                    status: axiosResponse.status,\n                    retryStrategy: {\n                        options: retryStrategyOptions,\n                        retryAttempts: retryAttempt\n                    }\n                };\n                httpDebugger.debugSuccessHttpRequest();\n                return response;\n            })\n        });\n    });\n}\nexport function createCancelToken() {\n    let canceler;\n    const token = new axios.CancelToken((c) => {\n        // An executor function receives a cancel function as a parameter\n        canceler = c;\n    });\n    return {\n        cancel: (cancelMessage) => canceler(`${retryHelper.requestCancelledMessagePrefix}: ${cancelMessage !== null && cancelMessage !== void 0 ? cancelMessage : 'User cancel'}`),\n        token: token\n    };\n}\nfunction runWithRetryAsync(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            return yield data.call(data.retryAttempt);\n        }\n        catch (error) {\n            const retryResult = retryHelper.getRetryErrorResult({\n                error: error,\n                retryAttempt: data.retryAttempt,\n                retryStrategy: data.retryStrategy\n            });\n            if (retryResult.canRetry) {\n                httpDebugger.debugRetryHttpRequest();\n                // wait time before retrying\n                yield new Promise((resolve) => setTimeout(resolve, retryResult.retryInMs));\n                if (data.functionsConfig.logErrorsToConsole) {\n                    console.warn(`Retry attempt '${data.retryAttempt + 1}' from a maximum of '${retryResult.maxRetries}' retries. Request url: '${data.url}'`);\n                }\n                // retry request\n                return yield runWithRetryAsync({\n                    call: data.call,\n                    retryStrategy: data.retryStrategy,\n                    retryAttempt: data.retryAttempt + 1,\n                    url: data.url,\n                    functionsConfig: data.functionsConfig\n                });\n            }\n            if (data.functionsConfig.logErrorsToConsole) {\n                console.error(`Executing '${data.url}' failed. Request was retried '${data.retryAttempt}' times. `, error);\n            }\n            throw error;\n        }\n    });\n}\nfunction getHeadersJson(headers, addContentTypeHeader) {\n    const headerJson = {};\n    headers.forEach((header) => {\n        headerJson[header.header] = header.value;\n    });\n    if (addContentTypeHeader) {\n        // add default content type header if not present\n        const contentTypeHeader = headers.find((m) => m.header.toLowerCase() === 'Content-Type'.toLowerCase());\n        if (!contentTypeHeader) {\n            headerJson['Content-Type'] = 'application/json';\n        }\n    }\n    return headerJson;\n}\n//# sourceMappingURL=http.functions.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport axios from 'axios';\nimport * as HttpFunctions from './http.functions';\nexport class HttpService {\n    constructor(opts) {\n        this.opts = opts;\n        this.axiosInstance = axios.create(opts === null || opts === void 0 ? void 0 : opts.axiosRequestConfig);\n        this.functionsConfig = this.getFunctionsConfig();\n    }\n    getAsync(call, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield HttpFunctions.getWithRetryAsync(this.axiosInstance, call, this.functionsConfig, options);\n        });\n    }\n    postAsync(call, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield HttpFunctions.postWithRetryAsync(this.axiosInstance, call, this.functionsConfig, options);\n        });\n    }\n    putAsync(call, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield HttpFunctions.putWithRetryAsync(this.axiosInstance, call, this.functionsConfig, options);\n        });\n    }\n    patchAsync(call, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield HttpFunctions.patchWithRetryAsync(this.axiosInstance, call, this.functionsConfig, options);\n        });\n    }\n    deleteAsync(call, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield HttpFunctions.deleteWithRetryAsync(this.axiosInstance, call, this.functionsConfig, options);\n        });\n    }\n    createCancelToken() {\n        return HttpFunctions.createCancelToken();\n    }\n    getFunctionsConfig() {\n        var _a, _b;\n        return {\n            logErrorsToConsole: (_b = (_a = this.opts) === null || _a === void 0 ? void 0 : _a.logErrorsToConsole) !== null && _b !== void 0 ? _b : true\n        };\n    }\n}\n//# sourceMappingURL=http.service.js.map","export class TestHttpService {\n    constructor(config) {\n        this.response = undefined;\n        this.error = undefined;\n        Object.assign(this, config);\n    }\n    getAsync(call, options) {\n        return this.resolveTestCall();\n    }\n    postAsync(call, options) {\n        return this.resolveTestCall();\n    }\n    putAsync(call, options) {\n        return this.resolveTestCall();\n    }\n    patchAsync(call, options) {\n        return this.resolveTestCall();\n    }\n    deleteAsync(call, options) {\n        return this.resolveTestCall();\n    }\n    createCancelToken() {\n        return {\n            cancel: () => { },\n            token: undefined\n        };\n    }\n    resolveTestCall() {\n        const promise = new Promise((resolve, reject) => {\n            if (this.response) {\n                resolve(this.response);\n            }\n            if (this.error) {\n                reject(this.error);\n            }\n            throw Error(`Missing test data`);\n        });\n        return promise;\n    }\n}\n//# sourceMappingURL=test-http.service.js.map","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    IContentItem,\r\n    IItemQueryConfig,\r\n    IDeliveryNetworkResponse,\r\n    Responses,\r\n    Parameters,\r\n    ClientTypes\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from '../common/base-query.class';\r\n\r\nexport class SingleItemQuery<\r\n    TClientTypes extends ClientTypes,\r\n    TContentItem extends IContentItem = IContentItem\r\n> extends BaseQuery<\r\n    TClientTypes,\r\n    Responses.IViewContentItemResponse<TContentItem, TClientTypes['contentItemType']>,\r\n    IItemQueryConfig,\r\n    Contracts.IViewContentItemContract\r\n> {\r\n    protected _queryConfig: IItemQueryConfig = {};\r\n\r\n    constructor(\r\n        protected config: IDeliveryClientConfig,\r\n        protected queryService: QueryService<TClientTypes>,\r\n        private codename: string\r\n    ) {\r\n        super(config, queryService);\r\n\r\n        if (!codename) {\r\n            throw Error(`'codename' has to be configured for 'SingleItemQuery' query`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates depth of query that affects loading of nested linked items.\r\n     * @param depth Depth of the query (> 0)\r\n     */\r\n    depthParameter(depth: number): this {\r\n        this.parameters.push(new Parameters.DepthParameter(depth));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: IItemQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Language codename\r\n     * @param languageCodename Codename of the language\r\n     */\r\n    languageParameter(languageCodename: TClientTypes['languageCodenames']): this {\r\n        this.parameters.push(new Parameters.LanguageParameter(languageCodename));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to limit the number of elements returned by query.\r\n     * @param elementCodenames Array of element codenames to fetch\r\n     */\r\n    elementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this {\r\n        this.parameters.push(new Parameters.ElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to exclude elements returned by query.\r\n     * @param elementCodenames Array of element codenames to exclude\r\n     */\r\n    excludeElementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this {\r\n        this.parameters.push(new Parameters.ExcludeElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IViewContentItemResponse<TContentItem, TClientTypes['contentItemType']>,\r\n            Contracts.IViewContentItemContract\r\n        >\r\n    > {\r\n        return this.queryService.getSingleItemAsync(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/items/' + this.codename;\r\n\r\n        // add default language is necessry\r\n        this.processDefaultLanguageParameter();\r\n\r\n        //process client level archived item exclusion\r\n        this.processExcludeArchivedItemsParameter();\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IViewContentItemResponse<TContentItem, TClientTypes['contentItemType']> {\r\n        return this.queryService.mappingService.viewContentItemResponse(json);\r\n    }\r\n}\r\n","export class EnumHelper {\r\n    getAllValues(T: any): string[] {\r\n        const allEnumValues: string[] = Object.keys(T).map((key) => T[key]);\r\n        return allEnumValues;\r\n    }\r\n\r\n    getEnumFromValue<T>(T: any, value: string | number): T | undefined {\r\n        try {\r\n            if (!value) {\r\n                return undefined;\r\n            }\r\n\r\n            // we can map back from index number directly\r\n            if (this.isNumeric(value)) {\r\n                return <T>T[value];\r\n            }\r\n\r\n            // for strings, we need to compare each value separately\r\n            const allEnumValues = this.getAllValues(T);\r\n\r\n            const result = allEnumValues.find((m) => m.toLowerCase() === value.toString().toLowerCase());\r\n\r\n            if (!result) {\r\n                return undefined;\r\n            }\r\n\r\n            return result as T;\r\n        } catch (err) {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    private isNumeric(value: any): boolean {\r\n        return !isNaN(parseFloat(value)) && isFinite(value);\r\n    }\r\n}\r\n\r\nexport const enumHelper = new EnumHelper();\r\n","import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    ClientTypes,\r\n    IDeliveryNetworkResponse,\r\n    ITaxonomyGroup,\r\n    ITaxonomyQueryConfig,\r\n    Parameters,\r\n    Responses\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseListingQuery } from '../common/base-listing-query.class';\r\n\r\nexport class TaxonomiesQuery<TClientTypes extends ClientTypes> extends BaseListingQuery<\r\n    TClientTypes,\r\n    ITaxonomyGroup<TClientTypes['taxonomyCodenames']>,\r\n    Responses.IListTaxonomiesResponse<TClientTypes['taxonomyCodenames']>,\r\n    Responses.IListTaxonomiesAllResponse<TClientTypes['taxonomyCodenames']>,\r\n    ITaxonomyQueryConfig,\r\n    Contracts.IListTaxonomyGroupsContract\r\n> {\r\n    /**\r\n     * Taxonomies endpoint URL action\r\n     */\r\n    protected readonly taxonomiesEndpoint: string = 'taxonomies';\r\n\r\n    protected _queryConfig: ITaxonomyQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Limits the number of taxonomies returned by query\r\n     * @param limit Number of taxonomies to load\r\n     */\r\n    limitParameter(limit: number): this {\r\n        this.parameters.push(new Parameters.LimitParameter(limit));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Skips the selected number of taxonomies\r\n     * @param skip Number of taxonomies to skip\r\n     */\r\n    skipParameter(skip: number): this {\r\n        this.parameters.push(new Parameters.SkipParameter(skip));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListTaxonomiesResponse<TClientTypes['taxonomyCodenames']>,\r\n            Contracts.IListTaxonomyGroupsContract\r\n        >\r\n    > {\r\n        return this.queryService.getTaxonomies(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/' + this.taxonomiesEndpoint;\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IListTaxonomiesResponse<TClientTypes['taxonomyCodenames']> {\r\n        return this.queryService.mappingService.listTaxonomiesResponse(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: ITaxonomyGroup<TClientTypes['taxonomyCodenames']>[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListTaxonomiesResponse<TClientTypes['taxonomyCodenames']>,\r\n            Contracts.IListTaxonomyGroupsContract\r\n        >[]\r\n    ): Responses.IListTaxonomiesAllResponse<TClientTypes['taxonomyCodenames']> {\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n}\r\n","/**\r\n* Represents codename of Kontent.ai element types\r\n*/\r\nexport enum ElementType {\r\n    Text = 'text',\r\n    Number = 'number',\r\n    ModularContent = 'modular_content',\r\n    Asset = 'asset',\r\n    DateTime = 'date_time',\r\n    RichText = 'rich_text',\r\n    MultipleChoice = 'multiple_choice',\r\n    UrlSlug = 'url_slug',\r\n    Taxonomy = 'taxonomy',\r\n    Custom = 'custom',\r\n    Unknown = 'unknown'\r\n}\r\n","import { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    continuationTokenHeaderName,\r\n    IGroupedNetworkResponse,\r\n    IKontentListAllResponse,\r\n    IKontentListResponse,\r\n    IDeliveryNetworkResponse,\r\n    IListAllQueryConfig,\r\n    IQueryConfig,\r\n    IContentItem,\r\n    ClientTypes,\r\n    IUsedInItemRecord,\r\n    IContentType,\r\n    ITaxonomyGroup,\r\n    IContentItemDelta,\r\n    ILanguage\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from './base-query.class';\r\n\r\ntype ListingRecord<TClientTypes extends ClientTypes> =\r\n    | IContentItem\r\n    | IContentItemDelta\r\n    | IUsedInItemRecord<TClientTypes>\r\n    | IContentType<TClientTypes['contentTypeCodenames']>\r\n    | ILanguage<TClientTypes['languageCodenames']>\r\n    | ITaxonomyGroup<TClientTypes['taxonomyCodenames']>;\r\n\r\nexport abstract class BaseListingQuery<\r\n    TClientTypes extends ClientTypes,\r\n    TRecord extends ListingRecord<TClientTypes>,\r\n    TResponse extends IKontentListResponse,\r\n    TAllResponse extends IKontentListAllResponse,\r\n    TQueryConfig extends IQueryConfig,\r\n    TContract\r\n> extends BaseQuery<TClientTypes, TResponse, TQueryConfig, TContract> {\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService<TClientTypes>) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Sets continuation token header\r\n     */\r\n    withContinuationToken(token: string): this {\r\n        // remove previous continuation token if there is any\r\n        let queryHeaders = this._queryConfig.customHeaders ?? [];\r\n        queryHeaders = queryHeaders.filter((m) => m.header !== continuationTokenHeaderName);\r\n\r\n        this._queryConfig.customHeaders = queryHeaders;\r\n\r\n        this.withHeaders([\r\n            {\r\n                header: continuationTokenHeaderName,\r\n                value: token\r\n            }\r\n        ]);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Query to get all items. Uses paging data and may execute multiple HTTP requests depending on number of items\r\n     */\r\n    toAllPromise(\r\n        queryAllConfig?: IListAllQueryConfig<TResponse, TContract>\r\n    ): Promise<IGroupedNetworkResponse<TAllResponse>> {\r\n        return this.queryService.getListAllResponse<TResponse, TAllResponse, TContract>({\r\n            page: 1,\r\n            listQueryConfig: queryAllConfig,\r\n            allResponseFactory: (items, responses) => {\r\n                const response = this.allResponseFactory(items, responses);\r\n\r\n                return {\r\n                    data: response,\r\n                    responses: responses\r\n                };\r\n            },\r\n            getResponse: (nextPageUrl, continuationToken) => {\r\n                if (nextPageUrl) {\r\n                    this.withCustomUrl(nextPageUrl);\r\n                }\r\n                if (continuationToken) {\r\n                    this.withContinuationToken(continuationToken);\r\n                }\r\n\r\n                return this.toPromise();\r\n            }\r\n        });\r\n    }\r\n\r\n    protected abstract allResponseFactory(\r\n        items: TRecord[],\r\n        responses: IDeliveryNetworkResponse<TResponse, TContract>[]\r\n    ): TAllResponse;\r\n}\r\n","export * from './delivery-query.service';\r\nexport * from './mapping.service';\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4245);\n"],"names":["root","factory","exports","module","define","amd","self","continuationTokenHeaderName","waitForLoadingNewContentHeader","sdkVersionHeader","staleContentHeaderName","constructor","config","httpService","sdkInfo","mappingService","defaultBaseDeliveryApiUrl","defaultPreviewDeliveryApiUrl","getUrl","action","queryConfig","options","this","proxy","advancedProxyUrlResolver","queryParameters","queryString","urlHelper","addOptionsToUrl","domain","getDomain","environmentId","getBaseUrl","getHeaders","additionalHeaders","headers","push","getSdkIdHeader","globalHeaders","getQueryHeaders","isPreviewModeEnabled","isSecuredModeEnabled","Error","previewApiKey","getAuthorizationHeader","secureApiKey","shouldAddWaitForLoadingNewContentHeader","header","value","postResponseAsync","url","body","serviceConfig","postAsync","cancelToken","responseType","retryStrategy","error","mapDeliveryError","getResponseAsync","getAsync","mapNetworkResponse","data","response","hasStaleContent","getHasStaleContent","xContinuationToken","getContinuationToken","undefined","usePreviewMode","defaultQueryConfig","customHeaders","waitForLoadingNewContent","useSecuredMode","basePreviewUrl","baseUrl","key","host","name","version","axiosError","isAxiosError","deliveryErrorData","error_code","DeliveryError","errorCode","message","specificCode","specific_code","requestId","request_id","hasStaleContentHeader","find","m","toLowerCase","toString","ElementQuery","BaseQuery","queryService","typeCodename","elementCodename","super","_queryConfig","toPromise","getElementAsync","resolveUrlInternal","map","json","viewContentTypeElementResponse","MultipleTypeQuery","BaseListingQuery","elementsParameter","elementCodenames","parameters","Parameters","ElementsParameter","excludeElementsParameter","ExcludeElementsParameter","limitParameter","limit","LimitParameter","skipParameter","skip","SkipParameter","getMultipleTypes","listContentTypesResponse","allResponseFactory","items","responses","typeMapper","TypeMapper","languageMapper","LanguageMapper","itemMapper","ItemMapper","taxonomyMapper","TaxonomyMapper","usedInMapper","UsedInMapper","genericElementMapper","GenericElementMapper","syncMapper","SyncMapper","usedInResponse","mapUsedInItem","listLanguagesResponse","mapMultipleLanguages","pagination","mapPagination","mapMultipleTypes","viewContentTypeResponse","type","mapSingleType","itemsFeedResponse","itemsResult","mapItems","linkedItems","Object","values","modular_content","mainItems","viewContentItemResponse","itemResult","mapSingleItemFromResponse","item","listContentItemsResponse","mapMultipleItemsFromResponse","viewTaxonomyResponse","taxonomy","mapTaxonomy","system","terms","listTaxonomiesResponse","mapTaxonomies","taxonomies","mapElement","initializeContentSync","mapContentItemDelta","syncChanges","paginationContract","count","nextPage","next_page","totalCount","total_count","ImageUrlTransformationBuilder","SingleTypeQuery","getSingleType","SyncChangesQuery","console","warn","mapType","types","elements","codename","id","lastModified","last_modified","getOwnPropertyNames","forEach","elementName","typeElement","rawOptions","Array","isArray","rawOption","taxonomyGroup","taxonomy_group","CodenameHelper","escapeCodenameInCodenameIndexer","codenameHelper","withCustomParameter","QueryParameter","withParameter","parameter","withParameters","withHeaders","queryHeaders","withHeader","withCustomUrl","customUrl","getParameters","processDefaultLanguageParameter","defaultLanguage","getParam","includes","LanguageParameter","processExcludeArchivedItemsParameter","excludeArchivedItems","Filters","NotEqualsFilter","DeliveryClient","MultipleItemsQuery","BaseItemListingQuery","includeTotalCountParameter","IncludeTotalCountParameter","TypeFilter","collection","CollectionFilter","collections","depthParameter","depth","DepthParameter","languageParameter","languageCodename","getMultipleItems","linkItems","allContentItems","filter","linkItemsInRte","UsedInQuery","setup","getUsedIn","entity","imageUrl","queryParams","automaticFormatValue","withCustomParam","param","CustomParameter","withDpr","dpr","withRectangleCrop","x","y","width","height","join","withFocalPointCrop","z","withFitMode","withAutomaticFormat","backupFormat","withFormat","fitMode","withCompression","compression","withQuality","quality","format","withHeight","withWidth","getParams","getQueryString","query","indexOf","mapElements","processedItem","processedItems","dataToMap","preparedItems","processingStartedForCodenames","preparedItem","itemInstance","rawItem","elementWrapper","rawElement","element","mappedElement","elementType","enumHelper","getEnumFromValue","ElementType","ModularContent","mapLinkedItemsElement","Text","mapTextElement","Asset","mapAssetsElement","Number","mapNumberElement","MultipleChoice","mapMultipleChoiceElement","DateTime","mapDateTimeElement","RichText","mapRichTextElement","UrlSlug","mapUrlSlugElement","Taxonomy","mapTaxonomyElement","Custom","mapCustomElement","mapUnknowElement","richTextLinkedItems","richTextLinkedItemsCodenames","rawModularContentCodenamesMatches","matchAll","rawModularContentCodenamesSorted","from","reduce","acc","match","groups","rawModularContentCodenames","sort","a","b","preparedData","canMapLinkedItems","existingLinkedItem","getOrSaveLinkedItemForElement","mappedLinkedItemResult","richTextImagesResult","getRichTextImages","images","links","mapRichTextLinks","richTextImages","richTextHtml","getRichTextHtml","imageUrlRecords","linkedItemCodenames","buildElement","displayTimeZone","display_timezone","assetContracts","assets","assetContract","renditions","assetUrl","assetsDomain","deliveryUrlHelper","replaceAssetDomain","renditionPresetKey","keys","rendition","renditionToBeApplied","defaultRenditionPreset","finalUrl","asset","Unknown","elementResolver","elementResolverValue","linkedItem","mappingStartedForCodenames","escapedCodename","mappedLinkedItem","linksJson","linkId","linkRaw","urlSlug","url_slug","richTextImageRecords","richTextImageRecord","newUrl","originalUrl","replace","RegExp","imagesJson","imageId","imageRaw","description","image_id","valueFactory","linkedItemsReferenceHandler","LanguagesQuery","endpoint","getLanguages","language","workflow","workflowStep","workflow_step","languages","mapLanguage","ItemsFeedQuery","getItemsFeed","canLinkItems","linkFeedItems","allAvailableContentItems","disableItemLinking","itemDeltaContract","systemContract","changeType","change_type","timestamp","sitemapLocations","sitemap_locations","InitializeSyncQuery","initializeSync","taxonomySystem","taxonomyTerms","mapTaxonomyTerms","mappedTaxonomies","termsArray","length","mappedTermsArray","mappedTerms","defaultValue","getParamValueForSystemFilter","i","EmptyFilter","trim","NotEmptyFilter","EqualsFilter","getParamValue","AllFilter","AnyFilter","ContainsFilter","GreaterThanFilter","GreaterThanOrEqualFilter","InFilter","NotInFilter","LessThanFilter","LessThanOrEqualFilter","RangeFilter","lowerValue","higherValue","lowerVal","higherVal","QueryService","BaseDeliveryQueryService","getSingleItemAsync","getTaxonomy","getTaxonomies","getListAllResponse","getListAllResponseInternalAsync","page","resolvedResponses","getResponse","nextPageUrl","continuationToken","listQueryConfig","prev","current","pages","delayBetweenRequests","sleep","responseFetched","ms","Promise","resolve","setTimeout","DeliveryUrlHelper","originalAssetUrl","customDomain","getPathname","URL","pathname","elementMapper","ElementMapper","mapResult","mappedMainItems","mappedLinkedItems","itemsToResolve","createContentItem","mapItem","result","OrderParameter","sortOrder","MappingService","HttpService","SingleItemQuery","itemsFeed","TaxonomyQuery","TaxonomiesQuery","assetUsedIn","assetCodename","itemUsedIn","itemCodename","taxonomyCodename","taxonomiesEndpoint","emptyFilter","notEmptyFilter","equalsFilter","notEqualsFilter","allFilter","anyFilter","containsFilter","greaterThanFilter","greaterThanOrEqualFilter","inFilter","notInFilter","lessThanFilter","lessThanOrEqualFilter","rangeFilter","orderParameter","orderByDescending","orderByAscending","elementKey","linkedItemElement","orderedLinkedItems","linkedItemCodename","richTextElement","UrlHelper","HeaderHelper","info","headerHelper","extractHeadersFromAxiosResponse","headerKey","RetryHelper","requestCancelledMessagePrefix","retryAfterHeaderName","defaultRetryStatusCodes","defaultRetryStrategy","addJitter","deltaBackoffMs","maxAttempts","canRetryError","canRetryErrorDefault","getRetryErrorResult","_a","_b","_c","startsWith","canRetry","retryInMs","maxRetries","retryAttempt","retryResult","tryGetRetryAfterInMsFromError","getNextWaitTimeMs","getRetryStrategyFromStrategyOptions","retryOptions","canRetryInTime","startTime","maxCumulativeWaitTimeMs","start","getTime","differenceInMs","Date","retryAttempts","Math","pow","to","randomNumberFromInterval","tryGetAxiosError","statusCode","getStatusCodeFromError","canRetryStatusCode","retryValueHeader","useRetryForResponseCodes","status","originalError","min","max","floor","random","retryHelper","bind","fn","thisArg","apply","arguments","prototype","getPrototypeOf","iterator","toStringTag","Symbol","kindOf","cache","create","thing","str","call","slice","kindOfTest","typeOfTest","isUndefined","isBuffer","val","isFunction","isArrayBuffer","isString","isNumber","isObject","isPlainObject","isDate","isFile","isBlob","isFileList","isURLSearchParams","isReadableStream","isRequest","isResponse","isHeaders","obj","allOwnKeys","l","len","findKey","_key","_global","globalThis","window","global","isContextDefined","context","isTypedArray","TypedArray","Uint8Array","isHTMLForm","hasOwnProperty","prop","isRegExp","reduceDescriptors","reducer","descriptors","getOwnPropertyDescriptors","reducedDescriptors","descriptor","ret","defineProperties","isAsyncFn","_setImmediate","setImmediateSupported","setImmediate","postMessageSupported","postMessage","token","callbacks","addEventListener","source","shift","cb","asap","queueMicrotask","process","nextTick","isFormData","kind","FormData","append","isArrayBufferView","ArrayBuffer","isView","buffer","isBoolean","isEmptyObject","e","isStream","pipe","merge","caseless","assignValue","targetKey","extend","stripBOM","content","charCodeAt","inherits","superConstructor","props","defineProperty","assign","toFlatObject","sourceObj","destObj","propFilter","merged","endsWith","searchString","position","String","lastIndex","toArray","arr","forEachEntry","_iterator","next","done","pair","regExp","matches","exec","hasOwnProp","freezeMethods","enumerable","writable","set","toObjectSet","arrayOrString","delimiter","split","toCamelCase","p1","p2","toUpperCase","noop","toFiniteNumber","isFinite","isSpecCompliantForm","toJSONObject","stack","visit","target","reducedValue","isThenable","then","catch","isIterable","AxiosError","code","request","captureStackTrace","utils","toJSON","number","fileName","lineNumber","columnNumber","customProps","cause","isVisitable","removeBrackets","renderKey","path","dots","concat","predicates","test","formData","TypeError","metaTokens","indexes","option","visitor","defaultVisitor","useBlob","Blob","convertValue","toISOString","Buffer","JSON","stringify","some","isFlatArray","el","index","exposedHelpers","build","pop","encode","charMap","encodeURIComponent","AxiosURLSearchParams","params","_pairs","encoder","_encode","buildURL","serialize","serializeFn","serializedParams","hashmarkIndex","handlers","use","fulfilled","rejected","synchronous","runWhen","eject","clear","h","silentJSONParsing","forcedJSONParsing","clarifyTimeoutError","isBrowser","classes","URLSearchParams","protocols","hasBrowserEnv","document","_navigator","navigator","hasStandardBrowserEnv","product","hasStandardBrowserWebWorkerEnv","WorkerGlobalScope","importScripts","origin","location","href","buildPath","isNumericKey","isLast","arrayToObject","entries","parsePropPath","defaults","transitional","adapter","transformRequest","contentType","getContentType","hasJSONContentType","isObjectPayload","setContentType","platform","helpers","isNode","toURLEncodedForm","formSerializer","_FormData","env","rawValue","parse","stringifySafely","transformResponse","JSONRequested","strictJSONParsing","ERR_BAD_RESPONSE","timeout","xsrfCookieName","xsrfHeaderName","maxContentLength","maxBodyLength","validateStatus","common","method","ignoreDuplicateOf","$internals","normalizeHeader","normalizeValue","matchHeaderValue","isHeaderNameFilter","AxiosHeaders","valueOrRewrite","rewrite","setHeader","_value","_header","_rewrite","lHeader","setHeaders","rawHeaders","parsed","line","substring","parseHeaders","dest","entry","get","parser","tokens","tokensRE","parseTokens","has","matcher","deleted","deleteHeader","normalize","normalized","w","char","formatHeader","targets","asStrings","getSetCookie","first","computed","accessor","accessors","defineAccessor","accessorName","methodName","arg1","arg2","arg3","configurable","buildAccessors","mapped","headerValue","transformData","fns","isCancel","__CANCEL__","CanceledError","ERR_CANCELED","settle","reject","ERR_BAD_REQUEST","progressEventReducer","listener","isDownloadStream","freq","bytesNotified","_speedometer","samplesCount","bytes","timestamps","firstSampleTS","head","tail","chunkLength","now","startedAt","bytesCount","passed","round","lastArgs","timer","threshold","invoke","args","clearTimeout","loaded","total","lengthComputable","progressBytes","rate","progress","estimated","event","progressEventDecorator","throttled","asyncDecorator","isMSIE","protocol","port","userAgent","write","expires","secure","cookie","toGMTString","read","decodeURIComponent","remove","buildFullPath","baseURL","requestedURL","allowAbsoluteUrls","isRelativeUrl","relativeURL","combineURLs","headersToObject","mergeConfig","config1","config2","getMergedValue","mergeDeepProperties","valueFromConfig2","defaultToConfig2","mergeDirectKeys","mergeMap","paramsSerializer","timeoutMessage","withCredentials","withXSRFToken","onUploadProgress","onDownloadProgress","decompress","beforeRedirect","transport","httpAgent","httpsAgent","socketPath","responseEncoding","configValue","newConfig","auth","btoa","username","password","unescape","Boolean","isURLSameOrigin","xsrfValue","cookies","XMLHttpRequest","_config","resolveConfig","requestData","requestHeaders","onCanceled","uploadThrottled","downloadThrottled","flushUpload","flushDownload","unsubscribe","signal","removeEventListener","onloadend","responseHeaders","getAllResponseHeaders","err","responseText","statusText","open","onreadystatechange","readyState","responseURL","onabort","ECONNABORTED","onerror","ERR_NETWORK","ontimeout","timeoutErrorMessage","ETIMEDOUT","setRequestHeader","upload","cancel","abort","subscribe","aborted","parseProtocol","send","signals","controller","AbortController","reason","streamChunk","chunk","chunkSize","byteLength","end","pos","trackStream","stream","onProgress","onFinish","async","iterable","asyncIterator","reader","getReader","readStream","readBytes","_onFinish","ReadableStream","pull","close","loadedBytes","enqueue","return","highWaterMark","isFetchSupported","fetch","Request","Response","isReadableStreamSupported","encodeText","TextEncoder","arrayBuffer","supportsRequestStream","duplexAccessed","hasContentType","duplex","supportsResponseStream","resolvers","res","_","ERR_NOT_SUPPORT","knownAdapters","http","xhr","fetchOptions","composedSignal","toAbortSignal","requestContentLength","getContentLength","size","_request","getBodyLength","resolveBodyLength","contentTypeHeader","flush","isCredentialsSupported","credentials","isStreamResponse","responseContentLength","responseData","renderReason","isResolvedHandle","adapters","nameOrAdapter","rejectedReasons","reasons","state","s","throwIfCancellationRequested","throwIfRequested","dispatchRequest","VERSION","validators","deprecatedWarnings","validator","formatMessage","opt","desc","opts","ERR_DEPRECATED","spelling","correctSpelling","assertOptions","schema","allowUnknown","ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","Axios","instanceConfig","interceptors","configOrUrl","dummy","boolean","function","withXsrfToken","contextHeaders","requestInterceptorChain","synchronousRequestInterceptors","interceptor","unshift","responseInterceptorChain","promise","chain","onFulfilled","onRejected","getUri","generateHTTPMethod","isForm","CancelToken","executor","resolvePromise","_listeners","onfulfilled","_resolve","splice","c","HttpStatusCode","Continue","SwitchingProtocols","Processing","EarlyHints","Ok","Created","Accepted","NonAuthoritativeInformation","NoContent","ResetContent","PartialContent","MultiStatus","AlreadyReported","ImUsed","MultipleChoices","MovedPermanently","Found","SeeOther","NotModified","UseProxy","Unused","TemporaryRedirect","PermanentRedirect","BadRequest","Unauthorized","PaymentRequired","Forbidden","NotFound","MethodNotAllowed","NotAcceptable","ProxyAuthenticationRequired","RequestTimeout","Conflict","Gone","LengthRequired","PreconditionFailed","PayloadTooLarge","UriTooLong","UnsupportedMediaType","RangeNotSatisfiable","ExpectationFailed","ImATeapot","MisdirectedRequest","UnprocessableEntity","Locked","FailedDependency","TooEarly","UpgradeRequired","PreconditionRequired","TooManyRequests","RequestHeaderFieldsTooLarge","UnavailableForLegalReasons","InternalServerError","NotImplemented","BadGateway","ServiceUnavailable","GatewayTimeout","HttpVersionNotSupported","VariantAlsoNegotiates","InsufficientStorage","LoopDetected","NotExtended","NetworkAuthenticationRequired","axios","createInstance","defaultConfig","instance","toFormData","Cancel","all","promises","spread","callback","payload","formToJSON","getAdapter","default","HttpDebugger","debugStartHttpRequest","debugSuccessHttpRequest","debugRetryHttpRequest","httpDebugger","__awaiter","_arguments","P","generator","step","getWithRetryAsync","functionsConfig","retryStrategyOptions","runWithRetryAsync","axiosResponse","getHeadersJson","rawResponse","postWithRetryAsync","post","putWithRetryAsync","put","patchWithRetryAsync","patch","deleteWithRetryAsync","delete","createCancelToken","canceler","cancelMessage","logErrorsToConsole","addContentTypeHeader","headerJson","axiosInstance","axiosRequestConfig","getFunctionsConfig","putAsync","patchAsync","deleteAsync","TestHttpService","resolveTestCall","EnumHelper","getAllValues","T","isNumeric","isNaN","parseFloat","withContinuationToken","toAllPromise","queryAllConfig","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","d","definition","o","r"],"sourceRoot":""}