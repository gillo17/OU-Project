import { Contracts } from '../../contracts';
import { IDeliveryClientConfig } from '../../config';
import { ClientTypes, IDeliveryNetworkResponse, ILanguage, ILanguagesQueryConfig, Responses } from '../../models';
import { QueryService } from '../../services';
import { BaseListingQuery } from '../common/base-listing-query.class';
export declare class LanguagesQuery<TClientTypes extends ClientTypes> extends BaseListingQuery<TClientTypes, ILanguage<TClientTypes['languageCodenames']>, Responses.IListLanguagesResponse<TClientTypes['languageCodenames']>, Responses.IListLanguagesAllResponse<TClientTypes['languageCodenames']>, ILanguagesQueryConfig, Contracts.IListLanguagesContract> {
    protected config: IDeliveryClientConfig;
    protected queryService: QueryService<TClientTypes>;
    /**
     * Endpoint
     */
    protected readonly endpoint: string;
    protected _queryConfig: ILanguagesQueryConfig;
    constructor(config: IDeliveryClientConfig, queryService: QueryService<TClientTypes>);
    /**
     * Limits the number of taxonomies returned by query
     * @param limit Number of taxonomies to load
     */
    limitParameter(limit: number): this;
    /**
     * Skips the selected number of taxonomies
     * @param skip Number of taxonomies to skip
     */
    skipParameter(skip: number): this;
    toPromise(): Promise<IDeliveryNetworkResponse<Responses.IListLanguagesResponse<TClientTypes['languageCodenames']>, Contracts.IListLanguagesContract>>;
    getUrl(): string;
    /**
     * Used to configure query
     * @param queryConfig Query configuration
     */
    queryConfig(queryConfig: ILanguagesQueryConfig): this;
    map(json: any): Responses.IListLanguagesResponse<TClientTypes['languageCodenames']>;
    protected allResponseFactory(items: ILanguage<TClientTypes['languageCodenames']>[], responses: IDeliveryNetworkResponse<Responses.IListLanguagesResponse<TClientTypes['languageCodenames']>, Contracts.IListLanguagesContract>[]): Responses.IListLanguagesAllResponse<TClientTypes['languageCodenames']>;
}
