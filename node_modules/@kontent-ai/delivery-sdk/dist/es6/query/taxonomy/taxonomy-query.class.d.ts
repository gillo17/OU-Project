import { Contracts } from '../../contracts';
import { IDeliveryClientConfig } from '../../config';
import { ClientTypes, IDeliveryNetworkResponse, ITaxonomyQueryConfig, Responses } from '../../models';
import { QueryService } from '../../services';
import { BaseQuery } from '../common/base-query.class';
export declare class TaxonomyQuery<TClientTypes extends ClientTypes> extends BaseQuery<TClientTypes, Responses.IViewTaxonomyResponse<TClientTypes['taxonomyCodenames']>, ITaxonomyQueryConfig, Contracts.IViewTaxonomyGroupContract> {
    protected config: IDeliveryClientConfig;
    protected queryService: QueryService<TClientTypes>;
    private taxonomyCodename;
    /**
     * Taxonomies endpoint URL action
     */
    protected readonly taxonomiesEndpoint: string;
    protected _queryConfig: ITaxonomyQueryConfig;
    constructor(config: IDeliveryClientConfig, queryService: QueryService<TClientTypes>, taxonomyCodename: string);
    toPromise(): Promise<IDeliveryNetworkResponse<Responses.IViewTaxonomyResponse<TClientTypes['taxonomyCodenames']>, Contracts.IViewTaxonomyGroupContract>>;
    getUrl(): string;
    map(json: any): Responses.IViewTaxonomyResponse<TClientTypes['taxonomyCodenames']>;
}
