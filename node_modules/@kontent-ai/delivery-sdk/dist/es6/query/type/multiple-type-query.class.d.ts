import { Contracts } from '../../contracts';
import { IDeliveryClientConfig } from '../../config';
import { ClientTypes, IContentType, IContentTypeQueryConfig, IDeliveryNetworkResponse, Responses } from '../../models';
import { QueryService } from '../../services';
import { BaseListingQuery } from '../common/base-listing-query.class';
export declare class MultipleTypeQuery<TClientTypes extends ClientTypes> extends BaseListingQuery<TClientTypes, IContentType<TClientTypes['contentTypeCodenames']>, Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']>, Responses.IListContentTypesAllResponse<TClientTypes['contentTypeCodenames']>, IContentTypeQueryConfig, Contracts.IListContentTypeContract> {
    protected config: IDeliveryClientConfig;
    protected queryService: QueryService<TClientTypes>;
    protected _queryConfig: IContentTypeQueryConfig;
    constructor(config: IDeliveryClientConfig, queryService: QueryService<TClientTypes>);
    /**
     * Used to limit the number of elements returned by query.
     * @param elementCodenames Array of element codenames to fetch
     */
    elementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this;
    /**
     * Used to exclude elements returned by query.
     * @param elementCodenames Array of element codenames to exclude
     */
    excludeElementsParameter(elementCodenames: TClientTypes['elementCodenames'][]): this;
    /**
     * Limits the number of taxonomies returned by query
     * @param limit Number of taxonomies to load
     */
    limitParameter(limit: number): this;
    /**
     * Skips the selected number of taxonomies
     * @param skip Number of taxonomies to skip
     */
    skipParameter(skip: number): this;
    toPromise(): Promise<IDeliveryNetworkResponse<Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']>, Contracts.IListContentTypeContract>>;
    getUrl(): string;
    map(json: any): Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']>;
    protected allResponseFactory(items: IContentType<TClientTypes['contentTypeCodenames']>[], responses: IDeliveryNetworkResponse<Responses.IListContentTypesResponse<TClientTypes['contentTypeCodenames']>, Contracts.IListContentTypeContract>[]): Responses.IListContentTypesAllResponse<TClientTypes['contentTypeCodenames']>;
}
