import { Contracts } from '../../contracts';
import { IDeliveryClientConfig } from '../../config';
import { ClientTypes, IContentTypeQueryConfig, IDeliveryNetworkResponse, Responses } from '../../models';
import { QueryService } from '../../services';
import { BaseQuery } from '../common/base-query.class';
export declare class SingleTypeQuery<TClientTypes extends ClientTypes> extends BaseQuery<TClientTypes, Responses.IViewContentTypeResponse<TClientTypes['contentTypeCodenames']>, IContentTypeQueryConfig, Contracts.IViewContentTypeContract> {
    protected config: IDeliveryClientConfig;
    protected queryService: QueryService<TClientTypes>;
    private typeCodename;
    protected _queryConfig: IContentTypeQueryConfig;
    constructor(config: IDeliveryClientConfig, queryService: QueryService<TClientTypes>, typeCodename: string);
    toPromise(): Promise<IDeliveryNetworkResponse<Responses.IViewContentTypeResponse<TClientTypes['contentTypeCodenames']>, Contracts.IViewContentTypeContract>>;
    getUrl(): string;
    map(json: any): Responses.IViewContentTypeResponse<TClientTypes['contentTypeCodenames']>;
}
