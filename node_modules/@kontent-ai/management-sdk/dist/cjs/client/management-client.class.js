"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagementClient = void 0;
const core_sdk_1 = require("@kontent-ai/core-sdk");
const queries_1 = require("../queries");
const sdk_info_generated_1 = require("../sdk-info.generated");
const services_1 = require("../services");
const environments_1 = require("../queries/environments");
const delete_environment_query_1 = require("../queries/environments/delete-environment-query");
const clone_environment_query_1 = require("../queries/environments/clone-environment-query");
const mark_environment_as_production_query_1 = require("../queries/environments/mark-environment-as-production-query");
const modify_environment_query_1 = require("../queries/environments/modify-environment-query");
class ManagementClient {
    constructor(config) {
        this.config = config;
        this.mappingService = new services_1.MappingService();
        this.earlyAccess = {
            filterLanguageVariants: () => {
                return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.FilterLanguageVariantsQuery(config, queryService, data));
            }
        };
        const httpService = config.httpService ? config.httpService : new core_sdk_1.HttpService();
        this.queryService = new services_1.ManagementQueryService(config, httpService, {
            host: sdk_info_generated_1.sdkInfo.host,
            name: sdk_info_generated_1.sdkInfo.name,
            version: sdk_info_generated_1.sdkInfo.version
        });
        this.httpService = httpService;
    }
    createCancelToken() {
        return this.httpService.createCancelToken();
    }
    post() {
        return new queries_1.ActionQuery(this.config, this.queryService, (config, queryService, action) => new queries_1.DataQuery(config, queryService, (nConfig, nQueryService, data) => new queries_1.PostQuery(nConfig, nQueryService, action, data)));
    }
    patch() {
        return new queries_1.ActionQuery(this.config, this.queryService, (config, queryService, action) => new queries_1.DataQuery(config, queryService, (nConfig, nQueryService, data) => new queries_1.PatchQuery(nConfig, nQueryService, action, data)));
    }
    put() {
        return new queries_1.ActionQuery(this.config, this.queryService, (config, queryService, action) => new queries_1.DataQuery(config, queryService, (nConfig, nQueryService, data) => new queries_1.PutQuery(nConfig, nQueryService, action, data)));
    }
    delete() {
        return new queries_1.ActionQuery(this.config, this.queryService, (config, queryService, action) => new queries_1.DeleteQuery(config, queryService, action));
    }
    get() {
        return new queries_1.ActionQuery(this.config, this.queryService, (config, queryService, action) => new queries_1.GetQuery(config, queryService, action));
    }
    createNewVersionOfLanguageVariant() {
        return new queries_1.ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new queries_1.LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new queries_1.CreateNewVersionOfLanguageVariantQuery(nConfig, nQueryService, contentItemIdentifier, languageIdentifier)));
    }
    unpublishLanguageVariant() {
        return new queries_1.ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new queries_1.LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new queries_1.DataQueryOptional(nConfig, nQueryService, (pConfig, pQueryService, data) => new queries_1.UnpublishLanguageVariantQuery(pConfig, pQueryService, contentItemIdentifier, languageIdentifier, data))));
    }
    cancelSheduledPublishingOfLanguageVariant() {
        return new queries_1.ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new queries_1.LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new queries_1.CancelScheduledPublishingOfLanguageVariantQuery(nConfig, nQueryService, contentItemIdentifier, languageIdentifier)));
    }
    cancelSheduledUnpublishingOfLanguageVariant() {
        return new queries_1.ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new queries_1.LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new queries_1.CancelScheduledUnpublishingOfLanguageVariantQuery(nConfig, nQueryService, contentItemIdentifier, languageIdentifier)));
    }
    changeWorkflowOfLanguageVariant() {
        return new queries_1.ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new queries_1.LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new queries_1.DataQuery(nConfig, nQueryService, (mConfig, mQueryservice, data) => {
            return new queries_1.ChangeWorkflowOfLanguageOrVariantQuery(config, queryService, contentItemIdentifier, languageIdentifier, data);
        })));
    }
    listWorkflows() {
        return new queries_1.ListWorkflowsQuery(this.config, this.queryService);
    }
    deleteWorkflow() {
        return new queries_1.WorkflowIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DeleteWorkflowQuery(config, queryService, identifier));
    }
    addWorkflow() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.AddWorkflowQuery(config, queryService, data));
    }
    updateWorkflow() {
        return new queries_1.WorkflowIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DataQuery(config, queryService, (nConfig, nQueryService, data) => new queries_1.UpdateWorkflowQuery(nConfig, nQueryService, data, identifier)));
    }
    publishLanguageVariant() {
        return new queries_1.ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new queries_1.LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new queries_1.DataQueryOptional(nConfig, nQueryService, (pConfig, pQueryService, data) => new queries_1.PublishLanguageVariantQuery(pConfig, pQueryService, contentItemIdentifier, languageIdentifier, data))));
    }
    listContentTypeSnippets() {
        return new queries_1.ListContentTypeSnippetsQuery(this.config, this.queryService);
    }
    viewContentTypeSnippet() {
        return new queries_1.ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.ViewContentTypeSnippetQuery(config, queryService, identifier));
    }
    deleteContentTypeSnippet() {
        return new queries_1.ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DeleteContentTypeSnippetQuery(config, queryService, identifier));
    }
    addContentTypeSnippet() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.AddContentTypeSnippetQuery(config, queryService, data));
    }
    viewLanguageVariant() {
        return new queries_1.ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new queries_1.LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new queries_1.ViewLanguageVariantQuery(nConfig, nQueryService, contentItemIdentifier, languageIdentifier)));
    }
    upsertLanguageVariant() {
        return new queries_1.ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new queries_1.LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new queries_1.DataQuery(nConfig, nQueryService, (mConfig, mQueryService, elements) => new queries_1.UpsertLanguageVariantQuery(mConfig, mQueryService, contentItemIdentifier, languageIdentifier, elements))));
    }
    deleteLanguageVariant() {
        return new queries_1.ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new queries_1.LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new queries_1.DeleteLanguageVariantQuery(nConfig, nQueryService, contentItemIdentifier, languageIdentifier)));
    }
    startEnvironmentValidation() {
        return new queries_1.StartEnvironmentValidationQuery(this.config, this.queryService);
    }
    checkEnvironmentValidation() {
        return new queries_1.TaskIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.CheckEnvironmentValidationQuery(config, queryService, identifier));
    }
    listEnvironmentValidationIssues() {
        return new queries_1.TaskIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.ListEnvironmentValidationIssuesQuery(config, queryService, identifier));
    }
    deleteContentType() {
        return new queries_1.ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DeleteContentTypeQuery(config, queryService, identifier));
    }
    addContentType() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.AddContentTypeQuery(config, queryService, data));
    }
    modifyContentTypeSnippet() {
        return new queries_1.ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DataQuery(config, queryService, (nConfig, nQueryService, data) => new queries_1.ModifyContentTypeSnippetQuery(nConfig, nQueryService, identifier, data)));
    }
    modifyContentType() {
        return new queries_1.ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DataQuery(config, queryService, (nConfig, nQueryService, data) => new queries_1.ModifyContentTypeQuery(nConfig, nQueryService, identifier, data)));
    }
    modifyTaxonomy() {
        return new queries_1.TaxonomyIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DataQuery(config, queryService, (nConfig, nQueryService, data) => new queries_1.ModifyTaxonomyQuery(nConfig, nQueryService, identifier, data)));
    }
    viewContentType() {
        return new queries_1.ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.ViewContentTypeQuery(config, queryService, identifier));
    }
    listContentTypes() {
        return new queries_1.ListContentTypesQuery(this.config, this.queryService);
    }
    listAssetRenditions() {
        return new queries_1.AssetIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.ListAssetRenditionsQuery(config, queryService, identifier));
    }
    addAssetRendition() {
        return new queries_1.AssetIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DataQuery(config, queryService, (nConfig, nQueryService, data) => new queries_1.AddAssetRenditionQuery(nConfig, nQueryService, identifier, data)));
    }
    modifyAssetRendition() {
        return new queries_1.AssetIdentifierQuery(this.config, this.queryService, (config, queryService, assetIdentifier) => new queries_1.RenditionIdentifierQuery(config, queryService, (mConfig, mQueryService, renditionIdentifier) => {
            return new queries_1.DataQuery(config, queryService, (nConfig, nQueryService, data) => new queries_1.ModifyAssetRenditionQuery(nConfig, nQueryService, assetIdentifier, renditionIdentifier, data));
        }));
    }
    viewAssetRendition() {
        return new queries_1.AssetIdentifierQuery(this.config, this.queryService, (config, queryService, assetIdentifier) => new queries_1.RenditionIdentifierQuery(config, queryService, (xConfig, xQueryService, renditionIdentifier) => {
            return new queries_1.ViewAssetRenditionQuery(config, queryService, assetIdentifier, renditionIdentifier);
        }));
    }
    deleteTaxonomy() {
        return new queries_1.TaxonomyIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DeleteTaxonomyQuery(config, queryService, identifier));
    }
    addTaxonomy() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.AddTaxonomyQuery(config, queryService, data));
    }
    listTaxonomies() {
        return new queries_1.ListTaxonomiesQuery(this.config, this.queryService);
    }
    getTaxonomy() {
        return new queries_1.TaxonomyIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.GetTaxonomyQuery(config, queryService, identifier));
    }
    deleteAsset() {
        return new queries_1.AssetIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DeleteAssetQuery(config, queryService, identifier));
    }
    upsertAsset() {
        return new queries_1.AssetIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DataQuery(this.config, this.queryService, (xConfig, xQueryService, data) => new queries_1.UpsertAssetQuery(config, queryService, identifier, data)));
    }
    addAsset() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.AddAssetQuery(config, queryService, data));
    }
    uploadBinaryFile() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.UploadBinaryFileQuery(config, queryService, data));
    }
    uploadAssetFromUrl() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.UploadAssetFromUrlQuery(config, queryService, data));
    }
    viewAsset() {
        return new queries_1.AssetIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.ViewAssetsQuery(config, queryService, identifier));
    }
    listAssets() {
        return new queries_1.ListAssetsQuery(this.config, this.queryService);
    }
    listContentItems() {
        return new queries_1.ListContentItemsQuery(this.config, this.queryService);
    }
    viewContentItem() {
        return new queries_1.ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.ViewContentItemQuery(config, queryService, identifier));
    }
    addContentItem() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.AddContentItemQuery(config, queryService, data));
    }
    updateContentItem() {
        return new queries_1.ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DataQuery(config, queryService, (nConfig, nQueryService, data) => new queries_1.UpdateContentItemQuery(nConfig, nQueryService, data, identifier)));
    }
    upsertContentItem() {
        return new queries_1.ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DataQuery(config, queryService, (nConfig, nQueryService, data) => new queries_1.UpsertContentItemQuery(nConfig, nQueryService, data, identifier)));
    }
    deleteContentItem() {
        return new queries_1.ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DeleteContentItemQuery(config, queryService, identifier));
    }
    listLanguageVariantsOfItem() {
        return new queries_1.ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.ListLanguageVariantsOfItemQuery(config, queryService, identifier));
    }
    listLanguageVariantsOfContentType() {
        return new queries_1.ContentTypeCodenameAndIdIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.ListLanguageVariantsOfContentTypeQuery(config, queryService, identifier));
    }
    listLanguageVariantsByCollection() {
        return new queries_1.CollectionIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.ListLanguageVariantsByCollectionQuery(config, queryService, identifier));
    }
    listLanguageVariantsBySpace() {
        return new queries_1.SpaceIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.ListLanguageVariantsBySpaceQuery(config, queryService, identifier));
    }
    listLanguageVariantsOfContentTypeWithComponents() {
        return new queries_1.ContentTypeCodenameAndIdIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.ListLanguageVariantsOfContentTypeWithComponentsQuery(config, queryService, identifier));
    }
    listLanguages() {
        return new queries_1.ListLanguagesQuery(this.config, this.queryService);
    }
    viewLanguage() {
        return new queries_1.LanguageIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.ViewLanguageQuery(config, queryService, identifier));
    }
    addLanguage() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.AddLanguageQuery(config, queryService, data));
    }
    modifyLanguage() {
        return new queries_1.LanguageIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DataQuery(config, queryService, (nConfig, nQueryService, data) => new queries_1.ModifyLanguageQuery(nConfig, nQueryService, identifier, data)));
    }
    deleteWebhook() {
        return new queries_1.WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DeleteWebhookQuery(config, queryService, identifier));
    }
    addWebhook() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.AddWebhookQuery(config, queryService, data));
    }
    enableWebhook() {
        return new queries_1.WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.EnableWebhookQuery(config, queryService, identifier));
    }
    disableWebhook() {
        return new queries_1.WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DisableWebhookQuery(config, queryService, identifier));
    }
    getWebhook() {
        return new queries_1.WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.GetWebhookQuery(config, queryService, identifier));
    }
    listWebhooks() {
        return new queries_1.ListWebhooksQuery(this.config, this.queryService);
    }
    deleteLegacyWebhook() {
        return new queries_1.WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DeleteLegacyWebhookQuery(config, queryService, identifier));
    }
    addLegacyWebhook() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.AddLegacyWebhookQuery(config, queryService, data));
    }
    enableLegacyWebhook() {
        return new queries_1.WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.EnableLegacyWebhookQuery(config, queryService, identifier));
    }
    disableLegacyWebhook() {
        return new queries_1.WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DisableLegacyWebhookQuery(config, queryService, identifier));
    }
    getLegacyWebhook() {
        return new queries_1.WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.GetLegacyWebhookQuery(config, queryService, identifier));
    }
    listLegacyWebhooks() {
        return new queries_1.ListLegacyWebhooksQuery(this.config, this.queryService);
    }
    environmentInformation() {
        return new queries_1.EnvironmentInformationQuery(this.config, this.queryService);
    }
    listAssetFolders() {
        return new queries_1.ListAssetFoldersQuery(this.config, this.queryService);
    }
    addAssetFolders() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.AddAssetFoldersQuery(config, queryService, data));
    }
    modifyAssetFolders() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.ModifyAssetFoldersQuery(config, queryService, data));
    }
    listCollections() {
        return new queries_1.ListCollectionsQuery(this.config, this.queryService);
    }
    setCollections() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.SetCollectionsQuery(config, queryService, data));
    }
    createLanguageVariantEditUrl(data) {
        let url = `https://app.kontent.ai/goto/edit-item/project/${this.config.environmentId}/variant-codename/${data.languageCodename}/item/${data.variantId}`;
        if (data.elementCodename) {
            url += `/element/${data.elementCodename}`;
        }
        if (data.nestedItemId) {
            url += `/item/${data.nestedItemId}`;
            if (data.nestedItemElementCodename) {
                url += `/element/${data.nestedItemElementCodename}`;
            }
        }
        return url;
    }
    listSubscriptionProjects() {
        return new queries_1.ListSubscriptionProjectsQuery(this.config, this.queryService);
    }
    listSubscriptionUsers() {
        return new queries_1.ListSubscriptionUsersQuery(this.config, this.queryService);
    }
    viewSubscriptionProject() {
        return new queries_1.EnvironmentIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.ViewSubscriptionProjectQuery(config, queryService, identifier));
    }
    viewSubscriptionUser() {
        return new queries_1.UserIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.ViewSubscriptionUserQuery(config, queryService, identifier));
    }
    activateUserInAllProjects() {
        return new queries_1.UserIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.ActivateUserInAllProjectsQuery(config, queryService, identifier));
    }
    deactivateUserInAllProjects() {
        return new queries_1.UserIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DeactivateUserInAllProjectsQuery(config, queryService, identifier));
    }
    listRoles() {
        return new queries_1.ListRolesQuery(this.config, this.queryService);
    }
    viewRole() {
        return new queries_1.RoleIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.ViewRoleQuery(config, queryService, identifier));
    }
    getPreviewConfiguration() {
        return new queries_1.GetPreviewConfigurationQuery(this.config, this.queryService);
    }
    modifyPreviewConfiguration() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.ModifyPreviewConfigurationQuery(config, queryService, data));
    }
    inviteUser() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.InviteProjectUserQuery(config, queryService, data));
    }
    changeUserRoles() {
        return new queries_1.UserIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DataQuery(config, queryService, (nConfig, nQueryService, data) => new queries_1.ChangeUserRolesQuery(nConfig, nQueryService, identifier, data)));
    }
    getEnvironmentCloningState() {
        return new environments_1.GetEnvironmentCloningStateQuery(this.config, this.queryService);
    }
    deleteEnvironment() {
        return new delete_environment_query_1.DeleteEnvironmentQuery(this.config, this.queryService);
    }
    modifyEnvironment() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new modify_environment_query_1.ModifyEnvironmentQuery(config, queryService, data));
    }
    cloneEnvironment() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new clone_environment_query_1.CloneEnvironmentQuery(config, queryService, data));
    }
    markEnvironmentAsProduction() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new mark_environment_as_production_query_1.MarkEnvironmentAsProductionQuery(config, queryService, data));
    }
    addSpace() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.AddSpaceQuery(config, queryService, data));
    }
    deleteSpace() {
        return new queries_1.SpaceIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DeleteSpaceQuery(config, queryService, identifier));
    }
    listSpaces() {
        return new queries_1.ListSpacesQuery(this.config, this.queryService);
    }
    modifySpace() {
        return new queries_1.SpaceIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DataQuery(config, queryService, (nConfig, nQueryService, data) => new queries_1.ModifySpaceQuery(nConfig, nQueryService, identifier, data)));
    }
    viewSpace() {
        return new queries_1.SpaceIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.ViewSpaceQuery(config, queryService, identifier));
    }
    activateWebSpotlight() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.ActivateWebSpotlightQuery(config, queryService, data));
    }
    deactivateWebSpotlight() {
        return new queries_1.DeactivateWebSpotlightQuery(this.config, this.queryService);
    }
    checkWebSpotlightStatus() {
        return new queries_1.CheckWebSpotlightStatusQuery(this.config, this.queryService);
    }
    modifyCustomApp() {
        return new queries_1.CustomAppsIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DataQuery(config, queryService, (nConfig, nQueryService, data) => new queries_1.ModifyCustomAppQuery(nConfig, nQueryService, identifier, data)));
    }
    deleteCustomApp() {
        return new queries_1.CustomAppsIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.DeleteCustomAppQuery(config, queryService, identifier));
    }
    addCustomApp() {
        return new queries_1.DataQuery(this.config, this.queryService, (config, queryService, data) => new queries_1.AddCustomAppQuery(config, queryService, data));
    }
    listCustomApps() {
        return new queries_1.ListCustomAppsQuery(this.config, this.queryService);
    }
    getCustomApp() {
        return new queries_1.CustomAppsIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new queries_1.GetCustomAppQuery(config, queryService, identifier));
    }
}
exports.ManagementClient = ManagementClient;
//# sourceMappingURL=management-client.class.js.map