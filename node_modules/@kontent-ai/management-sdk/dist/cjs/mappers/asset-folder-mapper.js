"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assetFolderMapper = exports.AssetFolderMapper = void 0;
const models_1 = require("../models");
const responses_1 = require("../responses");
const base_mapper_1 = require("./base-mapper");
class AssetFolderMapper extends base_mapper_1.BaseMapper {
    mapListAssetFoldersResponse(response) {
        const items = response.data.folders.map((m) => this.mapAssetFolder(m));
        return new responses_1.AssetFolderResponses.AssetFoldersListResponse(super.mapResponseDebug(response), response.data, {
            last_modified: new Date(response.data.last_modified),
            items: items
        });
    }
    mapAddAssetFoldersResponse(response) {
        const items = response.data.folders.map((m) => this.mapAssetFolder(m));
        return new responses_1.AssetFolderResponses.AddAssetFoldersResponse(super.mapResponseDebug(response), response.data, {
            last_modified: new Date(response.data.last_modified),
            items: items
        });
    }
    mapModifyAssetFoldersResponse(response) {
        const items = response.data.folders.map((m) => this.mapAssetFolder(m));
        return new responses_1.AssetFolderResponses.ModifyAssetFoldersResponse(super.mapResponseDebug(response), response.data, {
            last_modified: new Date(response.data.last_modified),
            items: items
        });
    }
    mapAssetFolder(rawFolder) {
        return new models_1.AssetFolderModels.AssetFolder({
            externalId: rawFolder.external_id,
            id: rawFolder.id,
            name: rawFolder.name,
            folders: rawFolder.folders.map((m) => this.mapAssetFolder(m)),
            codename: rawFolder.codename,
            _raw: rawFolder
        });
    }
}
exports.AssetFolderMapper = AssetFolderMapper;
exports.assetFolderMapper = new AssetFolderMapper();
//# sourceMappingURL=asset-folder-mapper.js.map