import { SharedModels } from '../shared/shared-models';
import { TaxonomyContracts } from '../../contracts';
export declare namespace TaxonomyModels {
    type ModifyTaxonomyTypeOperation = 'addInto' | 'remove' | 'replace' | 'move';
    interface IModifyTaxonomyData {
        op: ModifyTaxonomyTypeOperation;
        reference?: SharedModels.IReferenceObject;
        property_name?: string;
        value?: IAddTaxonomyRequestModel | string | IAddTaxonomyRequestModel[];
        before?: SharedModels.IReferenceObject;
        after?: SharedModels.IReferenceObject;
        under?: SharedModels.IReferenceObject;
    }
    class Taxonomy implements SharedModels.IBaseModel<TaxonomyContracts.ITaxonomyContract> {
        lastModified: Date;
        name: string;
        id: string;
        codename: string;
        terms: Taxonomy[];
        externalId?: string;
        _raw: TaxonomyContracts.ITaxonomyContract;
        constructor(data: {
            lastModified: Date;
            name: string;
            id: string;
            codename: string;
            terms: Taxonomy[];
            externalId?: string;
            _raw: TaxonomyContracts.ITaxonomyContract;
        });
    }
    interface IAddTaxonomyRequestModel {
        name: string;
        terms: IAddTaxonomyRequestModel[];
        external_id?: string;
        codename?: string;
    }
}
