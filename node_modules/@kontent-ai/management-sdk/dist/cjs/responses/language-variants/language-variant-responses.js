"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageVariantResponses = void 0;
const base_responses_1 = require("../base-responses");
var LanguageVariantResponses;
(function (LanguageVariantResponses) {
    class FilterLanguageVariantsResponse extends base_responses_1.BaseResponses.BaseContentManagementListResponse {
        constructor(debug, rawData, data) {
            super(debug, rawData, data);
        }
    }
    LanguageVariantResponses.FilterLanguageVariantsResponse = FilterLanguageVariantsResponse;
    class ListAllFilterLanguageVariantsResponse extends base_responses_1.BaseResponses.ContentManagementListAllResponse {
        constructor(data) {
            super(data);
        }
    }
    LanguageVariantResponses.ListAllFilterLanguageVariantsResponse = ListAllFilterLanguageVariantsResponse;
    class ListLanguageVariantsOfItemResponse extends base_responses_1.BaseResponses.BaseContentManagementResponse {
        constructor(debug, rawData, data) {
            super(debug, rawData, data);
        }
    }
    LanguageVariantResponses.ListLanguageVariantsOfItemResponse = ListLanguageVariantsOfItemResponse;
    class ListLanguageVariantsOfContentTypeWithComponentsResponse extends base_responses_1.BaseResponses.BaseContentManagementListResponse {
        constructor(debug, rawData, data) {
            super(debug, rawData, data);
        }
    }
    LanguageVariantResponses.ListLanguageVariantsOfContentTypeWithComponentsResponse = ListLanguageVariantsOfContentTypeWithComponentsResponse;
    class ListAllLanguageVariantsOfContentTypeWithComponentsResponse extends base_responses_1.BaseResponses.ContentManagementListAllResponse {
        constructor(data) {
            super(data);
        }
    }
    LanguageVariantResponses.ListAllLanguageVariantsOfContentTypeWithComponentsResponse = ListAllLanguageVariantsOfContentTypeWithComponentsResponse;
    class ListLanguageVariantsOfContentTypeResponse extends base_responses_1.BaseResponses.BaseContentManagementListResponse {
        constructor(debug, rawData, data) {
            super(debug, rawData, data);
        }
    }
    LanguageVariantResponses.ListLanguageVariantsOfContentTypeResponse = ListLanguageVariantsOfContentTypeResponse;
    class ListLanguageVariantsByCollectionResponse extends base_responses_1.BaseResponses.BaseContentManagementListResponse {
        constructor(debug, rawData, data) {
            super(debug, rawData, data);
        }
    }
    LanguageVariantResponses.ListLanguageVariantsByCollectionResponse = ListLanguageVariantsByCollectionResponse;
    class ListLanguageVariantsBySpaceResponse extends base_responses_1.BaseResponses.BaseContentManagementListResponse {
        constructor(debug, rawData, data) {
            super(debug, rawData, data);
        }
    }
    LanguageVariantResponses.ListLanguageVariantsBySpaceResponse = ListLanguageVariantsBySpaceResponse;
    class ListAllLanguageVariantsOfContentTypeResponse extends base_responses_1.BaseResponses.ContentManagementListAllResponse {
        constructor(data) {
            super(data);
        }
    }
    LanguageVariantResponses.ListAllLanguageVariantsOfContentTypeResponse = ListAllLanguageVariantsOfContentTypeResponse;
    class ListAllLanguageVariantsByCollectionResponse extends base_responses_1.BaseResponses.ContentManagementListAllResponse {
        constructor(data) {
            super(data);
        }
    }
    LanguageVariantResponses.ListAllLanguageVariantsByCollectionResponse = ListAllLanguageVariantsByCollectionResponse;
    class ListAllLanguageVariantsBySpaceResponse extends base_responses_1.BaseResponses.ContentManagementListAllResponse {
        constructor(data) {
            super(data);
        }
    }
    LanguageVariantResponses.ListAllLanguageVariantsBySpaceResponse = ListAllLanguageVariantsBySpaceResponse;
    class UpsertLanguageVariantResponse extends base_responses_1.BaseResponses.BaseContentManagementResponse {
        constructor(debug, rawData, data) {
            super(debug, rawData, data);
        }
    }
    LanguageVariantResponses.UpsertLanguageVariantResponse = UpsertLanguageVariantResponse;
    class ViewLanguageVariantResponse extends base_responses_1.BaseResponses.BaseContentManagementResponse {
        constructor(debug, rawData, data) {
            super(debug, rawData, data);
        }
    }
    LanguageVariantResponses.ViewLanguageVariantResponse = ViewLanguageVariantResponse;
})(LanguageVariantResponses || (exports.LanguageVariantResponses = LanguageVariantResponses = {}));
//# sourceMappingURL=language-variant-responses.js.map