import { Identifiers } from './identifiers';
export declare class ContentManagementApiEndpoints {
    private readonly environmentId?;
    private readonly subscriptionId?;
    private readonly projectsPath;
    private readonly subscriptionsPath;
    constructor(data: {
        environmentId?: string;
        subscriptionId?: string;
    });
    changeWorkflowStepOfLanguageVariant(itemIdentifier: Identifiers.ContentItemIdentifier, languageIdentifier: Identifiers.LanguageIdentifier, workflowIdentifier: Identifiers.WorkflowIdentifier): string;
    publishLaguageVariant(itemIdentifier: Identifiers.ContentItemIdentifier, languageIdentifier: Identifiers.LanguageIdentifier): string;
    createNewVersionOfALanguageVariant(itemIdentifier: Identifiers.ContentItemIdentifier, languageIdentifier: Identifiers.LanguageIdentifier): string;
    unpublishLanguageVariant(itemIdentifier: Identifiers.ContentItemIdentifier, languageIdentifier: Identifiers.LanguageIdentifier): string;
    cancelScheduledPublishingOfLanguageVariant(itemIdentifier: Identifiers.ContentItemIdentifier, languageIdentifier: Identifiers.LanguageIdentifier): string;
    cancelScheduledUnpublishingOfLanguageVariant(itemIdentifier: Identifiers.ContentItemIdentifier, languageIdentifier: Identifiers.LanguageIdentifier): string;
    listWorkflowSteps(): string;
    listWorkflows(): string;
    addWorkflow(): string;
    updateWorkflow(workflowIdentifier: Identifiers.WorkflowIdentifier): string;
    deleteWorkflow(identifier: Identifiers.WorkflowIdentifier): string;
    changeWorkflowOfLanguageVariant(itemIdentifier: Identifiers.ContentItemIdentifier, languageIdentifier: Identifiers.LanguageIdentifier): string;
    listContentTypeSnippets(): string;
    viewContentTypeSnippet(identifier: Identifiers.ContentTypeIdentifier): string;
    addContentTypeSnippet(): string;
    deleteContentTypeSnippet(identifier: Identifiers.ContentTypeIdentifier): string;
    modifyContentTypeSnippet(identifier: Identifiers.ContentTypeIdentifier): string;
    startProjectValidation(): string;
    checkEnvironmentValidation(identifier: Identifiers.TaskIdentifier): string;
    listEnvironmentIssues(identifier: Identifiers.TaskIdentifier): string;
    environmentInformation(): string;
    listContentTypes(): string;
    addContentType(): string;
    deleteContentType(identifier: Identifiers.ContentTypeIdentifier): string;
    viewContentType(identifier: Identifiers.ContentTypeIdentifier): string;
    modifyContentType(identifier: Identifiers.ContentTypeIdentifier): string;
    addCustomApp(): string;
    modifyCustomApp(identifier: Identifiers.CustomAppIdentifier): string;
    deleteCustomApp(identifier: Identifiers.CustomAppIdentifier): string;
    getCustomApp(identifier: Identifiers.CustomAppIdentifier): string;
    listCustomApps(): string;
    addTaxonomy(): string;
    modifyTaxonomy(identifier: Identifiers.TaxonomyIdentifier): string;
    deleteTaxonomy(identifier: Identifiers.TaxonomyIdentifier): string;
    listTaxonomies(): string;
    getTaxonomy(identifier: Identifiers.TaxonomyIdentifier): string;
    addAsset(): string;
    deleteAsset(identifier: Identifiers.AssetIdentifier): string;
    upsertAsset(assetIdentifier: Identifiers.AssetIdentifier): string;
    uploadBinaryFile(filename: string): string;
    listAssets(): string;
    viewAsset(identifier: Identifiers.AssetIdentifier): string;
    items(): string;
    viewContentItem(identifier: Identifiers.ContentItemIdentifier): string;
    addContentItem(): string;
    updateContentItem(identifier: Identifiers.ContentItemIdentifier): string;
    upsertContentItem(identifier: Identifiers.ContentItemIdentifier): string;
    deleteContentItem(identifier: Identifiers.ContentItemIdentifier): string;
    listLanguageVariantsOfItem(identifier: Identifiers.ContentItemIdentifier): string;
    listLanguageVariantsOfContentType(identifier: Identifiers.ContentTypeIdentifier): string;
    listLanguageVariantsByCollection(identifier: Identifiers.CollectionIdentifier): string;
    listLanguageVariantsBySpace(identifier: Identifiers.SpaceIdentifier): string;
    listLanguageVariantsOfContentTypeWithComponents(identifier: Identifiers.ContentTypeIdentifier): string;
    filterLanguageVariants(): string;
    deleteLanguageVariant(itemIdentifier: Identifiers.ContentItemIdentifier, langaugeIdentifier: Identifiers.LanguageIdentifier): string;
    viewLanguageVariant(itemIdentifier: Identifiers.ContentItemIdentifier, langaugeIdentifier: Identifiers.LanguageIdentifier, isPublished: boolean): string;
    upsertLanguageVariant(itemIdentifier: Identifiers.ContentItemIdentifier, langaugeIdentifier: Identifiers.LanguageIdentifier): string;
    viewLanguage(identifier: Identifiers.LanguageIdentifier): string;
    addLanguage(): string;
    modifyLanguage(identifier: Identifiers.LanguageIdentifier): string;
    listLanguages(): string;
    deleteLegacyWebhook(identifier: Identifiers.WebhookIdentifier): string;
    getLegacyWebhook(identifier: Identifiers.WebhookIdentifier): string;
    addLegacyWebhook(): string;
    enableLegacyWebhook(identifier: Identifiers.WebhookIdentifier): string;
    disableLegacyWebhook(identifier: Identifiers.WebhookIdentifier): string;
    listLegacyWebhooks(): string;
    deleteWebhook(identifier: Identifiers.WebhookIdentifier): string;
    getWebhook(identifier: Identifiers.WebhookIdentifier): string;
    addWebhook(): string;
    enableWebhook(identifier: Identifiers.WebhookIdentifier): string;
    disableWebhook(identifier: Identifiers.WebhookIdentifier): string;
    listWebhooks(): string;
    listAssetFolders(): string;
    addAssetFolders(): string;
    modifyAssetFolders(): string;
    listCollections(): string;
    setCollections(): string;
    listAssetRenditions(identifier: Identifiers.AssetIdentifier): string;
    addAssetRendition(identifier: Identifiers.AssetIdentifier): string;
    modifyAssetRendition(assetIdentifier: Identifiers.AssetIdentifier, renditionIdentifier: Identifiers.RenditionIdentifier): string;
    viewAssetRendition(assetIdentifier: Identifiers.AssetIdentifier, renditionIdentifier: Identifiers.RenditionIdentifier): string;
    listSubscriptionProjects(): string;
    listSubscriptionUsers(): string;
    viewSubscriptionProject(identifier: Identifiers.EnvironmentIdentifier): string;
    viewSubscriptionUser(identifier: Identifiers.UserIdentifier): string;
    activateUserInAllProjects(identifier: Identifiers.UserIdentifier): string;
    deactivateUserInAllProjects(identifier: Identifiers.UserIdentifier): string;
    listRoles(): string;
    viewRole(identifier: Identifiers.RoleIdentifier): string;
    getPreviewConfigruation(): string;
    modifyPreviewConfigruation(): string;
    inviteProjectUser(): string;
    changeProjectUserRoles(identifier: Identifiers.UserIdentifier): string;
    getEnvironmentCloningStatus(): string;
    deleteEnvironment(): string;
    modifyEnvironment(): string;
    cloneEnvironment(): string;
    markEnvironmentAsProduction(): string;
    listSpaces(): string;
    viewSpace(identifier: Identifiers.SpaceIdentifier): string;
    addSpace(): string;
    deleteSpace(identifier: Identifiers.SpaceIdentifier): string;
    modifySpace(identifier: Identifiers.SpaceIdentifier): string;
    activateWebSpotlight(): string;
    deactivateWebSpotlight(): string;
    checkWebSpotlightStatus(): string;
    private getSubscriptionPath;
    private getEnvironmentsPath;
}
