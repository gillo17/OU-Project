export var Identifiers;
(function (Identifiers) {
    let TaskIdentifierEnum;
    (function (TaskIdentifierEnum) {
        TaskIdentifierEnum["InternalId"] = "internalId";
    })(TaskIdentifierEnum = Identifiers.TaskIdentifierEnum || (Identifiers.TaskIdentifierEnum = {}));
    let ContentItemIdentifierEnum;
    (function (ContentItemIdentifierEnum) {
        ContentItemIdentifierEnum["ExternalId"] = "externalId";
        ContentItemIdentifierEnum["InternalId"] = "internalId";
        ContentItemIdentifierEnum["Codename"] = "codename";
    })(ContentItemIdentifierEnum = Identifiers.ContentItemIdentifierEnum || (Identifiers.ContentItemIdentifierEnum = {}));
    let ContentTypeIdentifierEnum;
    (function (ContentTypeIdentifierEnum) {
        ContentTypeIdentifierEnum["ExternalId"] = "externalId";
        ContentTypeIdentifierEnum["InternalId"] = "internalId";
        ContentTypeIdentifierEnum["Codename"] = "codename";
    })(ContentTypeIdentifierEnum = Identifiers.ContentTypeIdentifierEnum || (Identifiers.ContentTypeIdentifierEnum = {}));
    let RenditionIdentifierEnum;
    (function (RenditionIdentifierEnum) {
        RenditionIdentifierEnum["ExternalId"] = "externalId";
        RenditionIdentifierEnum["InternalId"] = "internalId";
    })(RenditionIdentifierEnum = Identifiers.RenditionIdentifierEnum || (Identifiers.RenditionIdentifierEnum = {}));
    let CollectionIdentifierEnum;
    (function (CollectionIdentifierEnum) {
        CollectionIdentifierEnum["ExternalId"] = "externalId";
        CollectionIdentifierEnum["InternalId"] = "internalId";
        CollectionIdentifierEnum["Codename"] = "codename";
    })(CollectionIdentifierEnum = Identifiers.CollectionIdentifierEnum || (Identifiers.CollectionIdentifierEnum = {}));
    let LanguageIdentifierEnum;
    (function (LanguageIdentifierEnum) {
        LanguageIdentifierEnum["InternalId"] = "internalId";
        LanguageIdentifierEnum["Codename"] = "codename";
        LanguageIdentifierEnum["ExternalId"] = "externalId";
    })(LanguageIdentifierEnum = Identifiers.LanguageIdentifierEnum || (Identifiers.LanguageIdentifierEnum = {}));
    let WorkflowIdentifierEnum;
    (function (WorkflowIdentifierEnum) {
        WorkflowIdentifierEnum["Id"] = "id";
        WorkflowIdentifierEnum["Codename"] = "codename";
    })(WorkflowIdentifierEnum = Identifiers.WorkflowIdentifierEnum || (Identifiers.WorkflowIdentifierEnum = {}));
    let TaxonomyIdentifierEnum;
    (function (TaxonomyIdentifierEnum) {
        TaxonomyIdentifierEnum["InternalId"] = "internalId";
        TaxonomyIdentifierEnum["ExternalId"] = "externalId";
        TaxonomyIdentifierEnum["Codename"] = "codename";
    })(TaxonomyIdentifierEnum = Identifiers.TaxonomyIdentifierEnum || (Identifiers.TaxonomyIdentifierEnum = {}));
    let CustomAppIdentifierEnum;
    (function (CustomAppIdentifierEnum) {
        CustomAppIdentifierEnum["InternalId"] = "internalId";
        CustomAppIdentifierEnum["Codename"] = "codename";
    })(CustomAppIdentifierEnum = Identifiers.CustomAppIdentifierEnum || (Identifiers.CustomAppIdentifierEnum = {}));
    let AssetIdentifierEnum;
    (function (AssetIdentifierEnum) {
        AssetIdentifierEnum["InternalId"] = "internalId";
        AssetIdentifierEnum["ExternalId"] = "externalId";
        AssetIdentifierEnum["Codename"] = "codename";
    })(AssetIdentifierEnum = Identifiers.AssetIdentifierEnum || (Identifiers.AssetIdentifierEnum = {}));
    let WebhookIdentifierEnum;
    (function (WebhookIdentifierEnum) {
        WebhookIdentifierEnum["Id"] = "id";
    })(WebhookIdentifierEnum = Identifiers.WebhookIdentifierEnum || (Identifiers.WebhookIdentifierEnum = {}));
    let EnvironmentIdentifierEnum;
    (function (EnvironmentIdentifierEnum) {
        EnvironmentIdentifierEnum["Id"] = "id";
    })(EnvironmentIdentifierEnum = Identifiers.EnvironmentIdentifierEnum || (Identifiers.EnvironmentIdentifierEnum = {}));
    let UserIdentifierEnum;
    (function (UserIdentifierEnum) {
        UserIdentifierEnum["Id"] = "id";
        UserIdentifierEnum["Email"] = "email";
    })(UserIdentifierEnum = Identifiers.UserIdentifierEnum || (Identifiers.UserIdentifierEnum = {}));
    let RoleIdentifierEnum;
    (function (RoleIdentifierEnum) {
        RoleIdentifierEnum["Id"] = "id";
        RoleIdentifierEnum["Codename"] = "codename";
    })(RoleIdentifierEnum = Identifiers.RoleIdentifierEnum || (Identifiers.RoleIdentifierEnum = {}));
    let SpaceIdentifierEnum;
    (function (SpaceIdentifierEnum) {
        SpaceIdentifierEnum["InternalId"] = "internalId";
        SpaceIdentifierEnum["ExternalId"] = "externalId";
        SpaceIdentifierEnum["Codename"] = "codename";
    })(SpaceIdentifierEnum = Identifiers.SpaceIdentifierEnum || (Identifiers.SpaceIdentifierEnum = {}));
    class AssetIdentifier {
        constructor(identifier, value) {
            this.identifier = identifier;
            this.value = value;
        }
        getParamValue() {
            if (this.identifier === AssetIdentifierEnum.InternalId) {
                return `${this.value}`;
            }
            if (this.identifier === AssetIdentifierEnum.ExternalId) {
                return `external-id/${this.value}`;
            }
            if (this.identifier === AssetIdentifierEnum.Codename) {
                return `codename/${this.value}`;
            }
            throw Error(`Unsupported identifier '${this.identifier}'`);
        }
    }
    Identifiers.AssetIdentifier = AssetIdentifier;
    class TaxonomyIdentifier {
        constructor(identifier, value) {
            this.identifier = identifier;
            this.value = value;
        }
        getParamValue() {
            if (this.identifier === TaxonomyIdentifierEnum.InternalId) {
                return `${this.value}`;
            }
            if (this.identifier === TaxonomyIdentifierEnum.ExternalId) {
                return `external-id/${this.value}`;
            }
            if (this.identifier === TaxonomyIdentifierEnum.Codename) {
                return `codename/${this.value}`;
            }
            throw Error(`Unsupported identifier '${this.identifier}'`);
        }
    }
    Identifiers.TaxonomyIdentifier = TaxonomyIdentifier;
    class CustomAppIdentifier {
        constructor(identifier, value) {
            this.identifier = identifier;
            this.value = value;
        }
        getParamValue() {
            if (this.identifier === CustomAppIdentifierEnum.InternalId) {
                return `${this.value}`;
            }
            if (this.identifier === CustomAppIdentifierEnum.Codename) {
                return `codename/${this.value}`;
            }
            throw Error(`Unsupported identifier '${this.identifier}'`);
        }
    }
    Identifiers.CustomAppIdentifier = CustomAppIdentifier;
    class ContentTypeIdentifier {
        constructor(identifier, value) {
            this.identifier = identifier;
            this.value = value;
        }
        getParamValue() {
            if (this.identifier === ContentTypeIdentifierEnum.Codename) {
                return `codename/${this.value}`;
            }
            if (this.identifier === ContentTypeIdentifierEnum.InternalId) {
                return `${this.value}`;
            }
            if (this.identifier === ContentTypeIdentifierEnum.ExternalId) {
                return `external-id/${this.value}`;
            }
            throw Error(`Unsupported identifier '${this.identifier}'`);
        }
    }
    Identifiers.ContentTypeIdentifier = ContentTypeIdentifier;
    class RenditionIdentifier {
        constructor(identifier, value) {
            this.identifier = identifier;
            this.value = value;
        }
        getParamValue() {
            if (this.identifier === RenditionIdentifierEnum.InternalId) {
                return `${this.value}`;
            }
            if (this.identifier === RenditionIdentifierEnum.ExternalId) {
                return `external-id/${this.value}`;
            }
            throw Error(`Unsupported identifier '${this.identifier}'`);
        }
    }
    Identifiers.RenditionIdentifier = RenditionIdentifier;
    class CollectionIdentifier {
        constructor(identifier, value) {
            this.identifier = identifier;
            this.value = value;
        }
        getParamValue() {
            if (this.identifier === CollectionIdentifierEnum.Codename) {
                return `codename/${this.value}`;
            }
            if (this.identifier === CollectionIdentifierEnum.InternalId) {
                return `${this.value}`;
            }
            if (this.identifier === CollectionIdentifierEnum.ExternalId) {
                return `external-id/${this.value}`;
            }
            throw Error(`Unsupported identifier '${this.identifier}'`);
        }
    }
    Identifiers.CollectionIdentifier = CollectionIdentifier;
    class WorkflowIdentifier {
        constructor(identifier, value) {
            this.identifier = identifier;
            this.value = value;
        }
        getParamValue() {
            if (this.identifier === WorkflowIdentifierEnum.Id) {
                return `${this.value}`;
            }
            if (this.identifier === WorkflowIdentifierEnum.Codename) {
                return `codename/${this.value}`;
            }
            throw Error(`Unsupported identifier '${this.identifier}'`);
        }
    }
    Identifiers.WorkflowIdentifier = WorkflowIdentifier;
    class TaskIdentifier {
        constructor(identifier, value) {
            this.identifier = identifier;
            this.value = value;
        }
        getParamValue() {
            if (this.identifier === TaskIdentifierEnum.InternalId) {
                return `${this.value}`;
            }
            throw Error(`Unsupported identifier '${this.identifier}'`);
        }
    }
    Identifiers.TaskIdentifier = TaskIdentifier;
    class ContentItemIdentifier {
        constructor(identifier, value) {
            this.identifier = identifier;
            this.value = value;
        }
        getParamValue() {
            if (this.identifier === ContentItemIdentifierEnum.Codename) {
                return `codename/${this.value}`;
            }
            if (this.identifier === ContentItemIdentifierEnum.InternalId) {
                return `${this.value}`;
            }
            if (this.identifier === ContentItemIdentifierEnum.ExternalId) {
                return `external-id/${this.value}`;
            }
            throw Error(`Unsupported identifier '${this.identifier}'`);
        }
    }
    Identifiers.ContentItemIdentifier = ContentItemIdentifier;
    class LanguageIdentifier {
        constructor(identifier, value) {
            this.identifier = identifier;
            this.value = value;
        }
        getParamValue() {
            if (this.identifier === LanguageIdentifierEnum.Codename) {
                return `codename/${this.value}`;
            }
            if (this.identifier === LanguageIdentifierEnum.InternalId) {
                return `${this.value}`;
            }
            if (this.identifier === LanguageIdentifierEnum.ExternalId) {
                return `external-id/${this.value}`;
            }
            throw Error(`Unsupported identifier '${this.identifier}'`);
        }
    }
    Identifiers.LanguageIdentifier = LanguageIdentifier;
    class WebhookIdentifier {
        constructor(identifier, value) {
            this.identifier = identifier;
            this.value = value;
        }
        getParamValue() {
            if (this.identifier === WebhookIdentifierEnum.Id) {
                return `${this.value}`;
            }
            throw Error(`Unsupported identifier '${this.identifier}'`);
        }
    }
    Identifiers.WebhookIdentifier = WebhookIdentifier;
    class EnvironmentIdentifier {
        constructor(identifier, value) {
            this.identifier = identifier;
            this.value = value;
        }
        getParamValue() {
            if (this.identifier === EnvironmentIdentifierEnum.Id) {
                return `${this.value}`;
            }
            throw Error(`Unsupported identifier '${this.identifier}'`);
        }
    }
    Identifiers.EnvironmentIdentifier = EnvironmentIdentifier;
    class UserIdentifier {
        constructor(identifier, value) {
            this.identifier = identifier;
            this.value = value;
        }
        getParamValue() {
            if (this.identifier === UserIdentifierEnum.Id) {
                return `${this.value}`;
            }
            if (this.identifier === UserIdentifierEnum.Email) {
                return `email/${this.value}`;
            }
            throw Error(`Unsupported identifier '${this.identifier}'`);
        }
    }
    Identifiers.UserIdentifier = UserIdentifier;
    class RoleIdentifier {
        constructor(identifier, value) {
            this.identifier = identifier;
            this.value = value;
        }
        getParamValue() {
            if (this.identifier === RoleIdentifierEnum.Id) {
                return `${this.value}`;
            }
            if (this.identifier === RoleIdentifierEnum.Codename) {
                return `codename/${this.value}`;
            }
            throw Error(`Unsupported identifier '${this.identifier}'`);
        }
    }
    Identifiers.RoleIdentifier = RoleIdentifier;
    class SpaceIdentifier {
        constructor(identifier, value) {
            this.identifier = identifier;
            this.value = value;
        }
        getParamValue() {
            if (this.identifier === SpaceIdentifierEnum.Codename) {
                return `codename/${this.value}`;
            }
            if (this.identifier === SpaceIdentifierEnum.InternalId) {
                return `${this.value}`;
            }
            if (this.identifier === SpaceIdentifierEnum.ExternalId) {
                return `external-id/${this.value}`;
            }
            throw Error(`Unsupported identifier '${this.identifier}'`);
        }
    }
    Identifiers.SpaceIdentifier = SpaceIdentifier;
})(Identifiers || (Identifiers = {}));
//# sourceMappingURL=identifiers.js.map