import { BaseResponses } from '../base-responses';
export var LanguageVariantResponses;
(function (LanguageVariantResponses) {
    class FilterLanguageVariantsResponse extends BaseResponses.BaseContentManagementListResponse {
        constructor(debug, rawData, data) {
            super(debug, rawData, data);
        }
    }
    LanguageVariantResponses.FilterLanguageVariantsResponse = FilterLanguageVariantsResponse;
    class ListAllFilterLanguageVariantsResponse extends BaseResponses.ContentManagementListAllResponse {
        constructor(data) {
            super(data);
        }
    }
    LanguageVariantResponses.ListAllFilterLanguageVariantsResponse = ListAllFilterLanguageVariantsResponse;
    class ListLanguageVariantsOfItemResponse extends BaseResponses.BaseContentManagementResponse {
        constructor(debug, rawData, data) {
            super(debug, rawData, data);
        }
    }
    LanguageVariantResponses.ListLanguageVariantsOfItemResponse = ListLanguageVariantsOfItemResponse;
    class ListLanguageVariantsOfContentTypeWithComponentsResponse extends BaseResponses.BaseContentManagementListResponse {
        constructor(debug, rawData, data) {
            super(debug, rawData, data);
        }
    }
    LanguageVariantResponses.ListLanguageVariantsOfContentTypeWithComponentsResponse = ListLanguageVariantsOfContentTypeWithComponentsResponse;
    class ListAllLanguageVariantsOfContentTypeWithComponentsResponse extends BaseResponses.ContentManagementListAllResponse {
        constructor(data) {
            super(data);
        }
    }
    LanguageVariantResponses.ListAllLanguageVariantsOfContentTypeWithComponentsResponse = ListAllLanguageVariantsOfContentTypeWithComponentsResponse;
    class ListLanguageVariantsOfContentTypeResponse extends BaseResponses.BaseContentManagementListResponse {
        constructor(debug, rawData, data) {
            super(debug, rawData, data);
        }
    }
    LanguageVariantResponses.ListLanguageVariantsOfContentTypeResponse = ListLanguageVariantsOfContentTypeResponse;
    class ListLanguageVariantsByCollectionResponse extends BaseResponses.BaseContentManagementListResponse {
        constructor(debug, rawData, data) {
            super(debug, rawData, data);
        }
    }
    LanguageVariantResponses.ListLanguageVariantsByCollectionResponse = ListLanguageVariantsByCollectionResponse;
    class ListLanguageVariantsBySpaceResponse extends BaseResponses.BaseContentManagementListResponse {
        constructor(debug, rawData, data) {
            super(debug, rawData, data);
        }
    }
    LanguageVariantResponses.ListLanguageVariantsBySpaceResponse = ListLanguageVariantsBySpaceResponse;
    class ListAllLanguageVariantsOfContentTypeResponse extends BaseResponses.ContentManagementListAllResponse {
        constructor(data) {
            super(data);
        }
    }
    LanguageVariantResponses.ListAllLanguageVariantsOfContentTypeResponse = ListAllLanguageVariantsOfContentTypeResponse;
    class ListAllLanguageVariantsByCollectionResponse extends BaseResponses.ContentManagementListAllResponse {
        constructor(data) {
            super(data);
        }
    }
    LanguageVariantResponses.ListAllLanguageVariantsByCollectionResponse = ListAllLanguageVariantsByCollectionResponse;
    class ListAllLanguageVariantsBySpaceResponse extends BaseResponses.ContentManagementListAllResponse {
        constructor(data) {
            super(data);
        }
    }
    LanguageVariantResponses.ListAllLanguageVariantsBySpaceResponse = ListAllLanguageVariantsBySpaceResponse;
    class UpsertLanguageVariantResponse extends BaseResponses.BaseContentManagementResponse {
        constructor(debug, rawData, data) {
            super(debug, rawData, data);
        }
    }
    LanguageVariantResponses.UpsertLanguageVariantResponse = UpsertLanguageVariantResponse;
    class ViewLanguageVariantResponse extends BaseResponses.BaseContentManagementResponse {
        constructor(debug, rawData, data) {
            super(debug, rawData, data);
        }
    }
    LanguageVariantResponses.ViewLanguageVariantResponse = ViewLanguageVariantResponse;
})(LanguageVariantResponses || (LanguageVariantResponses = {}));
//# sourceMappingURL=language-variant-responses.js.map