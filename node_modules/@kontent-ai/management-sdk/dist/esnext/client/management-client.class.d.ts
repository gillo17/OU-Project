import { IHttpCancelRequestToken } from '@kontent-ai/core-sdk';
import { AssetElementsBuilder, AssetRenditionModels, CollectionModels, CustomAppModels, LanguageVariantElementsBuilder, PreviewModels, ProjectUserModels, SpaceModels, WebSpotlightModels } from '../models';
import { IManagementClientConfig } from '../config';
import { ContentItemContracts, LanguageVariantContracts } from '../contracts';
import { AssetFolderModels, AssetModels, ContentTypeElementsBuilder, ContentTypeModels, ContentTypeSnippetElements, ContentTypeSnippetModels, LanguageModels, TaxonomyModels, WebhookModels, WorkflowModels } from '../models';
import { AddAssetFoldersQuery, AddAssetQuery, AddContentItemQuery, AddContentTypeQuery, AddContentTypeSnippetQuery, AddLanguageQuery, AddTaxonomyQuery, AddWebhookQuery, AddLegacyWebhookQuery, AssetIdentifierQuery, CancelScheduledPublishingOfLanguageVariantQuery, ContentItemIdentifierQuery, ContentTypeCodenameAndIdIdentifierQuery, ContentTypeIdentifierQuery, CreateNewVersionOfLanguageVariantQuery, DataQuery, DataQueryOptional, DeleteAssetQuery, DeleteContentItemQuery, DeleteContentTypeQuery, DeleteContentTypeSnippetQuery, DeleteLanguageVariantQuery, DeleteTaxonomyQuery, DeleteWebhookQuery, DeleteLegacyWebhookQuery, GetTaxonomyQuery, GetWebhookQuery, GetLegacyWebhookQuery, LanguageIdAndCodenameIdentifierQuery, LanguageIdentifierQuery, ListAssetFoldersQuery, ListAssetsQuery, ListContentItemsQuery, ListContentTypeSnippetsQuery, ListContentTypesQuery, ListLanguagesQuery, ListLanguageVariantsOfContentTypeQuery, ListLanguageVariantsOfContentTypeWithComponentsQuery, ListLanguageVariantsOfItemQuery, ListLanguageVariantsBySpaceQuery, ListTaxonomiesQuery, ListWebhooksQuery, ListLegacyWebhooksQuery, ModifyAssetFoldersQuery, ModifyContentTypeQuery, ModifyContentTypeSnippetQuery, ModifyLanguageQuery, EnvironmentIdentifierQuery, EnvironmentInformationQuery, PublishLanguageVariantQuery, TaxonomyIdentifierQuery, UnpublishLanguageVariantQuery, UpdateContentItemQuery, UploadBinaryFileQuery, UpsertAssetQuery, UpsertContentItemQuery, UpsertLanguageVariantQuery, ViewAssetsQuery, ViewContentItemQuery, ViewContentTypeQuery, ViewContentTypeSnippetQuery, ViewLanguageQuery, ViewLanguageVariantQuery, WebhookIdentifierQuery, ModifyTaxonomyQuery, PostQuery, ActionQuery, PatchQuery, PutQuery, DeleteQuery, GetQuery, CancelScheduledUnpublishingOfLanguageVariantQuery, EnableWebhookQuery, EnableLegacyWebhookQuery, DisableWebhookQuery, DisableLegacyWebhookQuery, ListCollectionsQuery, CollectionIdentifierQuery, ListLanguageVariantsByCollectionQuery, SetCollectionsQuery, UploadAssetFromUrlQuery, ListSubscriptionProjectsQuery, ViewSubscriptionProjectQuery, ListSubscriptionUsersQuery, UserIdentifierQuery, ViewSubscriptionUserQuery, ActivateUserInAllProjectsQuery, DeactivateUserInAllProjectsQuery, ListRolesQuery, InviteProjectUserQuery, ChangeUserRolesQuery, RoleIdentifierQuery, ViewRoleQuery, ListAssetRenditionsQuery, ModifyAssetRenditionQuery, AddAssetRenditionQuery, RenditionIdentifierQuery, ViewAssetRenditionQuery, ChangeWorkflowOfLanguageOrVariantQuery, ListWorkflowsQuery, WorkflowIdentifierQuery, DeleteWorkflowQuery, AddWorkflowQuery, UpdateWorkflowQuery, StartEnvironmentValidationQuery, TaskIdentifierQuery, CheckEnvironmentValidationQuery, ListEnvironmentValidationIssuesQuery, AddSpaceQuery, DeleteSpaceQuery, ListSpacesQuery, ModifySpaceQuery, ViewSpaceQuery, SpaceIdentifierQuery, GetPreviewConfigurationQuery, ModifyPreviewConfigurationQuery, ActivateWebSpotlightQuery, DeactivateWebSpotlightQuery, CheckWebSpotlightStatusQuery, ListCustomAppsQuery, AddCustomAppQuery, CustomAppsIdentifierQuery, GetCustomAppQuery, ModifyCustomAppQuery, DeleteCustomAppQuery } from '../queries';
import { ManagementQueryService, IMappingService } from '../services';
import { IEarlyAccess, IManagementClient } from './imanagement-client.interface';
import { CancelToken } from 'axios';
import { GetEnvironmentCloningStateQuery } from '../queries/environments';
import { DeleteEnvironmentQuery } from '../queries/environments/delete-environment-query';
import { EnvironmentModels } from '../models/environments/environment.models';
import { CloneEnvironmentQuery } from '../queries/environments/clone-environment-query';
import { MarkEnvironmentAsProductionQuery } from '../queries/environments/mark-environment-as-production-query';
import { ModifyEnvironmentQuery } from '../queries/environments/modify-environment-query';
export declare class ManagementClient implements IManagementClient<CancelToken> {
    protected readonly config: IManagementClientConfig;
    protected readonly queryService: ManagementQueryService;
    private httpService;
    readonly mappingService: IMappingService;
    constructor(config: IManagementClientConfig);
    earlyAccess: IEarlyAccess;
    createCancelToken(): IHttpCancelRequestToken<CancelToken>;
    post(): ActionQuery<DataQuery<PostQuery, any>>;
    patch(): ActionQuery<DataQuery<PatchQuery, any>>;
    put(): ActionQuery<DataQuery<PutQuery, any>>;
    delete(): ActionQuery<DeleteQuery>;
    get(): ActionQuery<GetQuery>;
    createNewVersionOfLanguageVariant(): ContentItemIdentifierQuery<LanguageIdAndCodenameIdentifierQuery<CreateNewVersionOfLanguageVariantQuery>>;
    unpublishLanguageVariant(): ContentItemIdentifierQuery<LanguageIdAndCodenameIdentifierQuery<DataQueryOptional<UnpublishLanguageVariantQuery, WorkflowModels.IUnpublishLanguageVarianthData>>>;
    cancelSheduledPublishingOfLanguageVariant(): ContentItemIdentifierQuery<LanguageIdAndCodenameIdentifierQuery<CancelScheduledPublishingOfLanguageVariantQuery>>;
    cancelSheduledUnpublishingOfLanguageVariant(): ContentItemIdentifierQuery<LanguageIdAndCodenameIdentifierQuery<CancelScheduledUnpublishingOfLanguageVariantQuery>>;
    changeWorkflowOfLanguageVariant(): ContentItemIdentifierQuery<LanguageIdAndCodenameIdentifierQuery<DataQuery<ChangeWorkflowOfLanguageOrVariantQuery, WorkflowModels.IChangeWorkflowOfLanguageVariantData>>>;
    listWorkflows(): ListWorkflowsQuery;
    deleteWorkflow(): WorkflowIdentifierQuery<DeleteWorkflowQuery>;
    addWorkflow(): DataQuery<AddWorkflowQuery, WorkflowModels.IAddWorkflowData>;
    updateWorkflow(): WorkflowIdentifierQuery<DataQuery<UpdateWorkflowQuery, WorkflowModels.IUpdateWorkflowData>>;
    publishLanguageVariant(): ContentItemIdentifierQuery<LanguageIdAndCodenameIdentifierQuery<DataQueryOptional<PublishLanguageVariantQuery, WorkflowModels.IPublishLanguageVariantData>>>;
    listContentTypeSnippets(): ListContentTypeSnippetsQuery;
    viewContentTypeSnippet(): ContentTypeIdentifierQuery<ViewContentTypeSnippetQuery>;
    deleteContentTypeSnippet(): ContentTypeIdentifierQuery<DeleteContentTypeSnippetQuery>;
    addContentTypeSnippet(): DataQuery<AddContentTypeSnippetQuery, (builder: ContentTypeSnippetElements) => ContentTypeSnippetModels.IAddContentTypeSnippetData>;
    viewLanguageVariant(): ContentItemIdentifierQuery<LanguageIdAndCodenameIdentifierQuery<ViewLanguageVariantQuery>>;
    upsertLanguageVariant(): ContentItemIdentifierQuery<LanguageIdAndCodenameIdentifierQuery<DataQuery<UpsertLanguageVariantQuery, (builder: LanguageVariantElementsBuilder) => LanguageVariantContracts.IUpsertLanguageVariantPostContract>>>;
    deleteLanguageVariant(): ContentItemIdentifierQuery<LanguageIdAndCodenameIdentifierQuery<DeleteLanguageVariantQuery>>;
    startEnvironmentValidation(): StartEnvironmentValidationQuery;
    checkEnvironmentValidation(): TaskIdentifierQuery<CheckEnvironmentValidationQuery>;
    listEnvironmentValidationIssues(): TaskIdentifierQuery<ListEnvironmentValidationIssuesQuery>;
    deleteContentType(): ContentTypeIdentifierQuery<DeleteContentTypeQuery>;
    addContentType(): DataQuery<AddContentTypeQuery, (builder: ContentTypeElementsBuilder) => ContentTypeModels.IAddContentTypeData>;
    modifyContentTypeSnippet(): ContentTypeIdentifierQuery<DataQuery<ModifyContentTypeSnippetQuery, ContentTypeSnippetModels.IModifyContentTypeSnippetData[]>>;
    modifyContentType(): ContentTypeIdentifierQuery<DataQuery<ModifyContentTypeQuery, ContentTypeModels.IModifyContentTypeData[]>>;
    modifyTaxonomy(): TaxonomyIdentifierQuery<DataQuery<ModifyTaxonomyQuery, TaxonomyModels.IModifyTaxonomyData[]>>;
    viewContentType(): ContentTypeIdentifierQuery<ViewContentTypeQuery>;
    listContentTypes(): ListContentTypesQuery;
    listAssetRenditions(): AssetIdentifierQuery<ListAssetRenditionsQuery>;
    addAssetRendition(): AssetIdentifierQuery<DataQuery<AddAssetRenditionQuery, AssetRenditionModels.IAddAssetRenditionData>>;
    modifyAssetRendition(): AssetIdentifierQuery<RenditionIdentifierQuery<DataQuery<ModifyAssetRenditionQuery, AssetRenditionModels.IModifyAssetRenditionData>>>;
    viewAssetRendition(): AssetIdentifierQuery<RenditionIdentifierQuery<ViewAssetRenditionQuery>>;
    deleteTaxonomy(): TaxonomyIdentifierQuery<DeleteTaxonomyQuery>;
    addTaxonomy(): DataQuery<AddTaxonomyQuery, TaxonomyModels.IAddTaxonomyRequestModel>;
    listTaxonomies(): ListTaxonomiesQuery;
    getTaxonomy(): TaxonomyIdentifierQuery<GetTaxonomyQuery>;
    deleteAsset(): AssetIdentifierQuery<DeleteAssetQuery>;
    upsertAsset(): AssetIdentifierQuery<DataQuery<UpsertAssetQuery, (builder: AssetElementsBuilder) => AssetModels.IUpsertAssetRequestData>>;
    addAsset(): DataQuery<AddAssetQuery, (builder: AssetElementsBuilder) => AssetModels.IAddAssetRequestData>;
    uploadBinaryFile(): DataQuery<UploadBinaryFileQuery, AssetModels.IUploadBinaryFileRequestData>;
    uploadAssetFromUrl(): DataQuery<UploadAssetFromUrlQuery, AssetModels.IUploadAssetFromUrlRequestData>;
    viewAsset(): AssetIdentifierQuery<ViewAssetsQuery>;
    listAssets(): ListAssetsQuery;
    listContentItems(): ListContentItemsQuery;
    viewContentItem(): ContentItemIdentifierQuery<ViewContentItemQuery>;
    addContentItem(): DataQuery<AddContentItemQuery, ContentItemContracts.IAddContentItemPostContract>;
    updateContentItem(): ContentItemIdentifierQuery<DataQuery<UpdateContentItemQuery, ContentItemContracts.IUpdateContentItemPostContract>>;
    upsertContentItem(): ContentItemIdentifierQuery<DataQuery<UpsertContentItemQuery, ContentItemContracts.IUpsertContentItemPostContract>>;
    deleteContentItem(): ContentItemIdentifierQuery<DeleteContentItemQuery>;
    listLanguageVariantsOfItem(): ContentItemIdentifierQuery<ListLanguageVariantsOfItemQuery>;
    listLanguageVariantsOfContentType(): ContentTypeCodenameAndIdIdentifierQuery<ListLanguageVariantsOfContentTypeQuery>;
    listLanguageVariantsByCollection(): CollectionIdentifierQuery<ListLanguageVariantsByCollectionQuery>;
    listLanguageVariantsBySpace(): SpaceIdentifierQuery<ListLanguageVariantsBySpaceQuery>;
    listLanguageVariantsOfContentTypeWithComponents(): ContentTypeCodenameAndIdIdentifierQuery<ListLanguageVariantsOfContentTypeWithComponentsQuery>;
    listLanguages(): ListLanguagesQuery;
    viewLanguage(): LanguageIdentifierQuery<ViewLanguageQuery>;
    addLanguage(): DataQuery<AddLanguageQuery, LanguageModels.IAddLanguageData>;
    modifyLanguage(): LanguageIdentifierQuery<DataQuery<ModifyLanguageQuery, LanguageModels.IModifyLanguageData[]>>;
    deleteWebhook(): WebhookIdentifierQuery<DeleteWebhookQuery>;
    addWebhook(): DataQuery<AddWebhookQuery, WebhookModels.IAddWebhookData>;
    enableWebhook(): WebhookIdentifierQuery<EnableWebhookQuery>;
    disableWebhook(): WebhookIdentifierQuery<DisableWebhookQuery>;
    getWebhook(): WebhookIdentifierQuery<GetWebhookQuery>;
    listWebhooks(): ListWebhooksQuery;
    deleteLegacyWebhook(): WebhookIdentifierQuery<DeleteLegacyWebhookQuery>;
    addLegacyWebhook(): DataQuery<AddLegacyWebhookQuery, WebhookModels.IAddLegacyWebhookData>;
    enableLegacyWebhook(): WebhookIdentifierQuery<EnableLegacyWebhookQuery>;
    disableLegacyWebhook(): WebhookIdentifierQuery<DisableLegacyWebhookQuery>;
    getLegacyWebhook(): WebhookIdentifierQuery<GetLegacyWebhookQuery>;
    listLegacyWebhooks(): ListLegacyWebhooksQuery;
    environmentInformation(): EnvironmentInformationQuery;
    listAssetFolders(): ListAssetFoldersQuery;
    addAssetFolders(): DataQuery<AddAssetFoldersQuery, AssetFolderModels.IAddAssetFoldersData>;
    modifyAssetFolders(): DataQuery<ModifyAssetFoldersQuery, AssetFolderModels.IModifyAssetFolderData[]>;
    listCollections(): ListCollectionsQuery;
    setCollections(): DataQuery<SetCollectionsQuery, CollectionModels.ISetCollectionData[]>;
    createLanguageVariantEditUrl(data: {
        variantId: string;
        languageCodename: string;
        elementCodename?: string;
        nestedItemId?: string;
        nestedItemElementCodename?: string;
    }): string;
    listSubscriptionProjects(): ListSubscriptionProjectsQuery;
    listSubscriptionUsers(): ListSubscriptionUsersQuery;
    viewSubscriptionProject(): EnvironmentIdentifierQuery<ViewSubscriptionProjectQuery>;
    viewSubscriptionUser(): UserIdentifierQuery<ViewSubscriptionUserQuery>;
    activateUserInAllProjects(): UserIdentifierQuery<ActivateUserInAllProjectsQuery>;
    deactivateUserInAllProjects(): UserIdentifierQuery<DeactivateUserInAllProjectsQuery>;
    listRoles(): ListRolesQuery;
    viewRole(): RoleIdentifierQuery<ViewRoleQuery>;
    getPreviewConfiguration(): GetPreviewConfigurationQuery;
    modifyPreviewConfiguration(): DataQuery<ModifyPreviewConfigurationQuery, PreviewModels.IModifyPreviewConfigurationData>;
    inviteUser(): DataQuery<InviteProjectUserQuery, ProjectUserModels.IInviteUserData>;
    changeUserRoles(): UserIdentifierQuery<DataQuery<ChangeUserRolesQuery, ProjectUserModels.IChangeUserRoleData>>;
    getEnvironmentCloningState(): GetEnvironmentCloningStateQuery;
    deleteEnvironment(): DeleteEnvironmentQuery;
    modifyEnvironment(): DataQuery<ModifyEnvironmentQuery, EnvironmentModels.IModifyEnvironmentData[]>;
    cloneEnvironment(): DataQuery<CloneEnvironmentQuery, EnvironmentModels.ICloneEnvironmentData>;
    markEnvironmentAsProduction(): DataQuery<MarkEnvironmentAsProductionQuery, EnvironmentModels.IMarkEnvironmentAsProductionData>;
    addSpace(): DataQuery<AddSpaceQuery, SpaceModels.IAddSpaceData>;
    deleteSpace(): SpaceIdentifierQuery<DeleteSpaceQuery>;
    listSpaces(): ListSpacesQuery;
    modifySpace(): SpaceIdentifierQuery<DataQuery<ModifySpaceQuery, SpaceModels.IModifySpaceData[]>>;
    viewSpace(): SpaceIdentifierQuery<ViewSpaceQuery>;
    activateWebSpotlight(): DataQuery<ActivateWebSpotlightQuery, WebSpotlightModels.IActivateWebSpotlightData>;
    deactivateWebSpotlight(): DeactivateWebSpotlightQuery;
    checkWebSpotlightStatus(): CheckWebSpotlightStatusQuery;
    modifyCustomApp(): CustomAppsIdentifierQuery<DataQuery<ModifyCustomAppQuery, CustomAppModels.ModifyCustomAppOperation[]>>;
    deleteCustomApp(): CustomAppsIdentifierQuery<DeleteCustomAppQuery>;
    addCustomApp(): DataQuery<AddCustomAppQuery, CustomAppModels.IAddCustomAppData>;
    listCustomApps(): ListCustomAppsQuery;
    getCustomApp(): CustomAppsIdentifierQuery<GetCustomAppQuery>;
}
