import { HttpService } from '@kontent-ai/core-sdk';
import { AddAssetFoldersQuery, AddAssetQuery, AddContentItemQuery, AddContentTypeQuery, AddContentTypeSnippetQuery, AddLanguageQuery, AddTaxonomyQuery, AddWebhookQuery, AddLegacyWebhookQuery, AssetIdentifierQuery, CancelScheduledPublishingOfLanguageVariantQuery, ContentItemIdentifierQuery, ContentTypeCodenameAndIdIdentifierQuery, ContentTypeIdentifierQuery, CreateNewVersionOfLanguageVariantQuery, DataQuery, DataQueryOptional, DeleteAssetQuery, DeleteContentItemQuery, DeleteContentTypeQuery, DeleteContentTypeSnippetQuery, DeleteLanguageVariantQuery, DeleteTaxonomyQuery, DeleteWebhookQuery, DeleteLegacyWebhookQuery, GetTaxonomyQuery, GetWebhookQuery, GetLegacyWebhookQuery, LanguageIdAndCodenameIdentifierQuery, LanguageIdentifierQuery, ListAssetFoldersQuery, ListAssetsQuery, ListContentItemsQuery, ListContentTypeSnippetsQuery, ListContentTypesQuery, ListLanguagesQuery, ListLanguageVariantsOfContentTypeQuery, ListLanguageVariantsOfContentTypeWithComponentsQuery, ListLanguageVariantsOfItemQuery, ListLanguageVariantsBySpaceQuery, ListTaxonomiesQuery, ListWebhooksQuery, ListLegacyWebhooksQuery, ModifyAssetFoldersQuery, ModifyContentTypeQuery, ModifyContentTypeSnippetQuery, ModifyLanguageQuery, EnvironmentIdentifierQuery, EnvironmentInformationQuery, PublishLanguageVariantQuery, TaxonomyIdentifierQuery, UnpublishLanguageVariantQuery, UpdateContentItemQuery, UploadBinaryFileQuery, UpsertAssetQuery, UpsertContentItemQuery, UpsertLanguageVariantQuery, ViewAssetsQuery, ViewContentItemQuery, ViewContentTypeQuery, ViewContentTypeSnippetQuery, ViewLanguageQuery, ViewLanguageVariantQuery, WebhookIdentifierQuery, ModifyTaxonomyQuery, PostQuery, ActionQuery, PatchQuery, PutQuery, DeleteQuery, GetQuery, CancelScheduledUnpublishingOfLanguageVariantQuery, EnableWebhookQuery, EnableLegacyWebhookQuery, DisableWebhookQuery, DisableLegacyWebhookQuery, ListCollectionsQuery, CollectionIdentifierQuery, ListLanguageVariantsByCollectionQuery, SetCollectionsQuery, UploadAssetFromUrlQuery, ListSubscriptionProjectsQuery, ViewSubscriptionProjectQuery, ListSubscriptionUsersQuery, UserIdentifierQuery, ViewSubscriptionUserQuery, ActivateUserInAllProjectsQuery, DeactivateUserInAllProjectsQuery, ListRolesQuery, InviteProjectUserQuery, ChangeUserRolesQuery, RoleIdentifierQuery, ViewRoleQuery, ListAssetRenditionsQuery, ModifyAssetRenditionQuery, AddAssetRenditionQuery, RenditionIdentifierQuery, ViewAssetRenditionQuery, ChangeWorkflowOfLanguageOrVariantQuery, ListWorkflowsQuery, WorkflowIdentifierQuery, DeleteWorkflowQuery, AddWorkflowQuery, UpdateWorkflowQuery, StartEnvironmentValidationQuery, TaskIdentifierQuery, CheckEnvironmentValidationQuery, ListEnvironmentValidationIssuesQuery, AddSpaceQuery, DeleteSpaceQuery, ListSpacesQuery, ModifySpaceQuery, ViewSpaceQuery, SpaceIdentifierQuery, GetPreviewConfigurationQuery, ModifyPreviewConfigurationQuery, ActivateWebSpotlightQuery, DeactivateWebSpotlightQuery, CheckWebSpotlightStatusQuery, ListCustomAppsQuery, AddCustomAppQuery, CustomAppsIdentifierQuery, GetCustomAppQuery, ModifyCustomAppQuery, DeleteCustomAppQuery, FilterLanguageVariantsQuery } from '../queries';
import { sdkInfo } from '../sdk-info.generated';
import { ManagementQueryService, MappingService } from '../services';
import { GetEnvironmentCloningStateQuery } from '../queries/environments';
import { DeleteEnvironmentQuery } from '../queries/environments/delete-environment-query';
import { CloneEnvironmentQuery } from '../queries/environments/clone-environment-query';
import { MarkEnvironmentAsProductionQuery } from '../queries/environments/mark-environment-as-production-query';
import { ModifyEnvironmentQuery } from '../queries/environments/modify-environment-query';
export class ManagementClient {
    constructor(config) {
        this.config = config;
        this.mappingService = new MappingService();
        this.earlyAccess = {
            filterLanguageVariants: () => {
                return new DataQuery(this.config, this.queryService, (config, queryService, data) => new FilterLanguageVariantsQuery(config, queryService, data));
            }
        };
        const httpService = config.httpService ? config.httpService : new HttpService();
        this.queryService = new ManagementQueryService(config, httpService, {
            host: sdkInfo.host,
            name: sdkInfo.name,
            version: sdkInfo.version
        });
        this.httpService = httpService;
    }
    createCancelToken() {
        return this.httpService.createCancelToken();
    }
    post() {
        return new ActionQuery(this.config, this.queryService, (config, queryService, action) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new PostQuery(nConfig, nQueryService, action, data)));
    }
    patch() {
        return new ActionQuery(this.config, this.queryService, (config, queryService, action) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new PatchQuery(nConfig, nQueryService, action, data)));
    }
    put() {
        return new ActionQuery(this.config, this.queryService, (config, queryService, action) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new PutQuery(nConfig, nQueryService, action, data)));
    }
    delete() {
        return new ActionQuery(this.config, this.queryService, (config, queryService, action) => new DeleteQuery(config, queryService, action));
    }
    get() {
        return new ActionQuery(this.config, this.queryService, (config, queryService, action) => new GetQuery(config, queryService, action));
    }
    createNewVersionOfLanguageVariant() {
        return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new CreateNewVersionOfLanguageVariantQuery(nConfig, nQueryService, contentItemIdentifier, languageIdentifier)));
    }
    unpublishLanguageVariant() {
        return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new DataQueryOptional(nConfig, nQueryService, (pConfig, pQueryService, data) => new UnpublishLanguageVariantQuery(pConfig, pQueryService, contentItemIdentifier, languageIdentifier, data))));
    }
    cancelSheduledPublishingOfLanguageVariant() {
        return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new CancelScheduledPublishingOfLanguageVariantQuery(nConfig, nQueryService, contentItemIdentifier, languageIdentifier)));
    }
    cancelSheduledUnpublishingOfLanguageVariant() {
        return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new CancelScheduledUnpublishingOfLanguageVariantQuery(nConfig, nQueryService, contentItemIdentifier, languageIdentifier)));
    }
    changeWorkflowOfLanguageVariant() {
        return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new DataQuery(nConfig, nQueryService, (mConfig, mQueryservice, data) => {
            return new ChangeWorkflowOfLanguageOrVariantQuery(config, queryService, contentItemIdentifier, languageIdentifier, data);
        })));
    }
    listWorkflows() {
        return new ListWorkflowsQuery(this.config, this.queryService);
    }
    deleteWorkflow() {
        return new WorkflowIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteWorkflowQuery(config, queryService, identifier));
    }
    addWorkflow() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddWorkflowQuery(config, queryService, data));
    }
    updateWorkflow() {
        return new WorkflowIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new UpdateWorkflowQuery(nConfig, nQueryService, data, identifier)));
    }
    publishLanguageVariant() {
        return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new DataQueryOptional(nConfig, nQueryService, (pConfig, pQueryService, data) => new PublishLanguageVariantQuery(pConfig, pQueryService, contentItemIdentifier, languageIdentifier, data))));
    }
    listContentTypeSnippets() {
        return new ListContentTypeSnippetsQuery(this.config, this.queryService);
    }
    viewContentTypeSnippet() {
        return new ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewContentTypeSnippetQuery(config, queryService, identifier));
    }
    deleteContentTypeSnippet() {
        return new ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteContentTypeSnippetQuery(config, queryService, identifier));
    }
    addContentTypeSnippet() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddContentTypeSnippetQuery(config, queryService, data));
    }
    viewLanguageVariant() {
        return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new ViewLanguageVariantQuery(nConfig, nQueryService, contentItemIdentifier, languageIdentifier)));
    }
    upsertLanguageVariant() {
        return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new DataQuery(nConfig, nQueryService, (mConfig, mQueryService, elements) => new UpsertLanguageVariantQuery(mConfig, mQueryService, contentItemIdentifier, languageIdentifier, elements))));
    }
    deleteLanguageVariant() {
        return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new DeleteLanguageVariantQuery(nConfig, nQueryService, contentItemIdentifier, languageIdentifier)));
    }
    startEnvironmentValidation() {
        return new StartEnvironmentValidationQuery(this.config, this.queryService);
    }
    checkEnvironmentValidation() {
        return new TaskIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new CheckEnvironmentValidationQuery(config, queryService, identifier));
    }
    listEnvironmentValidationIssues() {
        return new TaskIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ListEnvironmentValidationIssuesQuery(config, queryService, identifier));
    }
    deleteContentType() {
        return new ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteContentTypeQuery(config, queryService, identifier));
    }
    addContentType() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddContentTypeQuery(config, queryService, data));
    }
    modifyContentTypeSnippet() {
        return new ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new ModifyContentTypeSnippetQuery(nConfig, nQueryService, identifier, data)));
    }
    modifyContentType() {
        return new ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new ModifyContentTypeQuery(nConfig, nQueryService, identifier, data)));
    }
    modifyTaxonomy() {
        return new TaxonomyIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new ModifyTaxonomyQuery(nConfig, nQueryService, identifier, data)));
    }
    viewContentType() {
        return new ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewContentTypeQuery(config, queryService, identifier));
    }
    listContentTypes() {
        return new ListContentTypesQuery(this.config, this.queryService);
    }
    listAssetRenditions() {
        return new AssetIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ListAssetRenditionsQuery(config, queryService, identifier));
    }
    addAssetRendition() {
        return new AssetIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new AddAssetRenditionQuery(nConfig, nQueryService, identifier, data)));
    }
    modifyAssetRendition() {
        return new AssetIdentifierQuery(this.config, this.queryService, (config, queryService, assetIdentifier) => new RenditionIdentifierQuery(config, queryService, (mConfig, mQueryService, renditionIdentifier) => {
            return new DataQuery(config, queryService, (nConfig, nQueryService, data) => new ModifyAssetRenditionQuery(nConfig, nQueryService, assetIdentifier, renditionIdentifier, data));
        }));
    }
    viewAssetRendition() {
        return new AssetIdentifierQuery(this.config, this.queryService, (config, queryService, assetIdentifier) => new RenditionIdentifierQuery(config, queryService, (xConfig, xQueryService, renditionIdentifier) => {
            return new ViewAssetRenditionQuery(config, queryService, assetIdentifier, renditionIdentifier);
        }));
    }
    deleteTaxonomy() {
        return new TaxonomyIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteTaxonomyQuery(config, queryService, identifier));
    }
    addTaxonomy() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddTaxonomyQuery(config, queryService, data));
    }
    listTaxonomies() {
        return new ListTaxonomiesQuery(this.config, this.queryService);
    }
    getTaxonomy() {
        return new TaxonomyIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new GetTaxonomyQuery(config, queryService, identifier));
    }
    deleteAsset() {
        return new AssetIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteAssetQuery(config, queryService, identifier));
    }
    upsertAsset() {
        return new AssetIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(this.config, this.queryService, (xConfig, xQueryService, data) => new UpsertAssetQuery(config, queryService, identifier, data)));
    }
    addAsset() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddAssetQuery(config, queryService, data));
    }
    uploadBinaryFile() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new UploadBinaryFileQuery(config, queryService, data));
    }
    uploadAssetFromUrl() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new UploadAssetFromUrlQuery(config, queryService, data));
    }
    viewAsset() {
        return new AssetIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewAssetsQuery(config, queryService, identifier));
    }
    listAssets() {
        return new ListAssetsQuery(this.config, this.queryService);
    }
    listContentItems() {
        return new ListContentItemsQuery(this.config, this.queryService);
    }
    viewContentItem() {
        return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewContentItemQuery(config, queryService, identifier));
    }
    addContentItem() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddContentItemQuery(config, queryService, data));
    }
    updateContentItem() {
        return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new UpdateContentItemQuery(nConfig, nQueryService, data, identifier)));
    }
    upsertContentItem() {
        return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new UpsertContentItemQuery(nConfig, nQueryService, data, identifier)));
    }
    deleteContentItem() {
        return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteContentItemQuery(config, queryService, identifier));
    }
    listLanguageVariantsOfItem() {
        return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ListLanguageVariantsOfItemQuery(config, queryService, identifier));
    }
    listLanguageVariantsOfContentType() {
        return new ContentTypeCodenameAndIdIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ListLanguageVariantsOfContentTypeQuery(config, queryService, identifier));
    }
    listLanguageVariantsByCollection() {
        return new CollectionIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ListLanguageVariantsByCollectionQuery(config, queryService, identifier));
    }
    listLanguageVariantsBySpace() {
        return new SpaceIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ListLanguageVariantsBySpaceQuery(config, queryService, identifier));
    }
    listLanguageVariantsOfContentTypeWithComponents() {
        return new ContentTypeCodenameAndIdIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ListLanguageVariantsOfContentTypeWithComponentsQuery(config, queryService, identifier));
    }
    listLanguages() {
        return new ListLanguagesQuery(this.config, this.queryService);
    }
    viewLanguage() {
        return new LanguageIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewLanguageQuery(config, queryService, identifier));
    }
    addLanguage() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddLanguageQuery(config, queryService, data));
    }
    modifyLanguage() {
        return new LanguageIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new ModifyLanguageQuery(nConfig, nQueryService, identifier, data)));
    }
    deleteWebhook() {
        return new WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteWebhookQuery(config, queryService, identifier));
    }
    addWebhook() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddWebhookQuery(config, queryService, data));
    }
    enableWebhook() {
        return new WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new EnableWebhookQuery(config, queryService, identifier));
    }
    disableWebhook() {
        return new WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DisableWebhookQuery(config, queryService, identifier));
    }
    getWebhook() {
        return new WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new GetWebhookQuery(config, queryService, identifier));
    }
    listWebhooks() {
        return new ListWebhooksQuery(this.config, this.queryService);
    }
    deleteLegacyWebhook() {
        return new WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteLegacyWebhookQuery(config, queryService, identifier));
    }
    addLegacyWebhook() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddLegacyWebhookQuery(config, queryService, data));
    }
    enableLegacyWebhook() {
        return new WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new EnableLegacyWebhookQuery(config, queryService, identifier));
    }
    disableLegacyWebhook() {
        return new WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DisableLegacyWebhookQuery(config, queryService, identifier));
    }
    getLegacyWebhook() {
        return new WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new GetLegacyWebhookQuery(config, queryService, identifier));
    }
    listLegacyWebhooks() {
        return new ListLegacyWebhooksQuery(this.config, this.queryService);
    }
    environmentInformation() {
        return new EnvironmentInformationQuery(this.config, this.queryService);
    }
    listAssetFolders() {
        return new ListAssetFoldersQuery(this.config, this.queryService);
    }
    addAssetFolders() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddAssetFoldersQuery(config, queryService, data));
    }
    modifyAssetFolders() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new ModifyAssetFoldersQuery(config, queryService, data));
    }
    listCollections() {
        return new ListCollectionsQuery(this.config, this.queryService);
    }
    setCollections() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new SetCollectionsQuery(config, queryService, data));
    }
    createLanguageVariantEditUrl(data) {
        let url = `https://app.kontent.ai/goto/edit-item/project/${this.config.environmentId}/variant-codename/${data.languageCodename}/item/${data.variantId}`;
        if (data.elementCodename) {
            url += `/element/${data.elementCodename}`;
        }
        if (data.nestedItemId) {
            url += `/item/${data.nestedItemId}`;
            if (data.nestedItemElementCodename) {
                url += `/element/${data.nestedItemElementCodename}`;
            }
        }
        return url;
    }
    listSubscriptionProjects() {
        return new ListSubscriptionProjectsQuery(this.config, this.queryService);
    }
    listSubscriptionUsers() {
        return new ListSubscriptionUsersQuery(this.config, this.queryService);
    }
    viewSubscriptionProject() {
        return new EnvironmentIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewSubscriptionProjectQuery(config, queryService, identifier));
    }
    viewSubscriptionUser() {
        return new UserIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewSubscriptionUserQuery(config, queryService, identifier));
    }
    activateUserInAllProjects() {
        return new UserIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ActivateUserInAllProjectsQuery(config, queryService, identifier));
    }
    deactivateUserInAllProjects() {
        return new UserIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeactivateUserInAllProjectsQuery(config, queryService, identifier));
    }
    listRoles() {
        return new ListRolesQuery(this.config, this.queryService);
    }
    viewRole() {
        return new RoleIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewRoleQuery(config, queryService, identifier));
    }
    getPreviewConfiguration() {
        return new GetPreviewConfigurationQuery(this.config, this.queryService);
    }
    modifyPreviewConfiguration() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new ModifyPreviewConfigurationQuery(config, queryService, data));
    }
    inviteUser() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new InviteProjectUserQuery(config, queryService, data));
    }
    changeUserRoles() {
        return new UserIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new ChangeUserRolesQuery(nConfig, nQueryService, identifier, data)));
    }
    getEnvironmentCloningState() {
        return new GetEnvironmentCloningStateQuery(this.config, this.queryService);
    }
    deleteEnvironment() {
        return new DeleteEnvironmentQuery(this.config, this.queryService);
    }
    modifyEnvironment() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new ModifyEnvironmentQuery(config, queryService, data));
    }
    cloneEnvironment() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new CloneEnvironmentQuery(config, queryService, data));
    }
    markEnvironmentAsProduction() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new MarkEnvironmentAsProductionQuery(config, queryService, data));
    }
    addSpace() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddSpaceQuery(config, queryService, data));
    }
    deleteSpace() {
        return new SpaceIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteSpaceQuery(config, queryService, identifier));
    }
    listSpaces() {
        return new ListSpacesQuery(this.config, this.queryService);
    }
    modifySpace() {
        return new SpaceIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new ModifySpaceQuery(nConfig, nQueryService, identifier, data)));
    }
    viewSpace() {
        return new SpaceIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewSpaceQuery(config, queryService, identifier));
    }
    activateWebSpotlight() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new ActivateWebSpotlightQuery(config, queryService, data));
    }
    deactivateWebSpotlight() {
        return new DeactivateWebSpotlightQuery(this.config, this.queryService);
    }
    checkWebSpotlightStatus() {
        return new CheckWebSpotlightStatusQuery(this.config, this.queryService);
    }
    modifyCustomApp() {
        return new CustomAppsIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new ModifyCustomAppQuery(nConfig, nQueryService, identifier, data)));
    }
    deleteCustomApp() {
        return new CustomAppsIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteCustomAppQuery(config, queryService, identifier));
    }
    addCustomApp() {
        return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddCustomAppQuery(config, queryService, data));
    }
    listCustomApps() {
        return new ListCustomAppsQuery(this.config, this.queryService);
    }
    getCustomApp() {
        return new CustomAppsIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new GetCustomAppQuery(config, queryService, identifier));
    }
}
//# sourceMappingURL=management-client.class.js.map