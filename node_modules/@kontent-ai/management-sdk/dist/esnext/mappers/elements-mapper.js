import { ElementModels } from '../models';
import { BaseMapper } from './base-mapper';
export class ElementsMapper extends BaseMapper {
    mapTypeElements(elementsRaw) {
        return elementsRaw.map((m) => this.mapTypeElement(m));
    }
    mapTypeElement(rawElement) {
        return rawElement;
    }
    mapElements(elementsRaw) {
        return elementsRaw.map((m) => {
            return this.mapElement(m);
        });
    }
    mapElement(rawElement) {
        var _a;
        return new ElementModels.ContentItemElement({
            element: super.mapReference(rawElement.element),
            value: this.mapElementValue(rawElement.value),
            components: this.mapElementComponents((_a = rawElement.components) !== null && _a !== void 0 ? _a : []),
            display_timezone: rawElement.display_timezone,
            mode: rawElement.mode,
            searchableValue: rawElement.searchable_value,
            _raw: rawElement
        });
    }
    mapElementComponents(components) {
        return components.map((m) => new ElementModels.ContentItemElementComponent({
            elements: this.mapElements(m.elements),
            id: m.id,
            type: m.type,
            _raw: m
        }));
    }
    mapElementValue(rawValue) {
        if (Array.isArray(rawValue)) {
            return rawValue.map((m) => super.mapReference(m));
        }
        return rawValue;
    }
}
export const elementsMapper = new ElementsMapper();
//# sourceMappingURL=elements-mapper.js.map