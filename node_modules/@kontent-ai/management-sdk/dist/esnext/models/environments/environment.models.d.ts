import { EnvironmentContracts } from '../../contracts';
export declare namespace EnvironmentModels {
    class EnvironmentReportModel {
        id: string;
        name: string;
        constructor(id: string, name: string);
    }
    class EnvironmentValidationVariantIssueModel {
        item: EnvironmentVariantContentItemModel;
        language: EnvironmentVariantLanguageModel;
        issues: EnvironmentIssueModel[];
        readonly issue_type: EnvironmentContracts.EnvironmentValidationIssueType;
        constructor(item: EnvironmentVariantContentItemModel, language: EnvironmentVariantLanguageModel, issues: EnvironmentIssueModel[]);
    }
    class EnvironmentValidationTypeIssueModel {
        type: EnvironmentTypeModel;
        issues: EnvironmentIssueModel[];
        readonly issue_type: EnvironmentContracts.EnvironmentValidationIssueType;
        constructor(type: EnvironmentTypeModel, issues: EnvironmentIssueModel[]);
    }
    class EnvironmentInformationModel {
        id: string;
        name: string;
        environment: string;
        constructor(id: string, name: string, environment: string);
    }
    class EnvironmentVariantContentItemModel {
        id: string;
        name: string;
        codename: string;
        constructor(id: string, name: string, codename: string);
    }
    class EnvironmentVariantLanguageModel {
        id: string;
        name: string;
        codename: string;
        constructor(id: string, name: string, codename: string);
    }
    class EnvironmentVariantElementModel {
        id: string;
        name: string;
        codename: string;
        constructor(id: string, name: string, codename: string);
    }
    class EnvironmentTypeIssueModel {
        type: EnvironmentTypeModel;
        issues: EnvironmentIssueModel[];
        constructor(type: EnvironmentTypeModel, issues: EnvironmentIssueModel[]);
    }
    class EnvironmentTypeModel {
        id: string;
        name: string;
        codename: string;
        constructor(id: string, name: string, codename: string);
    }
    class EnvironmentIssueModel {
        element: EnvironmentVariantElementModel;
        messages: string[];
        constructor(element: EnvironmentVariantElementModel, messages: string[]);
    }
    class EnvironmentVariantIssueModel {
        item: EnvironmentVariantContentItemModel;
        language: EnvironmentVariantLanguageModel;
        issues: EnvironmentIssueModel[];
        constructor(item: EnvironmentVariantContentItemModel, language: EnvironmentVariantLanguageModel, issues: EnvironmentIssueModel[]);
    }
    class EnvironmentCloningStateModel {
        cloningState: string;
        constructor(cloningState: string);
    }
    interface IModifyEnvironmentData {
        op: 'rename_environment';
        value: string;
    }
    class EnvironmentModel {
        id: string;
        name: string;
        isProduction: boolean;
        constructor(id: string, name: string, isProduction: boolean);
    }
    interface ICloneEnvironmentData {
        name: string;
        roles_to_activate?: string[];
        copy_data_options?: {
            content_items_assets?: boolean;
            content_item_version_history?: boolean;
        };
    }
    class CloneEnvironmentModel {
        id: string;
        managementApiKey: string;
        deliveryPreviewApiKey: string;
        securedDeliveryApiKey: string;
        constructor(id: string, managementApiKey: string, deliveryPreviewApiKey: string, securedDeliveryApiKey: string);
    }
    interface IMarkEnvironmentAsProductionData {
        enable_webhooks: boolean;
    }
}
