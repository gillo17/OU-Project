export declare namespace Identifiers {
    enum TaskIdentifierEnum {
        InternalId = "internalId"
    }
    enum ContentItemIdentifierEnum {
        ExternalId = "externalId",
        InternalId = "internalId",
        Codename = "codename"
    }
    enum ContentTypeIdentifierEnum {
        ExternalId = "externalId",
        InternalId = "internalId",
        Codename = "codename"
    }
    enum RenditionIdentifierEnum {
        ExternalId = "externalId",
        InternalId = "internalId"
    }
    enum CollectionIdentifierEnum {
        ExternalId = "externalId",
        InternalId = "internalId",
        Codename = "codename"
    }
    enum LanguageIdentifierEnum {
        InternalId = "internalId",
        Codename = "codename",
        ExternalId = "externalId"
    }
    enum WorkflowIdentifierEnum {
        Id = "id",
        Codename = "codename"
    }
    enum TaxonomyIdentifierEnum {
        InternalId = "internalId",
        ExternalId = "externalId",
        Codename = "codename"
    }
    enum CustomAppIdentifierEnum {
        InternalId = "internalId",
        Codename = "codename"
    }
    enum AssetIdentifierEnum {
        InternalId = "internalId",
        ExternalId = "externalId",
        Codename = "codename"
    }
    enum WebhookIdentifierEnum {
        Id = "id"
    }
    enum EnvironmentIdentifierEnum {
        Id = "id"
    }
    enum UserIdentifierEnum {
        Id = "id",
        Email = "email"
    }
    enum RoleIdentifierEnum {
        Id = "id",
        Codename = "codename"
    }
    enum SpaceIdentifierEnum {
        InternalId = "internalId",
        ExternalId = "externalId",
        Codename = "codename"
    }
    class AssetIdentifier {
        identifier: AssetIdentifierEnum;
        value: string;
        constructor(identifier: AssetIdentifierEnum, value: string);
        getParamValue(): string;
    }
    class TaxonomyIdentifier {
        identifier: TaxonomyIdentifierEnum;
        value: string;
        constructor(identifier: TaxonomyIdentifierEnum, value: string);
        getParamValue(): string;
    }
    class CustomAppIdentifier {
        identifier: CustomAppIdentifierEnum;
        value: string;
        constructor(identifier: CustomAppIdentifierEnum, value: string);
        getParamValue(): string;
    }
    class ContentTypeIdentifier {
        identifier: ContentTypeIdentifierEnum;
        value: string;
        constructor(identifier: ContentTypeIdentifierEnum, value: string);
        getParamValue(): string;
    }
    class RenditionIdentifier {
        identifier: RenditionIdentifierEnum;
        value: string;
        constructor(identifier: RenditionIdentifierEnum, value: string);
        getParamValue(): string;
    }
    class CollectionIdentifier {
        identifier: CollectionIdentifierEnum;
        value: string;
        constructor(identifier: CollectionIdentifierEnum, value: string);
        getParamValue(): string;
    }
    class WorkflowIdentifier {
        identifier: WorkflowIdentifierEnum;
        value: string;
        constructor(identifier: WorkflowIdentifierEnum, value: string);
        getParamValue(): string;
    }
    class TaskIdentifier {
        identifier: TaskIdentifierEnum;
        value: string;
        constructor(identifier: TaskIdentifierEnum, value: string);
        getParamValue(): string;
    }
    class ContentItemIdentifier {
        identifier: ContentItemIdentifierEnum;
        value: string;
        constructor(identifier: ContentItemIdentifierEnum, value: string);
        getParamValue(): string;
    }
    class LanguageIdentifier {
        identifier: LanguageIdentifierEnum;
        value: string;
        constructor(identifier: LanguageIdentifierEnum, value: string);
        getParamValue(): string;
    }
    class WebhookIdentifier {
        identifier: WebhookIdentifierEnum;
        value: string;
        constructor(identifier: WebhookIdentifierEnum, value: string);
        getParamValue(): string;
    }
    class EnvironmentIdentifier {
        identifier: EnvironmentIdentifierEnum;
        value: string;
        constructor(identifier: EnvironmentIdentifierEnum, value: string);
        getParamValue(): string;
    }
    class UserIdentifier {
        identifier: UserIdentifierEnum;
        value: string;
        constructor(identifier: UserIdentifierEnum, value: string);
        getParamValue(): string;
    }
    class RoleIdentifier {
        identifier: RoleIdentifierEnum;
        value: string;
        constructor(identifier: RoleIdentifierEnum, value: string);
        getParamValue(): string;
    }
    class SpaceIdentifier {
        identifier: SpaceIdentifierEnum;
        value: string;
        constructor(identifier: SpaceIdentifierEnum, value: string);
        getParamValue(): string;
    }
}
